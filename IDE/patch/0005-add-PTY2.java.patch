From f76dda94e2bf10bfa5bbee29f4e888908f85770a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=BE=90=E6=8C=81=E6=81=92=20Xu=20Chiheng?=
 <chiheng.xu@gmail.com>
Date: Sat, 6 Apr 2024 14:09:54 +0800
Subject: [PATCH 05/18] add PTY2.java

---
 .../src/org/eclipse/cdt/utils/pty/PTY2.java   | 81 +++++++++++++++++++
 1 file changed, 81 insertions(+)
 create mode 100644 core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PTY2.java

diff --git a/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PTY2.java b/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PTY2.java
new file mode 100644
index 0000000000..33797672b7
--- /dev/null
+++ b/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/pty/PTY2.java
@@ -0,0 +1,81 @@
+/********************************************************************************
+ * Copyright (c) 2022 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.utils.pty;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import org.eclipse.cdt.utils.spawner.ProcessFactory;
+import org.eclipse.core.runtime.Platform;
+
+public class PTY2 {
+	private Process terminalEmulator;
+	private String slaveName;
+
+	/**
+	 *
+	 * @throws IOException
+	 */
+	public PTY2() throws IOException {
+		// launch the patched terminal emulator process, and get the pty's slave name from stdout of the
+		// terminal emulator process
+		String command = null;
+		InputStream in = null;
+		try {
+			command = PTY2Util.getTerminalEmulatorCommand();
+			// both mintty.exe and konsole support --opentty and --title option
+			String[] cmdArray;
+			if (Platform.getOS().equals(Platform.OS_WIN32)) {
+				cmdArray = new String[] { command, "--openpty", "--hold=always", //$NON-NLS-1$ //$NON-NLS-2$
+						"--title", "Terminal Emulator" }; //$NON-NLS-1$ //$NON-NLS-2$
+			} else if (Platform.getOS().equals(Platform.OS_LINUX)) {
+				cmdArray = new String[] { command, "--openpty", "--nofork", "--hold", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+						"--title", "Terminal Emulator" }; //$NON-NLS-1$ //$NON-NLS-2$
+			} else {
+				cmdArray = new String[] { command, "--openpty", "--nofork", "--hold", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+						"--title", "Terminal Emulator" }; //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			terminalEmulator = ProcessFactory.getFactory().exec(cmdArray);
+
+			in = terminalEmulator.getInputStream();
+			InputStreamReader reader = new InputStreamReader(in);
+			BufferedReader br = new BufferedReader(reader);
+
+			String line = br.readLine();
+			if (line != null) {
+				slaveName = line;
+			}
+
+		} catch (IOException e) {
+
+		}
+		if (slaveName == null) {
+			throw new IOException("can not start terminal emulator and get pty's slave name"); //$NON-NLS-1$
+		}
+	}
+
+	/**
+	 *
+	 * @return
+	 */
+	public Process getTerminalEmulator() {
+		return this.terminalEmulator;
+	}
+
+	/**
+	 *
+	 * @return
+	 */
+	public String getSlaveName() {
+		return this.slaveName;
+	}
+}
-- 
2.42.1

