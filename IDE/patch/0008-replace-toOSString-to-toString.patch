From b6a6130d64df8de09d96b4259817b08e203ba03a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=BE=90=E6=8C=81=E6=81=92=20Xu=20Chiheng?=
 <chiheng.xu@gmail.com>
Date: Sat, 6 Apr 2024 14:05:24 +0800
Subject: [PATCH 08/37] replace toOSString to toString

---
 .../core/AutotoolsNewMakeGenerator.java       |  4 +-
 .../autotools/core/MarkerGenerator.java       |  2 +-
 .../core/PkgconfigErrorResolution.java        |  2 +-
 .../cdt/autotools/tests/ProjectTools.java     |  4 +-
 .../tests/SetConfigurationParameterTest.java  | 18 ++---
 .../ui/tests/TestEnvironmentVars.java         |  6 +-
 .../autotools/ui/tests/TestMakeTargets.java   |  4 +-
 .../autotools/ui/tests/TestToolActions.java   | 68 +++++++++---------
 .../automake/AutomakeDocumentProvider.java    |  2 +-
 .../automake/ExternalEditorInputFactory.java  |  2 +-
 .../editors/automake/OpenIncludeAction.java   |  4 +-
 .../eclipse/cdt/make/core/MakeCorePlugin.java |  2 +-
 .../cdt/make/internal/core/MakeRecon.java     |  2 +-
 .../gnu/GCCScannerInfoConsoleParser.java      |  2 +-
 .../core/scannerconfig/util/CCommandDSC.java  |  8 +--
 .../scannerconfig/util/CygpathTranslator.java |  2 +-
 .../scannerconfig2/DefaultRunSIProvider.java  |  4 +-
 .../ui/dialogs/GCCPerFileSCDProfilePage.java  |  2 +-
 .../dialogs/GCCPerProjectSCDProfilePage.java  |  2 +-
 .../cdt/make/ui/dialogs/MakeTargetDialog.java |  4 +-
 .../cdt/make/ui/dialogs/SettingsBlock.java    |  4 +-
 .../testplugin/ManagedBuildTestHelper.java    |  2 +-
 .../tests/BuiltinSpecsDetectorTest.java       |  6 +-
 .../tests/CompilationDatabaseParserTest.java  | 69 +++++++++----------
 .../tests/GCCBuildCommandParserTest.java      |  6 +-
 .../internal/buildmodel/BuildDescription.java | 10 +--
 .../internal/buildmodel/BuildStep.java        |  8 +--
 .../internal/buildmodel/CommandBuilder.java   |  2 +-
 .../internal/buildmodel/ProcessLauncher.java  |  2 +-
 .../internal/core/ManagedBuildInfo.java       |  2 +-
 .../envvar/MbsEnvironmentSupplier.java        |  4 +-
 .../internal/macros/MbsMacroSupplier.java     | 13 ++--
 .../AbstractBuiltinSpecsDetector.java         |  2 +-
 .../makegen/gnu/GnuMakefileGenerator.java     |  2 +-
 .../makegen/gnu2/GnuMakefileGenerator.java    |  2 +-
 .../DefaultIndexerDependencyCalculator.java   |  2 +-
 .../processes/CreateIncludeFolder.java        |  2 +-
 ...ygwinConfigurationEnvironmentSupplier.java |  2 +-
 .../MingwEnvironmentVariableSupplier.java     |  4 +-
 .../BuiltinSpecsDetectorOptionPage.java       |  2 +-
 .../CompilationDatabaseParserOptionPage.java  |  2 +-
 .../ui/wizards/MBSWizardHandler.java          |  2 +-
 .../ui/properties/MesonPropertyPage.java      |  4 +-
 .../ui/properties/CMakePropertyPage.java      |  4 +-
 .../AbstractExternalToolBasedChecker.java     |  2 +-
 .../InvocationParametersProvider.java         |  2 +-
 .../cxx/model/AbstractIndexAstChecker.java    |  2 +-
 .../ui/widgets/BasicElementLabels.java        |  2 +-
 .../tests/ErrorParserEfsFileMatchingTest.java |  2 +-
 .../tests/ErrorParserFileMatchingTest.java    | 18 ++---
 .../resources/tests/RefreshScopeTests.java    |  2 +-
 .../cdt/utils/FindProgramLocationTest.java    |  4 +-
 ...nguageSettingsPersistenceProjectTests.java |  8 +--
 .../parser/tests/scanner/InclusionTests.java  | 26 +++----
 .../cdt/internal/index/tests/Bug246129.java   |  6 +-
 .../tests/IndexBindingResolutionTestBase.java |  2 +-
 .../internal/index/tests/IndexBugsTests.java  |  4 +-
 .../index/tests/IndexIncludeTest.java         | 20 +++---
 .../cdt/core/testplugin/ResourceHelper.java   | 16 ++---
 .../LanguageSettingsScannerInfoProvider.java  |  8 +--
 ...ryScannerInfoLanguageSettingsProvider.java |  8 +--
 .../internal/core/model/PathEntryUtil.java    | 12 ++--
 .../internal/core/model/TranslationUnit.java  |  6 +-
 .../model/DescriptionScannerInfoProvider.java |  2 +-
 .../eclipse/cdt/core/parser/FileContent.java  |  4 +-
 .../cdt/core/parser/ICodeReaderCache.java     |  4 +-
 .../StandaloneIndexerInputAdapter.java        |  6 +-
 .../core/parser/InternalParserUtil.java       |  2 +-
 .../core/pdom/AbstractIndexerTask.java        |  4 +-
 .../cdt/internal/core/pdom/PDOMWriter.java    |  2 +-
 .../cdt/internal/core/pdom/dom/PDOMMacro.java |  2 +-
 .../core/pdom/dom/PDOMMacroReferenceName.java |  2 +-
 .../cdt/internal/core/pdom/dom/PDOMName.java  |  2 +-
 .../core/pdom/indexer/PDOMUpdateTask.java     |  2 +-
 .../indexer/ProjectIndexerInputAdapter.java   |  2 +-
 .../org/eclipse/cdt/core/CommandLauncher.java |  2 +-
 .../cdt/core/build/CBuildConfiguration.java   |  8 +--
 .../cdt/core/build/ScannerInfoCache.java      | 12 ++--
 .../core/errorparsers/FixitErrorParser.java   |  2 +-
 .../cdt/core/parser/CodeReaderCache.java      |  2 +-
 .../eclipse/cdt/core/resources/ACBuilder.java |  2 +-
 .../cdt/core/resources/FileStorage.java       |  2 +-
 .../cdt/core/resources/ScannerProvider.java   |  8 +--
 .../core/cdtvariables/CdtMacroSupplier.java   | 12 ++--
 .../core/dom/InternalASTServiceProvider.java  | 18 ++---
 .../PartialWorkingCopyCodeReaderFactory.java  |  2 +-
 .../core/dom/SavedCodeReaderFactory.java      |  2 +-
 .../org/eclipse/cdt/internal/core/Cygwin.java |  6 +-
 .../org/eclipse/cdt/internal/core/MinGW.java  | 16 ++---
 .../utils/org/eclipse/cdt/utils/CygPath.java  |  2 +-
 .../cdt/utils/DefaultCygwinToolFactory.java   |  2 +-
 .../cdt/utils/DefaultGnuToolFactory.java      |  8 +--
 .../utils/coff/parser/PEBinaryArchive64.java  |  4 +-
 .../utils/coff/parser/PEBinaryObject64.java   |  8 +--
 .../cdt/utils/coff/parser/PEParser64.java     |  2 +-
 .../cdt/utils/debug/dwarf/DwarfReader.java    |  2 +-
 .../utils/elf/parser/ElfBinaryArchive.java    |  4 +-
 .../cdt/utils/elf/parser/ElfBinaryObject.java |  4 +-
 .../cdt/utils/elf/parser/ElfParser.java       |  6 +-
 .../macho/parser/MachOBinaryArchive64.java    |  4 +-
 .../macho/parser/MachOBinaryObject64.java     |  6 +-
 .../cdt/utils/macho/parser/MachOParser64.java |  4 +-
 .../utils/som/parser/SOMBinaryArchive.java    |  4 +-
 .../cdt/utils/som/parser/SOMBinaryObject.java |  4 +-
 .../cdt/utils/som/parser/SOMParser.java       |  2 +-
 .../cdt/utils/xcoff/parser/XCOFF32Parser.java |  2 +-
 .../xcoff/parser/XCOFFBinaryArchive.java      |  4 +-
 .../utils/xcoff/parser/XCOFFBinaryObject.java |  4 +-
 .../ui/tests/DOMAST/ShowInDOMViewAction.java  |  6 +-
 .../tests/templateengine/TestProcesses.java   |  2 +-
 .../CallHierarchyAcrossProjectsTest.java      |  4 +-
 .../BasicIncludeBrowserTest.java              |  4 +-
 .../refactoring/RefactoringTestBase.java      |  2 +-
 .../includes/IncludesTestBase.java            |  2 +-
 .../cdt/ui/tests/search/SearchTestBase.java   |  3 +-
 .../selection/BaseSelectionTestsIndexer.java  |  4 +-
 .../selection/CPPSelectionIndexerTests.java   |  2 +-
 .../selection/CPPSelectionNoIndexerTests.java |  6 +-
 .../selection/CSelectionNoIndexerTests.java   |  8 +--
 .../TypeHierarchyAcrossProjectsTest.java      |  4 +-
 .../SettingsImportExportTest.java             |  2 +-
 .../codemanipulation/InclusionContext.java    |  6 +-
 .../template/c/FileTemplateContext.java       |  2 +-
 .../cdt/internal/corext/util/Resources.java   |  2 +-
 .../ui/buildconsole/BuildConsoleManager.java  |  2 +-
 .../GlobalBuildConsoleManager.java            |  2 +-
 .../eclipse/cdt/internal/ui/cview/CView.java  |  2 +-
 .../cdt/internal/ui/cview/CopyAction.java     |  2 +-
 .../cpaths/CPElementLabelProvider.java        | 12 ++--
 .../cpaths/CPathIncludeSymbolEntryPage.java   |  2 +-
 .../CPathIncludeSymbolEntryPerFilePage.java   |  2 +-
 .../dialogs/cpaths/CPathLibraryEntryPage.java |  2 +-
 .../dialogs/cpaths/SourceAttachmentBlock.java |  6 +-
 .../ui/dnd/FileTransferDragAdapter.java       |  2 +-
 .../internal/ui/editor/AddIncludeAction.java  |  2 +-
 .../ui/editor/CElementIncludeResolver.java    |  4 +-
 .../ui/editor/OrganizeIncludesAction.java     |  4 +-
 .../includebrowser/IBDragSourceListener.java  |  2 +-
 .../CNavigatorDragAdapterAssistant.java       |  2 +-
 .../preferences/BuildLogPreferencePage.java   |  2 +-
 .../GlobalBuildLogPreferencePage.java         |  2 +-
 .../refactoring/changes/CreateFileChange.java |  2 +-
 .../refactoring/changes/DeleteFileChange.java |  2 +-
 .../hidemethod/HideMethodRefactoring.java     |  4 +-
 .../refactoring/includes/IncludeCreator.java  |  2 +-
 .../ui/refactoring/includes/IncludeUtil.java  |  2 +-
 .../includes/InclusionRequest.java            |  4 +-
 .../togglefunction/ToggleFileCreator.java     |  2 +-
 .../refactoring/utils/DefinitionFinder.java   | 10 +--
 .../ui/refactoring/utils/NamespaceHelper.java |  2 +-
 .../cdt/internal/ui/search/CSearchQuery.java  |  2 +-
 .../cdt/internal/ui/search/CSearchResult.java |  4 +-
 .../search/actions/SelectionParseAction.java  |  2 +-
 .../ui/util/ExternalEditorInputFactory.java   |  2 +-
 .../ui/viewsupport/BasicElementLabels.java    |  2 +-
 .../wizards/dialogfields/LinkToFileGroup.java |  2 +-
 .../eclipse/cdt/ui/newui/AbstractPage.java    |  2 +-
 .../eclipse/cdt/ui/newui/CLocationTab.java    |  2 +-
 .../cdt/ui/newui/StructureTreeTab.java        |  2 +-
 .../cdt/ui/wizards/NewCProjectWizardPage.java |  2 +-
 .../templateengine/ProjectSelectionPage.java  |  2 +-
 .../launching/RemoteRunLaunchDelegate.java    |  2 +-
 .../application/tests/StandaloneTest.java     |  2 +-
 .../application/tests/StandaloneTest1.java    |  7 +-
 .../eclipse/cdt/debug/core/CDebugUtils.java   |  4 +-
 .../debug/core/executables/Executable.java    |  4 +-
 .../sourcelookup/CProjectSourceContainer.java |  2 +-
 .../core/DebugStringVariableSubstitutor.java  |  2 +-
 .../core/breakpoints/BreakpointProblems.java  |  2 +-
 .../StandardSourceFilesProvider.java          |  2 +-
 .../CDirectorySourceLocation.java             | 14 ++--
 .../sourcelookup/CProjectSourceLocation.java  |  2 +-
 .../core/sourcelookup/CSourceLocator.java     |  2 +-
 .../sourcelookup/MapEntrySourceContainer.java |  2 +-
 .../MapEntrySourceContainerType.java          |  2 +-
 .../core/sourcelookup/SourceUtils.java        |  2 +-
 .../internal/ui/CDebugModelPresentation.java  |  2 +-
 .../cdt/debug/internal/ui/CDebugUIUtils.java  | 10 +--
 .../ui/DebugMarkerAnnotationModelFactory.java |  2 +-
 .../breakpoints/CBreakpointPropertyPage.java  |  2 +-
 .../ui/propertypages/ModulePropertyPage.java  |  6 +-
 .../sourcelookup/CSourceNotFoundEditor.java   |  4 +-
 .../MappingSourceContainerDialog.java         |  4 +-
 .../ExecutablesContentProvider.java           |  2 +-
 .../ExecutablesViewerComparator.java          |  2 +-
 .../executables/SourceFilesLabelProvider.java |  4 +-
 .../views/executables/SourceFilesViewer.java  |  4 +-
 .../ui/views/modules/ModuleDetailPane.java    |  2 +-
 .../AbstractToggleBreakpointAdapter.java      |  2 +-
 .../ImportExecutablePageOne.java              |  2 +-
 .../ui/commands/GdbConnectCommand.java        |  2 +-
 .../ui/console/GdbCliConsoleManager.java      |  2 +-
 .../ui/launching/SolibSearchPathBlock.java    |  4 +-
 .../CoreBuildLocalDebugLaunchDelegate.java    |  2 +-
 .../gdb/internal/launching/FlatpakLaunch.java |  2 +-
 .../cdt/dsf/gdb/launching/GdbLaunch.java      |  4 +-
 .../dsf/gdb/launching/GdbLaunchDelegate.java  |  2 +-
 .../launching/GdbSourceLookupDirector.java    |  2 +-
 .../cdt/dsf/gdb/launching/LaunchUtils.java    |  6 +-
 .../cdt/dsf/gdb/service/GDBBackend.java       |  2 +-
 .../cdt/dsf/gdb/service/GDBBackend_7_12.java  |  2 +-
 .../cdt/dsf/gdb/service/GDBProcesses_7_0.java |  4 +-
 .../mi/service/MIBreakpointsSynchronizer.java |  4 +-
 .../tests/dsf/gdb/tests/SourceLookupTest.java |  2 +-
 .../tests/nonstop/MultiProcessRemoteTest.java |  2 +-
 .../internal/ui/actions/ResumeAtLine.java     |  4 +-
 .../debug/internal/ui/actions/RunToLine.java  |  4 +-
 .../ui/disassembly/AddressRulerColumn.java    |  2 +-
 .../disassembly/util/StorageEditorInput.java  |  2 +-
 .../AbstractDisassemblyBreakpointsTarget.java |  4 +-
 .../sourcelookup/DsfSourceDisplayAdapter.java |  2 +-
 .../jsoncdb/arm/SystemIncludePathTest.java    |  2 +-
 .../core/internal/IncludeFile_GCCTest.java    |  4 +-
 .../internal/IncludePath_C_POSIXTest.java     | 12 ++--
 .../core/internal/MacrosFile_GCCTest.java     |  4 +-
 .../internal/SystemIncludePath_C_Test.java    |  6 +-
 .../cdt/jsoncdb/core/participant/Arglets.java |  2 +-
 .../core/participant/ResponseFileArglets.java |  2 +-
 .../nvidia/NvccSystemIncludePathTest.java     |  2 +-
 .../core/GDBJtagDSFFinalLaunchSequence.java   |  6 +-
 .../debug/gdbjtag/ui/GDBJtagStartupTab.java   |  2 +-
 .../ContainerCommandLauncherFactory.java      |  2 +-
 .../ContainerLaunchConfigurationDelegate.java |  4 +-
 .../FlatpakCommandLauncherFactory.java        | 16 ++---
 .../cdt/launch/AbstractCLaunchDelegate.java   | 10 +--
 .../cdt/launch/AbstractCLaunchDelegate2.java  |  8 +--
 .../org/eclipse/cdt/launch/LaunchUtils.java   |  4 +-
 .../internal/LocalRunLaunchDelegate.java      |  2 +-
 .../refactoring/ProjectRenameChange.java      |  2 +-
 .../internal/ui/WorkingDirectoryBlock.java    |  2 +-
 .../cdt/launch/ui/CAbstractMainTab.java       |  2 +-
 .../org/eclipse/cdt/launch/ui/CMainTab2.java  |  2 +-
 .../eclipse/cdt/launch/ui/CommonTabLite.java  |  6 +-
 .../ui/LlvmEnvironmentVariableSupplier.java   |  2 +-
 .../llvm/util/LlvmToolOptionPathUtil.java     |  2 +-
 .../remote/internal/core/RemotePath.java      |  2 +-
 .../services/local/LocalProcessService.java   |  2 +-
 .../local/launcher/LocalLauncherDelegate.java |  6 +-
 .../process/ProcessSettingsPage.java          |  2 +-
 .../showin/ExternalExecutablesDialog.java     |  4 +-
 .../view/ui/preferences/PreferencePage.java   | 22 +++---
 .../tests/MSVCBuildCommandParserTests.java    |  4 +-
 242 files changed, 563 insertions(+), 565 deletions(-)

diff --git a/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/AutotoolsNewMakeGenerator.java b/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/AutotoolsNewMakeGenerator.java
index 296fbfdf69..4d7b700041 100644
--- a/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/AutotoolsNewMakeGenerator.java
+++ b/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/AutotoolsNewMakeGenerator.java
@@ -563,7 +563,7 @@ public class AutotoolsNewMakeGenerator extends MarkerGenerator {
 			else if (makefileCvsExists()) {
 				String[] makeargs = new String[1];
 				IPath makeCmd = builder.getBuildCommand();
-				makeargs[0] = "-f" + getMakefileCVSPath().toOSString(); //$NON-NLS-1$
+				makeargs[0] = "-f" + getMakefileCVSPath().toString(); //$NON-NLS-1$
 				rc = runCommand(runInCfgLauncher ? configureLauncher : localCommandLauncher, makeCmd,
 						getProjectLocation().append(buildDir), makeargs,
 						AutotoolsPlugin.getFormattedString("MakeGenerator.makefile.cvs", new String[] { buildDir }), //$NON-NLS-1$
@@ -1323,7 +1323,7 @@ public class AutotoolsNewMakeGenerator extends MarkerGenerator {
 		targetElem.setAttribute(TARGET_ATTR_PATH, target.getContainer().getProjectRelativePath().toString());
 		ICStorageElement elem = targetElem.createChild(TARGET_COMMAND);
 		elem.setValue(
-				target.getBuildAttribute(IMakeCommonBuildInfo.BUILD_COMMAND, builder.getBuildCommand().toOSString()));
+				target.getBuildAttribute(IMakeCommonBuildInfo.BUILD_COMMAND, builder.getBuildCommand().toString()));
 
 		String targetAttr = target.getBuildAttribute(IMakeCommonBuildInfo.BUILD_ARGUMENTS, null);
 		if (targetAttr != null) {
diff --git a/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/MarkerGenerator.java b/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/MarkerGenerator.java
index 67d36217f7..7a9d8f7e89 100644
--- a/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/MarkerGenerator.java
+++ b/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/MarkerGenerator.java
@@ -129,7 +129,7 @@ public abstract class MarkerGenerator {
 				marker.setAttribute(IAutotoolsMarker.MARKER_VARIABLE, info.variableName);
 			}
 			if (info.externalPath != null) {
-				marker.setAttribute(IAutotoolsMarker.MARKER_EXTERNAL_LOCATION, info.externalPath.toOSString());
+				marker.setAttribute(IAutotoolsMarker.MARKER_EXTERNAL_LOCATION, info.externalPath.toString());
 			}
 
 			// Add all other client defined attributes.
diff --git a/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/PkgconfigErrorResolution.java b/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/PkgconfigErrorResolution.java
index 624b401a1d..2f3027cea5 100644
--- a/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/PkgconfigErrorResolution.java
+++ b/build/org.eclipse.cdt.autotools.core/src/org/eclipse/cdt/internal/autotools/core/PkgconfigErrorResolution.java
@@ -93,7 +93,7 @@ public class PkgconfigErrorResolution implements IMarkerResolution {
 				"--queryformat", //$NON-NLS-1$
 				"%{NAME}", //$NON-NLS-1$
 				"--whatprovides", //$NON-NLS-1$
-				pkgconfigPath.toOSString() };
+				pkgconfigPath.toString() };
 		try {
 			// Use CDT launcher to run rpm to query the package that provides
 			// the pkgconfig .pc file for the package in question.
diff --git a/build/org.eclipse.cdt.autotools.tests/src/org/eclipse/cdt/autotools/tests/ProjectTools.java b/build/org.eclipse.cdt.autotools.tests/src/org/eclipse/cdt/autotools/tests/ProjectTools.java
index 32dbeec92d..8738517d7e 100644
--- a/build/org.eclipse.cdt.autotools.tests/src/org/eclipse/cdt/autotools/tests/ProjectTools.java
+++ b/build/org.eclipse.cdt.autotools.tests/src/org/eclipse/cdt/autotools/tests/ProjectTools.java
@@ -150,9 +150,9 @@ public class ProjectTools {
 		// if the path points to an actual object, use its resource to get its location
 		// which will handle any linked directories
 		if (project.findMember(filePath) != null)
-			args[1] = project.findMember(filePath).getLocation().toOSString();
+			args[1] = project.findMember(filePath).getLocation().toString();
 		else // otherwise, just append to project location
-			args[1] = project.getLocation().append(filePath).toOSString();
+			args[1] = project.getLocation().append(filePath).toString();
 		try {
 			Process proc = launcher.execute(commandPath, args, new String[0], runPath, new NullProgressMonitor());
 			if (proc != null) {
diff --git a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/SetConfigurationParameterTest.java b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/SetConfigurationParameterTest.java
index 2cc4a0af76..edbef116ca 100644
--- a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/SetConfigurationParameterTest.java
+++ b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/SetConfigurationParameterTest.java
@@ -105,7 +105,7 @@ public class SetConfigurationParameterTest extends AbstractTest {
 		assertNotNull(project);
 		IPath path = project.getLocation();
 		path = path.append(".autotools");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		assertTrue(f.exists());
 
 		DocumentBuilder db = XmlProcessorFactoryCdt.createDocumentBuilderWithErrorOnDOCTYPE();
@@ -155,9 +155,9 @@ public class SetConfigurationParameterTest extends AbstractTest {
 		IProject project = root.getProject(projectName);
 		assertNotNull(project);
 		IPath path = project.getLocation();
-		File f = new File(path.append("src/a.out").toOSString());
+		File f = new File(path.append("src/a.out").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		assertTrue(f.exists());
 
 		try (BufferedReader r = new BufferedReader(new FileReader(f))) {
@@ -202,13 +202,13 @@ public class SetConfigurationParameterTest extends AbstractTest {
 		// sleep a bit and look for it...give up after 120 seconds
 		for (int i = 0; i < 240; ++i) {
 			bot.sleep(500);
-			f = new File(path.append("src/a.out").toOSString());
+			f = new File(path.append("src/a.out").toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		assertTrue(f.exists());
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		assertTrue(f.exists());
 		long newDate = f.lastModified();
 		assertEquals(newDate, oldDate);
@@ -278,13 +278,13 @@ public class SetConfigurationParameterTest extends AbstractTest {
 		File f = null;
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.append("build-debug/src/a.out").toOSString());
+			f = new File(path.append("build-debug/src/a.out").toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		assertTrue(f.exists());
-		f = new File(path.append("build-debug/config.status").toOSString());
+		f = new File(path.append("build-debug/config.status").toString());
 		assertTrue(f.exists());
 		try (BufferedReader r = new BufferedReader(new FileReader(f))) {
 			int ch;
@@ -314,10 +314,10 @@ public class SetConfigurationParameterTest extends AbstractTest {
 		// Verify we cleaned out the top-level build directory (i.e. that there
 		// is no config.status there anymore).
 		path = project.getLocation().append("config.status");
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(!f.exists());
 		path = project.getLocation().append(".autotools");
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
 		DocumentBuilder db = XmlProcessorFactoryCdt.createDocumentBuilderWithErrorOnDOCTYPE();
 		Document d = db.parse(f);
diff --git a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestEnvironmentVars.java b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestEnvironmentVars.java
index d5dca2a894..8a54cca9c8 100644
--- a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestEnvironmentVars.java
+++ b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestEnvironmentVars.java
@@ -60,7 +60,7 @@ public class TestEnvironmentVars extends AbstractTest {
 		// sleep a bit and look for it...give up after 40 seconds
 		for (int i = 0; i < 80; ++i) {
 			bot.sleep(500);
-			f = new File(path.append("config.status").toOSString());
+			f = new File(path.append("config.status").toString());
 			if (f.exists()) {
 				break;
 			}
@@ -104,7 +104,7 @@ public class TestEnvironmentVars extends AbstractTest {
 		// sleep a bit and look for it...give up after 40 seconds
 		for (int i = 0; i < 80; ++i) {
 			bot.sleep(500);
-			f = new File(path.append("config.status").toOSString());
+			f = new File(path.append("config.status").toString());
 			if (f.exists()) {
 				break;
 			}
@@ -124,7 +124,7 @@ public class TestEnvironmentVars extends AbstractTest {
 		IPath path = checkProject().getLocation();
 		// Create a fake configure script which prints out the values of
 		// envvars some_var1, some_var2, and some_var3
-		File f = new File(path.append("fake_configure").toOSString());
+		File f = new File(path.append("fake_configure").toString());
 		try (BufferedWriter w = new BufferedWriter(new FileWriter(f))) {
 			w.append("echo VAR1 is ${some_var1}");
 			w.newLine();
diff --git a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestMakeTargets.java b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestMakeTargets.java
index bb89f85a90..3fcf566c51 100644
--- a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestMakeTargets.java
+++ b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestMakeTargets.java
@@ -56,9 +56,9 @@ public class TestMakeTargets extends AbstractTest {
 		assertNotNull(project);
 		IPath path = project.getLocation();
 		path = path.append("config.status");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		assertTrue(f.exists());
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
 
 		projectExplorer.bot().tree().getTreeItem(projectName).select();
diff --git a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java
index 66e67582be..e0249f5fc6 100644
--- a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java
+++ b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java
@@ -60,7 +60,7 @@ public class TestToolActions extends AbstractTest {
 		IPath path = checkProject().getLocation();
 		// Verify configure does not exist initially
 		path = path.append("aclocal.m4");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -77,7 +77,7 @@ public class TestToolActions extends AbstractTest {
 				Pattern.DOTALL);
 		bot.waitUntil(consoleTextMatches(consoleView, p));
 		// Verify we still don't have an aclocal.m4 file yet
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertFalse(f.exists());
 		// Now lets run aclocal for our hello world project which hasn't had any
 		// autotool files generated yet.
@@ -93,7 +93,7 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
+			f = new File(path.toString());
 			if (f.exists()) {
 				break;
 			}
@@ -108,7 +108,7 @@ public class TestToolActions extends AbstractTest {
 		IPath path = checkProject().getLocation();
 		// Verify configure does not exist initially
 		path = path.append("configure");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -122,13 +122,13 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
+			f = new File(path.toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		// Verify we now have a configure script
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
 		// Now lets delete the configure file and run autoconf from the project
 		// explorer menu directly from the configure.ac file.
@@ -144,13 +144,13 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
+			f = new File(path.toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		// Verify we now have a configure script again
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
 
 		exitProjectFolder();
@@ -163,11 +163,11 @@ public class TestToolActions extends AbstractTest {
 		// Verify configure does not exist initially
 		IPath path2 = path.append("src/Makefile.in");
 		path = path.append("Makefile.in");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		File f2 = new File(path2.toOSString());
+		File f2 = new File(path2.toString());
 		if (f2.exists()) {
 			f2.delete();
 		}
@@ -183,9 +183,9 @@ public class TestToolActions extends AbstractTest {
 				Pattern.DOTALL);
 		bot.waitUntil(consoleTextMatches(consoleView, p));
 		// Verify we still don't have Makefile.in files yet
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(!f.exists());
-		f2 = new File(path2.toOSString());
+		f2 = new File(path2.toString());
 		assertTrue(!f2.exists());
 		// Now lets run automake for our hello world project which hasn't had
 		// any
@@ -207,17 +207,17 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
-			f2 = new File(path2.toOSString());
+			f = new File(path.toString());
+			f2 = new File(path2.toString());
 			if (f.exists() && f2.exists()) {
 				break;
 			}
 		}
 		assertTrue(f.exists() && f2.exists());
 		// Verify we now have Makefile.in files created
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
-		f2 = new File(path2.toOSString());
+		f2 = new File(path2.toString());
 		assertTrue(f2.exists());
 	}
 
@@ -260,23 +260,23 @@ public class TestToolActions extends AbstractTest {
 	public void t7canAccessAutoreconf() throws Exception {
 		IPath path = checkProject().getLocation();
 		// Remove a number of generated files
-		File f = new File(path.append("src/Makefile.in").toOSString());
+		File f = new File(path.append("src/Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("Makefile.in").toOSString());
+		f = new File(path.append("Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("configure").toOSString());
+		f = new File(path.append("configure").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.sub").toOSString());
+		f = new File(path.append("config.sub").toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -304,12 +304,12 @@ public class TestToolActions extends AbstractTest {
 		// Verify a number of generated files now exist
 		String[] fileList = { "Makefile.in", "src/Makefile.in", "configure", "config.sub" };
 		for (String name : fileList) {
-			f = new File(path.append(name).toOSString());
+			f = new File(path.append(name).toString());
 			assertTrue("Missing: " + name, f.exists());
 		}
 
 		String name = "config.status";
-		f = new File(path.append(name).toOSString());
+		f = new File(path.append(name).toString());
 		assertTrue("Mistakenly found: " + name, !f.exists()); // shouldn't have run configure
 	}
 
@@ -317,23 +317,23 @@ public class TestToolActions extends AbstractTest {
 	public void t8canReconfigureProject() {
 		IPath path = checkProject().getLocation();
 		// Remove a number of generated files
-		File f = new File(path.append("src/Makefile.in").toOSString());
+		File f = new File(path.append("src/Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("Makefile.in").toOSString());
+		f = new File(path.append("Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("configure").toOSString());
+		f = new File(path.append("configure").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.sub").toOSString());
+		f = new File(path.append("config.sub").toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -342,22 +342,22 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 40 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.append("config.status").toOSString());
+			f = new File(path.append("config.status").toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		assertTrue(f.exists());
 		// Verify a number of generated files now exist
-		f = new File(path.append("src/Makefile.in").toOSString());
+		f = new File(path.append("src/Makefile.in").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("Makefile.in").toOSString());
+		f = new File(path.append("Makefile.in").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("configure").toOSString());
+		f = new File(path.append("configure").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("config.sub").toOSString());
+		f = new File(path.append("config.sub").toString());
 		assertTrue(f.exists());
 	}
 
diff --git a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AutomakeDocumentProvider.java b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AutomakeDocumentProvider.java
index 1b693072f5..e874861d06 100644
--- a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AutomakeDocumentProvider.java
+++ b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/AutomakeDocumentProvider.java
@@ -46,7 +46,7 @@ public class AutomakeDocumentProvider extends TextFileDocumentProvider implement
 		if (element instanceof IFileEditorInput) {
 			IFileEditorInput input = (IFileEditorInput) element;
 			if (input.getFile().exists())
-				original = createMakefile(input.getFile().getLocation().toOSString());
+				original = createMakefile(input.getFile().getLocation().toString());
 		} else if (element instanceof IURIEditorInput) {
 			IURIEditorInput input = (IURIEditorInput) element;
 			original = createMakefile(input.getURI().getPath().toString());
diff --git a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExternalEditorInputFactory.java b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExternalEditorInputFactory.java
index 694b59ba74..33e5d509f7 100644
--- a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExternalEditorInputFactory.java
+++ b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/ExternalEditorInputFactory.java
@@ -74,7 +74,7 @@ public class ExternalEditorInputFactory implements IElementFactory {
 	static void saveState(IMemento memento, ExternalEditorInput input) {
 		IPath location = input.getPath(input);
 		if (location != null) {
-			memento.putString(TAG_PATH, location.toOSString());
+			memento.putString(TAG_PATH, location.toString());
 		}
 		IProject project = null;
 		ITranslationUnit unit = input.getTranslationUnit();
diff --git a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/OpenIncludeAction.java b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/OpenIncludeAction.java
index c7e8e1604d..74c14dbc27 100644
--- a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/OpenIncludeAction.java
+++ b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/editors/automake/OpenIncludeAction.java
@@ -110,7 +110,7 @@ public class OpenIncludeAction extends Action {
 							// search in current directory
 							IPath location = include.getTranslationUnit().getLocation();
 							if (location != null) {
-								String currentDir = location.removeLastSegments(1).toOSString();
+								String currentDir = location.removeLastSegments(1).toString();
 								findFile(new String[] { currentDir }, includeName, filesFound);
 							}
 							if (filesFound.isEmpty()) {
@@ -231,7 +231,7 @@ public class OpenIncludeAction extends Action {
 				int numSegToRemove = rPath.segmentCount() - name.segmentCount();
 				IPath sPath = rPath.removeFirstSegments(numSegToRemove);
 				sPath = sPath.setDevice(name.getDevice());
-				if (Platform.getOS().equals(Platform.OS_WIN32) ? sPath.toOSString().equalsIgnoreCase(name.toOSString())
+				if (Platform.getOS().equals(Platform.OS_WIN32) ? sPath.toString().equalsIgnoreCase(name.toString())
 						: sPath.equals(name)) {
 					list.add(rPath);
 				}
diff --git a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeCorePlugin.java b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeCorePlugin.java
index 26ffe7a00a..c8a37ad866 100644
--- a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeCorePlugin.java
+++ b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/core/MakeCorePlugin.java
@@ -199,7 +199,7 @@ public class MakeCorePlugin extends Plugin {
 		if (isGnuStyle) {
 			GNUMakefile gnu = new GNUMakefile();
 			ArrayList<String> includeList = new ArrayList<>();
-			includeList.add(new Path(file.getAbsolutePath()).removeLastSegments(1).toOSString());
+			includeList.add(new Path(file.getAbsolutePath()).removeLastSegments(1).toString());
 			includeList.addAll(Arrays.asList(gnu.getIncludeDirectories()));
 			includeList.addAll(Arrays.asList(makefileDirs));
 			String[] includes = includeList.toArray(new String[includeList.size()]);
diff --git a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/MakeRecon.java b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/MakeRecon.java
index 47cd129738..eb24df643f 100644
--- a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/MakeRecon.java
+++ b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/MakeRecon.java
@@ -82,7 +82,7 @@ public class MakeRecon extends OutputStream {
 	private void invokeMakeRecon() {
 		int i = 0;
 		String[] array = new String[args.length + 1];
-		array[0] = make.toOSString();
+		array[0] = make.toString();
 		System.arraycopy(args, 0, array, 1, args.length);
 		Process p;
 		try {
diff --git a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCScannerInfoConsoleParser.java b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCScannerInfoConsoleParser.java
index ee008d9357..51d67a3eef 100644
--- a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCScannerInfoConsoleParser.java
+++ b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/gnu/GCCScannerInfoConsoleParser.java
@@ -157,7 +157,7 @@ public class GCCScannerInfoConsoleParser extends AbstractGCCBOPConsoleParser {
 		}
 
 		if (fileName != null && fileName.startsWith("/cygdrive/")) { //$NON-NLS-1$
-			fileName = AbstractGCCBOPConsoleParserUtility.convertCygpath(new Path(fileName)).toOSString();
+			fileName = AbstractGCCBOPConsoleParserUtility.convertCygpath(new Path(fileName)).toString();
 		}
 		if (fileName == null || fileName.trim().length() == 0) {
 			return false; // return when no file was given (analogous to GCCPerFileBOPConsoleParser)
diff --git a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CCommandDSC.java b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CCommandDSC.java
index 6270731096..94f9d6a527 100644
--- a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CCommandDSC.java
+++ b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CCommandDSC.java
@@ -85,7 +85,7 @@ public class CCommandDSC {
 				|| option.getKey().equals(SCDOptionsEnum.IQUOTE.toString()))) {
 			String value = option.getValue();
 			value = CygpathTranslator.translateIncludePaths(project, Collections.singletonList(value)).get(0);
-			value = SafeStringInterner.safeIntern(makeRelative(project, new Path(value)).toOSString());
+			value = SafeStringInterner.safeIntern(makeRelative(project, new Path(value)).toString());
 			option = new KVStringPair(option.getKey(), value);
 		}
 		compilerCommand.add(option);
@@ -413,7 +413,7 @@ public class CCommandDSC {
 		List<String> list = new ArrayList<>(paths.size());
 		for (Iterator<String> iter = paths.iterator(); iter.hasNext();) {
 			String path = iter.next();
-			path = makeRelative(project, new Path(path)).toOSString();
+			path = makeRelative(project, new Path(path)).toString();
 			list.add(SafeStringInterner.safeIntern(path));
 		}
 		return list;
@@ -430,10 +430,10 @@ public class CCommandDSC {
 			if (res != null) {
 				ppath = res.getLocation();
 				if (ppath != null) {
-					path = ppath.toOSString();
+					path = ppath.toString();
 				}
 			}
-			//			path = new File(project.getLocation().toOSString(), path).getAbsolutePath();
+			//			path = new File(project.getLocation().toString(), path).getAbsolutePath();
 		}
 		return SafeStringInterner.safeIntern(path);
 	}
diff --git a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CygpathTranslator.java b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CygpathTranslator.java
index 4ece541085..38bde97d79 100644
--- a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CygpathTranslator.java
+++ b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig/util/CygpathTranslator.java
@@ -141,7 +141,7 @@ public class CygpathTranslator {
 						String drive = realPath.segment(1);
 						if (drive.length() == 1) {
 							translatedPath = realPath.removeFirstSegments(2).makeAbsolute()
-									.setDevice(drive.toUpperCase() + ':').toOSString();
+									.setDevice(drive.toUpperCase() + ':').toString();
 						}
 					}
 				}
diff --git a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/DefaultRunSIProvider.java b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/DefaultRunSIProvider.java
index 6bc426ebaf..ac1d8189a9 100644
--- a/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/DefaultRunSIProvider.java
+++ b/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/DefaultRunSIProvider.java
@@ -212,8 +212,8 @@ public class DefaultRunSIProvider implements IExternalScannerInfoProvider {
 		Properties props = initialEnv != null ? initialEnv : launcher.getEnvironment();
 
 		if (fWorkingDirectory != null) {
-			props.put("CWD", fWorkingDirectory.toOSString()); //$NON-NLS-1$
-			props.put("PWD", fWorkingDirectory.toOSString()); //$NON-NLS-1$
+			props.put("CWD", fWorkingDirectory.toString()); //$NON-NLS-1$
+			props.put("PWD", fWorkingDirectory.toString()); //$NON-NLS-1$
 		}
 		// On POSIX (Linux, UNIX) systems reset LANG variable to English with
 		// UTF-8 encoding since GNU compilers can handle only UTF-8 characters.
diff --git a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerFileSCDProfilePage.java b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerFileSCDProfilePage.java
index db3441a3d4..eab175f579 100644
--- a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerFileSCDProfilePage.java
+++ b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerFileSCDProfilePage.java
@@ -137,7 +137,7 @@ public class GCCPerFileSCDProfilePage extends AbstractDiscoveryPage {
 					IPath filePath = new Path(fileName);
 					filterPath = filePath.removeLastSegments(1).makeAbsolute();
 				}
-				dialog.setFilterPath(filterPath.toOSString());
+				dialog.setFilterPath(filterPath.toString());
 				String res = dialog.open();
 				if (res == null) {
 					return;
diff --git a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerProjectSCDProfilePage.java b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerProjectSCDProfilePage.java
index a488728d80..90e946c024 100644
--- a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerProjectSCDProfilePage.java
+++ b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/GCCPerProjectSCDProfilePage.java
@@ -144,7 +144,7 @@ public class GCCPerProjectSCDProfilePage extends AbstractDiscoveryPage {
 					IPath filePath = new Path(fileName);
 					filterPath = filePath.removeLastSegments(1).makeAbsolute();
 				}
-				dialog.setFilterPath(filterPath.toOSString());
+				dialog.setFilterPath(filterPath.toString());
 				String res = dialog.open();
 				if (res == null) {
 					return;
diff --git a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MakeTargetDialog.java b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MakeTargetDialog.java
index a56290670e..db8b984141 100644
--- a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MakeTargetDialog.java
+++ b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/MakeTargetDialog.java
@@ -399,7 +399,7 @@ public class MakeTargetDialog extends Dialog {
 		}
 		targetNameText.selectAll();
 		if (targetBuildCommand != null) {
-			StringBuilder cmd = new StringBuilder(targetBuildCommand.toOSString());
+			StringBuilder cmd = new StringBuilder(targetBuildCommand.toString());
 			if (targetBuildArguments != null && !targetBuildArguments.isEmpty()) {
 				cmd.append(" "); //$NON-NLS-1$
 				cmd.append(targetBuildArguments);
@@ -434,7 +434,7 @@ public class MakeTargetDialog extends Dialog {
 			return true;
 		}
 		if (!isUsingBuilderCommand) {
-			StringBuilder cmd = new StringBuilder(targetBuildCommand.toOSString()).append(targetBuildArguments);
+			StringBuilder cmd = new StringBuilder(targetBuildCommand.toString()).append(targetBuildArguments);
 			if (!getBuildLine().equals(cmd.toString())) {
 				return true;
 			}
diff --git a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/SettingsBlock.java b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/SettingsBlock.java
index 2b6b83ab7d..8bcaa1b22b 100644
--- a/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/SettingsBlock.java
+++ b/build/org.eclipse.cdt.make.ui/src/org/eclipse/cdt/make/ui/dialogs/SettingsBlock.java
@@ -380,7 +380,7 @@ public class SettingsBlock extends AbstractCOptionPage {
 				if (dialog.open() == Window.OK) {
 					Object[] selection = dialog.getResult();
 					if (selection.length > 0) {
-						buildLocation.setText(((IPath) selection[0]).toOSString());
+						buildLocation.setText(((IPath) selection[0]).toString());
 					}
 				}
 			}
@@ -553,7 +553,7 @@ public class SettingsBlock extends AbstractCOptionPage {
 		else
 			stopOnErrorButton.setSelection(false);
 		if (info.getBuildCommand() != null) {
-			StringBuilder cmd = new StringBuilder(info.getBuildCommand().toOSString());
+			StringBuilder cmd = new StringBuilder(info.getBuildCommand().toString());
 			if (!info.isDefaultBuildCmd()) {
 				String args = info.getBuildArguments();
 				if (args != null && !args.isEmpty()) {
diff --git a/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/testplugin/ManagedBuildTestHelper.java b/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/testplugin/ManagedBuildTestHelper.java
index c6df3aa9b1..d11e081bde 100644
--- a/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/testplugin/ManagedBuildTestHelper.java
+++ b/build/org.eclipse.cdt.managedbuilder.core.tests/suite/org/eclipse/cdt/managedbuilder/testplugin/ManagedBuildTestHelper.java
@@ -582,7 +582,7 @@ public class ManagedBuildTestHelper {
 
 					final IWorkspace workspace = ResourcesPlugin.getWorkspace();
 					final IWorkspaceRoot root = workspace.getRoot();
-					final String workspaceLocation = root.getLocation().toOSString();
+					final String workspaceLocation = root.getLocation().toString();
 					final String platformFileSeparator = System.getProperty("file.separator", //$NON-NLS-1$
 							Character.toString(IPath.SEPARATOR));
 
diff --git a/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java b/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java
index c59788f7cf..d9d2fdabd3 100644
--- a/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java
+++ b/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/BuiltinSpecsDetectorTest.java
@@ -867,7 +867,7 @@ public class BuiltinSpecsDetectorTest extends BaseTestCase {
 		IPath folder = ResourceHelper.createWorkspaceFolder(getName());
 
 		// Create test "compiler"
-		java.io.File compiler = new java.io.File(folder.append("compiler").toOSString());
+		java.io.File compiler = new java.io.File(folder.append("compiler").toString());
 		compiler.createNewFile();
 		assertTrue(compiler.exists());
 		String compilerPath = compiler.getAbsolutePath();
@@ -915,13 +915,13 @@ public class BuiltinSpecsDetectorTest extends BaseTestCase {
 
 		// Create test "compiler"
 		IPath compilerLocation = folder.append("compiler");
-		java.io.File compiler = new java.io.File(compilerLocation.toOSString());
+		java.io.File compiler = new java.io.File(compilerLocation.toString());
 		compiler.createNewFile();
 		assertTrue(compiler.exists());
 		// Create symbolic link to the test compiler
 		IPath compilerLinkLocation = folder.append("compilerLink");
 		ResourceHelper.createSymbolicLink(compilerLinkLocation, compilerLocation);
-		java.io.File compilerLink = new java.io.File(compilerLinkLocation.toOSString());
+		java.io.File compilerLink = new java.io.File(compilerLinkLocation.toString());
 		assertTrue(compilerLink.exists());
 		String compilerLinkPath = compilerLink.getAbsolutePath();
 
diff --git a/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/CompilationDatabaseParserTest.java b/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/CompilationDatabaseParserTest.java
index a67532ca43..86d5a59e6b 100644
--- a/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/CompilationDatabaseParserTest.java
+++ b/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/CompilationDatabaseParserTest.java
@@ -137,24 +137,23 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 		CompileCommand command = new CompileCommand();
 		if (haveCommandDir) {
 			if (validCommandDir)
-				command.directory = fSourceFile.getParent().getLocation().toOSString();
+				command.directory = fSourceFile.getParent().getLocation().toString();
 			else
 				command.directory = "foo";
 		}
-		String sourceFilePath = fSourceFile.getLocation().toOSString();
+		String sourceFilePath = fSourceFile.getLocation().toString();
 		if (!useAbsoluteSourcePath) {
-			sourceFilePath = fSourceFile.getLocation().makeRelativeTo(fSourceFile.getParent().getLocation())
-					.toOSString();
+			sourceFilePath = fSourceFile.getLocation().makeRelativeTo(fSourceFile.getParent().getLocation()).toString();
 		}
 		command.file = sourceFilePath;
 		if (haveCommandLine) {
 			if (validCommandLine)
-				command.command = "g++ -I" + fFolder.getLocation().toOSString() + " -DFOO=2 " + sourceFilePath;
+				command.command = "g++ -I" + fFolder.getLocation().toString() + " -DFOO=2 " + sourceFilePath;
 			else
 				command.command = "foo";
 		}
 		if (haveCommandArguments) {
-			command.arguments = new String[] { "g++", "-I" + fFolder.getLocation().toOSString(), "-DFOO=2",
+			command.arguments = new String[] { "g++", "-I" + fFolder.getLocation().toString(), "-DFOO=2",
 					sourceFilePath };
 		}
 
@@ -162,25 +161,25 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 		CompileCommand command2 = new CompileCommand();
 		if (haveCommandDir) {
 			if (validCommandDir)
-				command2.directory = fSourceFile2.getParent().getLocation().toOSString();
+				command2.directory = fSourceFile2.getParent().getLocation().toString();
 			else
 				command2.directory = "foo";
 		}
-		String sourceFilePath2 = fSourceFile2.getLocation().toOSString();
+		String sourceFilePath2 = fSourceFile2.getLocation().toString();
 		if (!useAbsoluteSourcePath) {
 			sourceFilePath2 = fSourceFile2.getLocation().makeRelativeTo(fSourceFile2.getParent().getLocation())
-					.toOSString();
+					.toString();
 		}
 		command2.file = sourceFilePath2;
 		if (haveCommandLine) {
 			if (validCommandLine)
-				command2.command = "g++ -I" + fFolder.getLocation().toOSString() + " -DFOO=3 " + sourceFilePath2;
+				command2.command = "g++ -I" + fFolder.getLocation().toString() + " -DFOO=3 " + sourceFilePath2;
 			else
 				command2.command = "foo";
 		}
 
 		if (haveCommandArguments) {
-			command2.arguments = new String[] { "g++", "-I" + fFolder.getLocation().toOSString(), "-DFOO=3",
+			command2.arguments = new String[] { "g++", "-I" + fFolder.getLocation().toString(), "-DFOO=3",
 					sourceFilePath2 };
 		}
 
@@ -312,7 +311,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -339,7 +338,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -371,7 +370,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 				CDataUtil.isExcluded(tu.getPath(), getConfigurationDescription(fProject, false).getSourceEntries()));
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -402,7 +401,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT + "foo");
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -433,7 +432,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(new Path("/testParseCDB_NonExistantCDB").toOSString());
+		parser.setCompilationDataBasePathProperty(new Path("/testParseCDB_NonExistantCDB").toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -495,7 +494,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getParent().getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getParent().getLocation().toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -525,7 +524,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 		assertTrue(parser.isEmpty());
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
 		parser.setCompilationDataBasePathProperty(new Path("${ProjDirPath}")
-				.append(fCdbFile.getFullPath().makeRelativeTo(cProject.getProject().getFullPath())).toOSString());
+				.append(fCdbFile.getFullPath().makeRelativeTo(cProject.getProject().getFullPath())).toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -554,7 +553,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 				new Path("${WorkspaceDirPath}")
 						.append(fCdbFile.getFullPath()
 								.makeRelativeTo(cProject.getProject().getWorkspace().getRoot().getFullPath()))
-						.toOSString());
+						.toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -580,7 +579,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 				CDataUtil.isExcluded(tu.getPath(), getConfigurationDescription(fProject, false).getSourceEntries()));
 
 		//Make the Json invalid
-		String cdbOsString = fCdbFile.getLocation().toOSString();
+		String cdbOsString = fCdbFile.getLocation().toString();
 		Files.write(Paths.get(cdbOsString), new byte[] { 'f', 'o', 'o' });
 		try (FileReader reader = new FileReader(cdbOsString)) {
 			Gson gson = new Gson();
@@ -596,7 +595,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 				.getExtensionProviderCopy(COMPILATION_DATABASE_PARSER_EXT, true);
 		assertTrue(parser.isEmpty());
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 		parser.setExcludeFiles(true);
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
@@ -628,7 +627,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -655,7 +654,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -696,7 +695,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -737,7 +736,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -765,7 +764,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -793,7 +792,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -816,7 +815,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -839,7 +838,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -864,7 +863,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
@@ -901,7 +900,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser parser = createCompilationDatabaseParser();
 		parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 		addLanguageSettingsProvider(cfgDescription, parser);
@@ -917,11 +916,11 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 		assertFalse(CDataUtil.isExcluded(tu.getPath(), cfgDescription.getSourceEntries()));
 
 		// Modify the CDB, only to contain one file with different macro definition.
-		String sourceFilePath = fSourceFile.getLocation().toOSString();
+		String sourceFilePath = fSourceFile.getLocation().toString();
 		CompileCommand command = new CompileCommand();
-		command.directory = fSourceFile.getParent().getLocation().toOSString();
+		command.directory = fSourceFile.getParent().getLocation().toString();
 		command.file = sourceFilePath;
-		command.command = "g++ -I" + fFolder.getLocation().toOSString() + " -DFOO=200 " + sourceFilePath;
+		command.command = "g++ -I" + fFolder.getLocation().toString() + " -DFOO=200 " + sourceFilePath;
 		CompileCommand[] commands = new CompileCommand[1];
 		commands[0] = command;
 		String json = new Gson().toJson(commands);
@@ -973,7 +972,7 @@ public class CompilationDatabaseParserTest extends BaseTestCase {
 
 		CompilationDatabaseParser config1Parser = createCompilationDatabaseParser();
 		config1Parser.setBuildParserId(GCC_BUILD_COMMAND_PARSER_EXT);
-		config1Parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toOSString());
+		config1Parser.setCompilationDataBasePathProperty(fCdbFile.getLocation().toString());
 
 		ICConfigurationDescription cfgDescription = getConfigurationDescription(fProject, true);
 
diff --git a/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuildCommandParserTest.java b/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuildCommandParserTest.java
index e4b6f892b6..ba3af092c9 100644
--- a/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuildCommandParserTest.java
+++ b/build/org.eclipse.cdt.managedbuilder.core.tests/tests/org/eclipse/cdt/managedbuilder/language/settings/providers/tests/GCCBuildCommandParserTest.java
@@ -1031,7 +1031,7 @@ public class GCCBuildCommandParserTest extends BaseTestCase {
 
 		// parse line
 		parser.startup(cfgDescription, null);
-		parser.processLine("gcc " + "-I/path0 " + "-I. " + '"' + file.getLocation().toOSString() + '"');
+		parser.processLine("gcc " + "-I/path0 " + "-I. " + '"' + file.getLocation().toString() + '"');
 		parser.shutdown();
 
 		// check entries
@@ -1060,7 +1060,7 @@ public class GCCBuildCommandParserTest extends BaseTestCase {
 
 		// parse line
 		parser.startup(null, null);
-		parser.processLine("gcc " + "-I/path0 " + "-I. " + '"' + file.getLocation().toOSString() + '"');
+		parser.processLine("gcc " + "-I/path0 " + "-I. " + '"' + file.getLocation().toString() + '"');
 		parser.shutdown();
 
 		// check entries
@@ -1877,7 +1877,7 @@ public class GCCBuildCommandParserTest extends BaseTestCase {
 
 		// parse line
 		parser.startup(cfgDescription, null);
-		parser.processLine("gcc " + "-I. " + "-Iinclude " + '"' + file.getLocation().toOSString() + '"');
+		parser.processLine("gcc " + "-I. " + "-Iinclude " + '"' + file.getLocation().toString() + '"');
 		parser.shutdown();
 
 		// check populated entries
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildDescription.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildDescription.java
index f65a621e74..9b3291ec5f 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildDescription.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildDescription.java
@@ -1323,7 +1323,7 @@ public class BuildDescription implements IBuildDescription {
 						String inExt = resPath.getFileExtension();
 						String outExt = tool.getOutputExtension(inExt);
 						if (namePattern == null || namePattern.length() == 0) {
-							namePattern = /*outDirPath.toOSString() +*/ outputPrefix
+							namePattern = /*outDirPath.toString() +*/ outputPrefix
 									+ IManagedBuilderMakefileGenerator.WILDCARD;
 							if (outExt != null && outExt.length() > 0) {
 								namePattern += DOT + outExt;
@@ -1337,7 +1337,7 @@ public class BuildDescription implements IBuildDescription {
 							//  If only a file name is specified, add the relative path of this output directory
 							if (namePatternPath.segmentCount() == 1) {
 								namePatternPath = Path
-										.fromOSString(/*outDirPath.toOSString() +*/ namePatternPath.toString());
+										.fromOSString(/*outDirPath.toString() +*/ namePatternPath.toString());
 							}
 						}
 
@@ -1368,7 +1368,7 @@ public class BuildDescription implements IBuildDescription {
 			//     the output extension.
 
 			String outPrefix = tool.getOutputPrefix();
-			IPath outFullPath = Path.fromOSString(outDirPath.toOSString() + outPrefix + WILDCARD);
+			IPath outFullPath = Path.fromOSString(outDirPath.toString() + outPrefix + WILDCARD);
 			IPath outLocation;
 			String inExt = resPath.getFileExtension();
 			String outExt = tool.getOutputExtension(inExt);
@@ -1387,7 +1387,7 @@ public class BuildDescription implements IBuildDescription {
 				IInputType type = action.getInputType();
 				String ext = null;
 				if (type != null) {
-					String location = buildRc.getLocation().toOSString();
+					String location = buildRc.getLocation().toString();
 					for (String srcExt : type.getSourceExtensions(tool)) {
 						if (location.endsWith(srcExt)) {
 							ext = srcExt;
@@ -1446,7 +1446,7 @@ public class BuildDescription implements IBuildDescription {
 		//  Get the input file name
 		String fileName = sourceLocation.removeFileExtension().lastSegment();
 		//  Replace the % with the file name
-		String outName = outPath.toOSString().replaceAll("%", fileName); //$NON-NLS-1$
+		String outName = outPath.toString().replaceAll("%", fileName); //$NON-NLS-1$
 		return Path.fromOSString(outName);
 	}
 
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildStep.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildStep.java
index 08ece5ac4f..51c9e5608f 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildStep.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/BuildStep.java
@@ -501,7 +501,7 @@ public class BuildStep implements IBuildStep {
 		for (int i = 0; i < rcs.length; i++) {
 			IPath path = BuildDescriptionManager.getRelPath(cwd, rcs[i].getLocation());
 			path = rmNamePrefix(path, prefixToRm);
-			list.add(path.toOSString());
+			list.add(path.toString());
 		}
 		return list.toArray(new String[list.size()]);
 	}
@@ -666,7 +666,7 @@ public class BuildStep implements IBuildStep {
 							if (j != 0) {
 								optVal += " "; //$NON-NLS-1$
 							}
-							optVal += BuildDescriptionManager.getRelPath(cwd, bRcs[j].getLocation()).toOSString();
+							optVal += BuildDescriptionManager.getRelPath(cwd, bRcs[j].getLocation()).toString();
 						}
 						ManagedBuildManager.setOption(cfg, fTool, assignToOption, optVal);
 					} else if (optType == IOption.STRING_LIST || optType == IOption.LIBRARIES
@@ -682,7 +682,7 @@ public class BuildStep implements IBuildStep {
 						// to top build directory relative
 						String[] paths = new String[bRcs.length];
 						for (int j = 0; j < bRcs.length; j++) {
-							paths[j] = BuildDescriptionManager.getRelPath(cwd, bRcs[j].getLocation()).toOSString();
+							paths[j] = BuildDescriptionManager.getRelPath(cwd, bRcs[j].getLocation()).toString();
 						}
 						ManagedBuildManager.setOption(cfg, fTool, assignToOption, paths);
 					} else if (optType == IOption.BOOLEAN) {
@@ -694,7 +694,7 @@ public class BuildStep implements IBuildStep {
 					} else if (optType == IOption.ENUMERATED || optType == IOption.TREE) {
 						if (bRcs.length > 0) {
 							ManagedBuildManager.setOption(cfg, fTool, assignToOption,
-									BuildDescriptionManager.getRelPath(cwd, bRcs[0].getLocation()).toOSString());
+									BuildDescriptionManager.getRelPath(cwd, bRcs[0].getLocation()).toString());
 						}
 					}
 				} catch (BuildException ex) {
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/CommandBuilder.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/CommandBuilder.java
index 735dd8bc9a..668c52892b 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/CommandBuilder.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/CommandBuilder.java
@@ -191,7 +191,7 @@ public class CommandBuilder implements IBuildModelBuilder {
 	protected String getCommandLine() {
 		StringBuilder buf = new StringBuilder();
 		if (fCmd != null) {
-			buf.append(fCmd.getCommand().toOSString());
+			buf.append(fCmd.getCommand().toString());
 			String args[] = fCmd.getArgs();
 			for (int i = 0; i < args.length; i++) {
 				buf.append(' ');
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ProcessLauncher.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ProcessLauncher.java
index 7ff8491926..97998f042a 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ProcessLauncher.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/buildmodel/ProcessLauncher.java
@@ -118,7 +118,7 @@ public class ProcessLauncher {
 	 */
 	public ProcessLauncher(IPath _cmd, String[] args, String[] _env, IPath _cwd, OutputStream _out, OutputStream _err,
 			IProgressMonitor _monitor, boolean _show) {
-		cmd = createCmdArray(_cmd.toOSString(), args);
+		cmd = createCmdArray(_cmd.toString(), args);
 		env = _env;
 		cwd = _cwd.toFile();
 		out = _out;
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedBuildInfo.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedBuildInfo.java
index c13311800e..45b4bbe285 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedBuildInfo.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/core/ManagedBuildInfo.java
@@ -1020,7 +1020,7 @@ public class ManagedBuildInfo implements IManagedBuildInfo, IScannerInfo {
 								if (null != optionPathConverter) {
 									IPath platformPath = optionPathConverter.convertToPlatformLocation(paths[i], null,
 											null);
-									paths[i] = platformPath.toOSString();
+									paths[i] = platformPath.toString();
 								}
 							}
 							list.add(checkPath(paths[i]));
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/MbsEnvironmentSupplier.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/MbsEnvironmentSupplier.java
index 31e8eae274..659f4a79c6 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/MbsEnvironmentSupplier.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/envvar/MbsEnvironmentSupplier.java
@@ -65,9 +65,9 @@ public class MbsEnvironmentSupplier implements IEnvironmentVariableSupplier {
 				//
 				//					IPath projectLocation = owner.getLocation();
 				//					IPath workingDirectory = projectLocation.append(topBuildDir);
-				//					String value = workingDirectory.toOSString();
+				//					String value = workingDirectory.toString();
 				if (topBuildDir != null) {
-					variable = new BuildEnvVar(name, topBuildDir.toOSString(), IBuildEnvironmentVariable.ENVVAR_REPLACE,
+					variable = new BuildEnvVar(name, topBuildDir.toString(), IBuildEnvironmentVariable.ENVVAR_REPLACE,
 							null);
 				}
 
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/MbsMacroSupplier.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/MbsMacroSupplier.java
index ae90cf4a41..d90012d844 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/MbsMacroSupplier.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/internal/macros/MbsMacroSupplier.java
@@ -236,7 +236,7 @@ public class MbsMacroSupplier extends BuildCdtVariablesSupplierBase {
 				if (workingDirectory != null) {
 					IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory, inputFileLocation);
 					if (filePath != null)
-						value = filePath.toOSString();
+						value = filePath.toString();
 				}
 			}
 		} else if ("InputDirRelPath".equals(name)) { //$NON-NLS-1$
@@ -246,7 +246,7 @@ public class MbsMacroSupplier extends BuildCdtVariablesSupplierBase {
 					IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory,
 							inputFileLocation.removeLastSegments(1).addTrailingSeparator());
 					if (filePath != null)
-						value = filePath.toOSString();
+						value = filePath.toString();
 				}
 			}
 		} else if ("OutputFileName".equals(name)) { //$NON-NLS-1$
@@ -264,7 +264,7 @@ public class MbsMacroSupplier extends BuildCdtVariablesSupplierBase {
 				if (workingDirectory != null) {
 					IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory, outputFileLocation);
 					if (filePath != null)
-						value = filePath.toOSString();
+						value = filePath.toString();
 				}
 			}
 		} else if ("OutputDirRelPath".equals(name)) { //$NON-NLS-1$
@@ -274,7 +274,7 @@ public class MbsMacroSupplier extends BuildCdtVariablesSupplierBase {
 					IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory,
 							outputFileLocation.removeLastSegments(1).addTrailingSeparator());
 					if (filePath != null)
-						value = filePath.toOSString();
+						value = filePath.toString();
 				}
 			}
 		}
@@ -576,8 +576,7 @@ public class MbsMacroSupplier extends BuildCdtVariablesSupplierBase {
 		if (CdtVariableResolver.VAR_PROJ_NAME.equals(macroName)) {
 			macro = new BuildMacro(macroName, IBuildMacro.VALUE_TEXT, mngProj.getOwner().getName());
 		} else if (CdtVariableResolver.VAR_PROJ_DIR_PATH.equals(macroName)) {
-			macro = new BuildMacro(macroName, IBuildMacro.VALUE_PATH_DIR,
-					mngProj.getOwner().getLocation().toOSString());
+			macro = new BuildMacro(macroName, IBuildMacro.VALUE_PATH_DIR, mngProj.getOwner().getLocation().toString());
 		}
 		return macro;
 	}
@@ -585,7 +584,7 @@ public class MbsMacroSupplier extends BuildCdtVariablesSupplierBase {
 	public IBuildMacro getMacro(String macroName, IWorkspace wsp) {
 		IBuildMacro macro = null;
 		if (CdtVariableResolver.VAR_WORKSPACE_DIR_PATH.equals(macroName)) {
-			macro = new BuildMacro(macroName, IBuildMacro.VALUE_PATH_DIR, wsp.getRoot().getLocation().toOSString());
+			macro = new BuildMacro(macroName, IBuildMacro.VALUE_PATH_DIR, wsp.getRoot().getLocation().toString());
 		} else if (CdtVariableResolver.VAR_DIRECTORY_DELIMITER.equals(macroName)) {
 			if (isWin32()) {
 				macro = new BuildMacro(macroName, IBuildMacro.VALUE_TEXT, "\\"); //$NON-NLS-1$
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuiltinSpecsDetector.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuiltinSpecsDetector.java
index cdac186a77..c800e19f3e 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuiltinSpecsDetector.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/language/settings/providers/AbstractBuiltinSpecsDetector.java
@@ -877,7 +877,7 @@ public abstract class AbstractBuiltinSpecsDetector extends AbstractLanguageSetti
 		IPath workingLocation = ManagedBuilderCorePlugin.getDefault().getStateLocation();
 		IPath fileLocation = workingLocation.append(specFileName);
 
-		specFile = new java.io.File(fileLocation.toOSString());
+		specFile = new java.io.File(fileLocation.toString());
 		// will preserve spec file if it was already there otherwise will delete upon finishing
 		preserveSpecFile = specFile.exists();
 		if (!preserveSpecFile) {
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java
index 94dd491cc1..4df7f0a8f0 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java
@@ -3347,7 +3347,7 @@ public class GnuMakefileGenerator implements IManagedBuilderMakefileGenerator2 {
 		//  Get the input file name
 		String fileName = sourceLocation.removeFileExtension().lastSegment();
 		//  Replace the % with the file name
-		String outName = outPath.toOSString().replaceAll("%", fileName); //$NON-NLS-1$
+		String outName = outPath.toString().replaceAll("%", fileName); //$NON-NLS-1$
 		IPath result = Path.fromOSString(outName);
 		return DOT_SLASH_PATH.isPrefixOf(outPath) ? DOT_SLASH_PATH.append(result) : result;
 	}
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu2/GnuMakefileGenerator.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu2/GnuMakefileGenerator.java
index 327551719c..ce138d8c3f 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu2/GnuMakefileGenerator.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu2/GnuMakefileGenerator.java
@@ -3369,7 +3369,7 @@ public class GnuMakefileGenerator implements IManagedBuilderMakefileGenerator2 {
 		//  Get the input file name
 		String fileName = sourceLocation.removeFileExtension().lastSegment();
 		//  Replace the % with the file name
-		String outName = outPath.toOSString().replaceAll("%", fileName); //$NON-NLS-1$
+		String outName = outPath.toString().replaceAll("%", fileName); //$NON-NLS-1$
 		IPath result = Path.fromOSString(outName);
 		return DOT_SLASH_PATH.isPrefixOf(outPath) ? DOT_SLASH_PATH.append(result) : result;
 	}
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/internal/DefaultIndexerDependencyCalculator.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/internal/DefaultIndexerDependencyCalculator.java
index 6d6289c225..6b1627c4d3 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/internal/DefaultIndexerDependencyCalculator.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/internal/DefaultIndexerDependencyCalculator.java
@@ -30,7 +30,7 @@ public class DefaultIndexerDependencyCalculator implements IManagedDependencyGen
 	public IResource[] findDependencies(IResource resource, IProject project) {
 		//		PathCollector pathCollector = new PathCollector();
 		//		ICSearchScope scope = SearchEngine.createWorkspaceScope();
-		//		CSearchPattern pattern = CSearchPattern.createPattern(resource.getLocation().toOSString(), ICSearchConstants.INCLUDE, ICSearchConstants.REFERENCES, ICSearchConstants.EXACT_MATCH, true);
+		//		CSearchPattern pattern = CSearchPattern.createPattern(resource.getLocation().toString(), ICSearchConstants.INCLUDE, ICSearchConstants.REFERENCES, ICSearchConstants.EXACT_MATCH, true);
 		//		IndexManager indexManager = CCorePlugin.getDefault().getCoreModel().getIndexManager();
 		//		indexManager.performConcurrentJob(
 		//			new PatternSearchJob(
diff --git a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/CreateIncludeFolder.java b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/CreateIncludeFolder.java
index 4d186eb6d4..abf613fda2 100644
--- a/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/CreateIncludeFolder.java
+++ b/build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/templateengine/processes/CreateIncludeFolder.java
@@ -53,7 +53,7 @@ public class CreateIncludeFolder extends CreateSourceFolder {
 		try {
 			IConfiguration[] configs = info.getManagedProject().getConfigurations();
 			for (IConfiguration config : configs) {
-				String path = projectHandle.getFolder(targetPath).getLocation().toOSString();
+				String path = projectHandle.getFolder(targetPath).getLocation().toString();
 				IToolChain toolChain = config.getToolChain();
 				setIncludePathOptionForConfig(path, config, toolChain.getOptions(), toolChain);
 
diff --git a/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java b/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java
index daa4c0404c..37fda4e164 100644
--- a/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java
+++ b/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java
@@ -63,7 +63,7 @@ public class GnuCygwinConfigurationEnvironmentSupplier implements IConfiguration
 					// If the variable is not defined still show it in the environment variables list as a hint to user
 					home = ""; //$NON-NLS-1$
 				}
-				return new BuildEnvVar(Cygwin.ENV_CYGWIN_HOME, new Path(home).toOSString());
+				return new BuildEnvVar(Cygwin.ENV_CYGWIN_HOME, new Path(home).toString());
 			}
 			return null;
 
diff --git a/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/mingw/MingwEnvironmentVariableSupplier.java b/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/mingw/MingwEnvironmentVariableSupplier.java
index 15ead62025..c8b3592b5e 100644
--- a/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/mingw/MingwEnvironmentVariableSupplier.java
+++ b/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/mingw/MingwEnvironmentVariableSupplier.java
@@ -48,7 +48,7 @@ public class MingwEnvironmentVariableSupplier implements IConfigurationEnvironme
 					// If the variable is not defined still show it in the environment variables list as a hint to user
 					minGWHome = ""; //$NON-NLS-1$
 				}
-				return new BuildEnvVar(MinGW.ENV_MINGW_HOME, new Path(minGWHome).toOSString(),
+				return new BuildEnvVar(MinGW.ENV_MINGW_HOME, new Path(minGWHome).toString(),
 						IBuildEnvironmentVariable.ENVVAR_REPLACE);
 			}
 			return null;
@@ -63,7 +63,7 @@ public class MingwEnvironmentVariableSupplier implements IConfigurationEnvironme
 					// If the variable is not defined still show it in the environment variables list as a hint to user
 					msysHome = ""; //$NON-NLS-1$
 				}
-				return new BuildEnvVar(MinGW.ENV_MSYS_HOME, new Path(msysHome).toOSString(),
+				return new BuildEnvVar(MinGW.ENV_MSYS_HOME, new Path(msysHome).toString(),
 						IBuildEnvironmentVariable.ENVVAR_REPLACE);
 			}
 			return null;
diff --git a/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/BuiltinSpecsDetectorOptionPage.java b/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/BuiltinSpecsDetectorOptionPage.java
index c53b1ab99a..c03c819860 100644
--- a/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/BuiltinSpecsDetectorOptionPage.java
+++ b/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/BuiltinSpecsDetectorOptionPage.java
@@ -136,7 +136,7 @@ public final class BuiltinSpecsDetectorOptionPage extends AbstractLanguageSettin
 					fileName = fileName.substring(0, space);
 				}
 				IPath folder = new Path(fileName).removeLastSegments(1);
-				dialog.setFilterPath(folder.toOSString());
+				dialog.setFilterPath(folder.toString());
 				String chosenFile = dialog.open();
 				if (chosenFile != null) {
 					inputCommand.insert(chosenFile);
diff --git a/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/CompilationDatabaseParserOptionPage.java b/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/CompilationDatabaseParserOptionPage.java
index 4063eaaca2..b9fca5e04b 100644
--- a/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/CompilationDatabaseParserOptionPage.java
+++ b/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/internal/ui/language/settings/providers/CompilationDatabaseParserOptionPage.java
@@ -129,7 +129,7 @@ public final class CompilationDatabaseParserOptionPage extends AbstractLanguageS
 				dialog.setText(Messages.CompilationDatabaseParserOptionPage_ChooseFile);
 				String fileName = fCompileCommandsPath.getText();
 				IPath folder = new Path(fileName).removeLastSegments(1);
-				dialog.setFilterPath(folder.toOSString());
+				dialog.setFilterPath(folder.toString());
 				String chosenFile = dialog.open();
 				if (chosenFile != null) {
 					fCompileCommandsPath.setText(chosenFile);
diff --git a/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSWizardHandler.java b/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSWizardHandler.java
index 14fac7f98a..166f4bb740 100644
--- a/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSWizardHandler.java
+++ b/build/org.eclipse.cdt.managedbuilder.ui/src/org/eclipse/cdt/managedbuilder/ui/wizards/MBSWizardHandler.java
@@ -393,7 +393,7 @@ public class MBSWizardHandler extends CWizardHandler {
 		data.put("baseName", getBaseName(projName)); //$NON-NLS-1$
 		data.put("baseNameUpper", getBaseName(projName).toUpperCase()); //$NON-NLS-1$
 		data.put("baseNameLower", getBaseName(projName).toLowerCase()); //$NON-NLS-1$
-		String location = page.getLocationPath().toOSString();
+		String location = page.getLocationPath().toString();
 		if (location == null)
 			location = EMPTY_STR;
 		data.put("location", location); //getProjectLocation().toPortableString()); //$NON-NLS-1$
diff --git a/build/org.eclipse.cdt.meson.ui/src/org/eclipse/cdt/meson/ui/properties/MesonPropertyPage.java b/build/org.eclipse.cdt.meson.ui/src/org/eclipse/cdt/meson/ui/properties/MesonPropertyPage.java
index 9b7faf40ad..82eea7935a 100644
--- a/build/org.eclipse.cdt.meson.ui/src/org/eclipse/cdt/meson/ui/properties/MesonPropertyPage.java
+++ b/build/org.eclipse.cdt.meson.ui/src/org/eclipse/cdt/meson/ui/properties/MesonPropertyPage.java
@@ -88,7 +88,7 @@ public class MesonPropertyPage extends PropertyPage {
 			configName = ((CBuildConfiguration) project.getActiveBuildConfig().getAdapter(ICBuildConfiguration.class))
 					.getName();
 			IPath sourceDir = project.getLocation();
-			String buildDir = project.getLocation().append("build").append(configName).toOSString(); //$NON-NLS-1$
+			String buildDir = project.getLocation().append("build").append(configName).toString(); //$NON-NLS-1$
 			IPath buildPath = new Path(buildDir).append("build.ninja"); //$NON-NLS-1$
 			configured = buildPath.toFile().exists();
 			if (configured) {
@@ -275,7 +275,7 @@ public class MesonPropertyPage extends PropertyPage {
 				String configName = ((CBuildConfiguration) project.getActiveBuildConfig()
 						.getAdapter(ICBuildConfiguration.class)).getName();
 				IPath sourceDir = project.getLocation();
-				String buildDir = project.getLocation().append("build").append(configName).toOSString(); //$NON-NLS-1$
+				String buildDir = project.getLocation().append("build").append(configName).toString(); //$NON-NLS-1$
 				ICommandLauncher launcher = CommandLauncherManager.getInstance()
 						.getCommandLauncher(project.getActiveBuildConfig().getAdapter(ICBuildConfiguration.class));
 				launcher.setProject(project);
diff --git a/cmake/org.eclipse.cdt.cmake.ui/src/org/eclipse/cdt/cmake/internal/ui/properties/CMakePropertyPage.java b/cmake/org.eclipse.cdt.cmake.ui/src/org/eclipse/cdt/cmake/internal/ui/properties/CMakePropertyPage.java
index 7829e864f7..eaee154a39 100644
--- a/cmake/org.eclipse.cdt.cmake.ui/src/org/eclipse/cdt/cmake/internal/ui/properties/CMakePropertyPage.java
+++ b/cmake/org.eclipse.cdt.cmake.ui/src/org/eclipse/cdt/cmake/internal/ui/properties/CMakePropertyPage.java
@@ -131,8 +131,8 @@ public class CMakePropertyPage extends PropertyPage {
 					IProject project = (IProject) getElement();
 					try {
 						String configName = project.getActiveBuildConfig().getName();
-						String sourceDir = project.getLocation().toOSString();
-						String buildDir = project.getLocation().append("build").append(configName).toOSString(); //$NON-NLS-1$
+						String sourceDir = project.getLocation().toString();
+						String buildDir = project.getLocation().append("build").append(configName).toString(); //$NON-NLS-1$
 
 						Runtime.getRuntime().exec(new String[] { "cmake-gui", "-S" + sourceDir, "-B" + buildDir }); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 					} catch (CoreException | IOException e1) {
diff --git a/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/AbstractExternalToolBasedChecker.java b/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/AbstractExternalToolBasedChecker.java
index b34a13f2c6..f306998745 100644
--- a/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/AbstractExternalToolBasedChecker.java
+++ b/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/AbstractExternalToolBasedChecker.java
@@ -147,7 +147,7 @@ public abstract class AbstractExternalToolBasedChecker extends AbstractCheckerWi
 	}
 
 	private void logResourceProcessingFailure(Throwable error, IResource resource) {
-		String location = resource.getLocation().toOSString();
+		String location = resource.getLocation().toString();
 		String msg = String.format("Unable to process resource %s", location); //$NON-NLS-1$
 		Activator.log(msg, error);
 	}
diff --git a/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationParametersProvider.java b/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationParametersProvider.java
index 05003894da..15829c975a 100644
--- a/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationParametersProvider.java
+++ b/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/externaltool/InvocationParametersProvider.java
@@ -35,7 +35,7 @@ public class InvocationParametersProvider implements IInvocationParametersProvid
 	 */
 	@Override
 	public InvocationParameters createParameters(IResource fileToProcess) {
-		String path = fileToProcess.getLocation().toOSString();
+		String path = fileToProcess.getLocation().toString();
 		return new InvocationParameters(fileToProcess, fileToProcess, path, null);
 	}
 }
diff --git a/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractIndexAstChecker.java b/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractIndexAstChecker.java
index 7cb1f00b92..f24189403b 100644
--- a/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractIndexAstChecker.java
+++ b/codan/org.eclipse.cdt.codan.core.cxx/src/org/eclipse/cdt/codan/core/cxx/model/AbstractIndexAstChecker.java
@@ -168,7 +168,7 @@ public abstract class AbstractIndexAstChecker extends AbstractCheckerWithProblem
 			for (IASTComment comm : commentsArray) {
 				IASTFileLocation fileLocation = comm.getFileLocation();
 				if (fileLocation.getStartingLineNumber() == loc.getLineNumber()) {
-					String problemFile = loc.getFile().getLocation().toOSString();
+					String problemFile = loc.getFile().getLocation().toString();
 					String commentFile = fileLocation.getFileName();
 					if (problemFile.equals(commentFile)) {
 						lineComments.add(comm);
diff --git a/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/BasicElementLabels.java b/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/BasicElementLabels.java
index 7fb277e6d2..b00a03e821 100644
--- a/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/BasicElementLabels.java
+++ b/codan/org.eclipse.cdt.codan.ui/src/org/eclipse/cdt/codan/internal/ui/widgets/BasicElementLabels.java
@@ -46,7 +46,7 @@ public class BasicElementLabels {
 	public static String getPathLabel(IPath path, boolean isOSPath) {
 		String label;
 		if (isOSPath) {
-			label = path.toOSString();
+			label = path.toString();
 		} else {
 			label = path.makeRelative().toString();
 		}
diff --git a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserEfsFileMatchingTest.java b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserEfsFileMatchingTest.java
index b235e74b8c..4cd8a35599 100644
--- a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserEfsFileMatchingTest.java
+++ b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserEfsFileMatchingTest.java
@@ -427,7 +427,7 @@ public class ErrorParserEfsFileMatchingTest extends BaseTestCase5 {
 		ResourceHelper.createEfsFolder(fProject, "BuildDir", "null:/BuildDir");
 		ResourceHelper.createEfsFile(fProject, "BuildDir/testBuildDir.c", "null:/BuildDir/testBuildDir.c");
 
-		String buildDir = fProject.getLocation().append("BuildDir").toOSString();
+		String buildDir = fProject.getLocation().append("BuildDir").toString();
 		parseOutput(fProject, buildDir, "testBuildDir.c:1:error");
 		assertEquals(1, errorList.size());
 
diff --git a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserFileMatchingTest.java b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserFileMatchingTest.java
index fe2575cd3b..19c39635a2 100644
--- a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserFileMatchingTest.java
+++ b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/internal/errorparsers/tests/ErrorParserFileMatchingTest.java
@@ -530,7 +530,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 	@Test
 	public void testAbsolutePathSingle() throws Exception {
 		ResourceHelper.createFile(fProject, "testAbsolutePathSingle.c");
-		String fullName = fProject.getLocation().append("testAbsolutePathSingle.c").toOSString();
+		String fullName = fProject.getLocation().append("testAbsolutePathSingle.c").toString();
 
 		parseOutput(fullName + ":1:error");
 		assertEquals(1, errorList.size());
@@ -549,7 +549,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 	public void testAbsolutePathInOtherProject() throws Exception {
 		IProject anotherProject = ResourceHelper.createCDTProject("ProjectAbsolutePathInOtherProject");
 		ResourceHelper.createFile(anotherProject, "testAbsolutePathInOtherProject.c");
-		String fullName = anotherProject.getLocation().append("testAbsolutePathInOtherProject.c").toOSString();
+		String fullName = anotherProject.getLocation().append("testAbsolutePathInOtherProject.c").toString();
 
 		parseOutput(fullName + ":1:error");
 		assertEquals(1, errorList.size());
@@ -572,7 +572,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 		IPath outsideFile = ResourceHelper.createWorkspaceFile("OutsideFolder/testAbsolutePathOutsideWorkspace.c");
 
 		String fullName = ResourcesPlugin.getWorkspace().getRoot().getLocation()
-				.append("OutsideFolder/testAbsolutePathOutsideWorkspace.c").toOSString();
+				.append("OutsideFolder/testAbsolutePathOutsideWorkspace.c").toString();
 
 		parseOutput(fullName + ":1:error");
 		assertEquals(1, errorList.size());
@@ -919,7 +919,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 	@Test
 	public void testCygwinCygdrive() throws Exception {
 		String fileName = "testCygwinCygdrive.c";
-		String windowsFileName = fProject.getLocation().append(fileName).toOSString();
+		String windowsFileName = fProject.getLocation().append(fileName).toString();
 		String cygwinFileName;
 		try {
 			cygwinFileName = Cygwin.windowsToCygwinPath(windowsFileName);
@@ -983,7 +983,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 		String fileName = "testCygwinAnotherProject.c";
 		IProject anotherProject = ResourceHelper.createCDTProject("AnotherProject");
 
-		String windowsFileName = anotherProject.getLocation().append(fileName).toOSString();
+		String windowsFileName = anotherProject.getLocation().append(fileName).toString();
 		String cygwinFileName;
 		try {
 			cygwinFileName = Cygwin.windowsToCygwinPath(windowsFileName);
@@ -1034,7 +1034,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 	@Test
 	public void testCygwinAndMakeErrorParserBug270772() throws Exception {
 		String fileName = "testCygwinAndMakeErrorParser.c";
-		String windowsFileName = fProject.getLocation().append(fileName).toOSString();
+		String windowsFileName = fProject.getLocation().append(fileName).toString();
 		String cygwinFileName;
 		try {
 			cygwinFileName = Cygwin.windowsToCygwinPath(windowsFileName);
@@ -1104,7 +1104,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 		ResourceHelper.createFolder(fProject, "BuildDir");
 		ResourceHelper.createFile(fProject, "BuildDir/testBuildDir.c");
 
-		String buildDir = fProject.getLocation().append("BuildDir").toOSString();
+		String buildDir = fProject.getLocation().append("BuildDir").toString();
 		parseOutput(fProject, buildDir, "testBuildDir.c:1:error");
 		assertEquals(1, errorList.size());
 
@@ -1124,7 +1124,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 		ResourceHelper.createFolder(fProject, "BuildDir");
 		ResourceHelper.createFile(fProject, "BuildDir/testBuildDirVsProjectRoot.c");
 
-		String buildDir = fProject.getLocation().append("BuildDir").toOSString();
+		String buildDir = fProject.getLocation().append("BuildDir").toString();
 		parseOutput(fProject, buildDir, "testBuildDirVsProjectRoot.c:1:error");
 		assertEquals(1, errorList.size());
 
@@ -1143,7 +1143,7 @@ public class ErrorParserFileMatchingTest extends BaseTestCase5 {
 	public void testAbsoluteFileVsLink() throws Exception {
 		ResourceHelper.createFolder(fProject, "Folder");
 		IFile file = ResourceHelper.createFile(fProject, "Folder/testAbsoluteFileVsLink.c");
-		String fullName = file.getLocation().toOSString();
+		String fullName = file.getLocation().toString();
 		ResourceHelper.createLinkedFile(fProject, "testAbsoluteFileVsLink.c", file.getLocation());
 
 		parseOutput(fullName + ":1:error");
diff --git a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/resources/tests/RefreshScopeTests.java b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/resources/tests/RefreshScopeTests.java
index a04ae546b7..cc8f969fe0 100644
--- a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/resources/tests/RefreshScopeTests.java
+++ b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/core/resources/tests/RefreshScopeTests.java
@@ -531,7 +531,7 @@ public class RefreshScopeTests extends BaseTestCase5 {
 
 	private void createTestFile(IPath path) {
 		path = path.append("foo.cpp");
-		File file = new File(path.toOSString());
+		File file = new File(path.toString());
 		try {
 			file.createNewFile();
 		} catch (IOException e) {
diff --git a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/utils/FindProgramLocationTest.java b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/utils/FindProgramLocationTest.java
index 22e57ce202..91c8b8a4b2 100644
--- a/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/utils/FindProgramLocationTest.java
+++ b/core/org.eclipse.cdt.core.tests/misc/org/eclipse/cdt/utils/FindProgramLocationTest.java
@@ -163,7 +163,7 @@ public class FindProgramLocationTest extends TestCase {
 		file3_exe.createNewFile();
 		assertTrue(file3_exe.exists());
 
-		String path1 = dir1.toOSString();
+		String path1 = dir1.toString();
 		{
 			// file.com
 			IPath actual = PathUtil.findProgramLocation(name1, path1);
@@ -175,7 +175,7 @@ public class FindProgramLocationTest extends TestCase {
 			assertEquals(filePath2_exe, actual);
 		}
 
-		String path12 = dir1.toOSString() + PATH_SEPARATOR + dir2.toOSString();
+		String path12 = dir1.toString() + PATH_SEPARATOR + dir2.toString();
 		{
 			// dir2/file.exe is preferred to dir1/file
 			IPath actual = PathUtil.findProgramLocation(name3, path12);
diff --git a/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java b/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java
index c2825c761d..8896b4536c 100644
--- a/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java
+++ b/core/org.eclipse.cdt.core.tests/model/org/eclipse/cdt/core/language/settings/providers/LanguageSettingsPersistenceProjectTests.java
@@ -1154,7 +1154,7 @@ public class LanguageSettingsPersistenceProjectTests extends BaseTestCase5 {
 		}
 		{
 			// Move storage out of the way
-			String xmlStorageFileLocation = xmlStorageFilePrj.getLocation().toOSString();
+			String xmlStorageFileLocation = xmlStorageFilePrj.getLocation().toString();
 			java.io.File xmlFile = new java.io.File(xmlStorageFileLocation);
 			xmlPrjOutOfTheWay = xmlStorageFileLocation + ".out-of-the-way";
 			java.io.File xmlFileOut = new java.io.File(xmlPrjOutOfTheWay);
@@ -1214,7 +1214,7 @@ public class LanguageSettingsPersistenceProjectTests extends BaseTestCase5 {
 			assertEquals(0, providers.size());
 
 			// Move storage back
-			String xmlStorageFileLocation = xmlStorageFilePrj.getLocation().toOSString();
+			String xmlStorageFileLocation = xmlStorageFilePrj.getLocation().toString();
 			java.io.File xmlFile = new java.io.File(xmlStorageFileLocation);
 			xmlFile.delete();
 			assertNotExists(xmlFile);
@@ -1400,7 +1400,7 @@ public class LanguageSettingsPersistenceProjectTests extends BaseTestCase5 {
 		{
 			// Move storages out of the way
 			// project storage
-			String xmlStorageFilePrjLocation = xmlStorageFilePrj.getLocation().toOSString();
+			String xmlStorageFilePrjLocation = xmlStorageFilePrj.getLocation().toString();
 			java.io.File xmlFile = new java.io.File(xmlStorageFilePrjLocation);
 			xmlPrjOutOfTheWay = xmlStorageFilePrjLocation + ".out-of-the-way";
 			java.io.File xmlFileOut = new java.io.File(xmlPrjOutOfTheWay);
@@ -1464,7 +1464,7 @@ public class LanguageSettingsPersistenceProjectTests extends BaseTestCase5 {
 
 			// Move project storage back
 			project.open(null);
-			String xmlStorageFilePrjLocation = xmlStorageFilePrj.getLocation().toOSString();
+			String xmlStorageFilePrjLocation = xmlStorageFilePrj.getLocation().toString();
 			java.io.File xmlFile = new java.io.File(xmlStorageFilePrjLocation);
 			xmlFile.delete();
 			assertNotExists(xmlFile);
diff --git a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java
index 882a9b8907..a4f010e1ce 100644
--- a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java
+++ b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java
@@ -129,9 +129,9 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("one/three/bar/foo.h", i3Next); //$NON-NLS-1$
 
 		String[] path = new String[3];
-		path[0] = one.getLocation().toOSString();
-		path[1] = oneTwo.getLocation().toOSString();
-		path[2] = oneThree.getLocation().toOSString();
+		path[0] = one.getLocation().toString();
+		path[1] = oneTwo.getLocation().toString();
+		path[2] = oneThree.getLocation().toString();
 
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
@@ -170,8 +170,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("two/foo.h", foo2); //$NON-NLS-1$
 
 		String[] path = new String[2];
-		path[0] = one.getLocation().toOSString();
-		path[1] = two.getLocation().toOSString();
+		path[0] = one.getLocation().toString();
+		path[1] = two.getLocation().toString();
 
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
@@ -208,8 +208,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("three/foo.h", i3Next); //$NON-NLS-1$
 
 		String[] path = new String[2];
-		path[0] = twof.getLocation().toOSString();
-		path[1] = threef.getLocation().toOSString();
+		path[0] = twof.getLocation().toString();
+		path[1] = threef.getLocation().toString();
 
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
@@ -220,8 +220,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		validateToken(IToken.tSEMI);
 		validateEOF();
 
-		path[0] = threef.getLocation().toOSString();
-		path[1] = twof.getLocation().toOSString();
+		path[0] = threef.getLocation().toString();
+		path[1] = twof.getLocation().toString();
 
 		scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		initializeScanner(reader, ParserLanguage.C, ParserMode.COMPLETE_PARSE, scannerInfo);
@@ -235,7 +235,7 @@ public class InclusionTests extends PreprocessorTestsBase {
 	public void testBug91086() throws Exception {
 		IFile inclusion = importFile("file.h", "#define FOUND 666\n"); //$NON-NLS-1$ //$NON-NLS-2$
 		StringBuilder buffer = new StringBuilder("#include \""); //$NON-NLS-1$
-		buffer.append(inclusion.getLocation().toOSString());
+		buffer.append(inclusion.getLocation().toString());
 		buffer.append("\"\n"); //$NON-NLS-1$
 		buffer.append("int var = FOUND;\n"); //$NON-NLS-1$
 		IFile base = importFile("base.cpp", buffer.toString()); //$NON-NLS-1$
@@ -316,7 +316,7 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("test.h", "");
 		IFile base = importFile("test.cpp", getAboveComment());
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP,
-				new String[] { fProject.getProject().getLocation().toOSString() }, new String[] {}, null);
+				new String[] { fProject.getProject().getLocation().toString() }, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
 		initializeScanner(reader, ParserLanguage.CPP, ParserMode.COMPLETE_PARSE, scannerInfo);
 		validateIdentifier("identifier");
@@ -365,8 +365,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("two/foo.h", foo2); //$NON-NLS-1$
 
 		String[] path = new String[2];
-		path[0] = one.getLocation().toOSString();
-		path[1] = two.getLocation().toOSString();
+		path[0] = one.getLocation().toString();
+		path[1] = two.getLocation().toString();
 
 		Map<String, String> definedSymbols = new HashMap<>();
 		definedSymbols.put("__GNUC__", "5");
diff --git a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/Bug246129.java b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/Bug246129.java
index 03b42ad137..f7d18cc146 100644
--- a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/Bug246129.java
+++ b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/Bug246129.java
@@ -122,14 +122,14 @@ public class Bug246129 extends IndexTestBase {
 
 			// However, the scanner info provider used by the unit tests
 			// needs separate setup, and this one must be complete.
-			TestScannerProvider.sIncludes = new String[] { fWrapperIncludeFolder.getLocation().toOSString(),
-					fIncludeFolder.getLocation().toOSString(), fExternalWrapperIncludeFolder.getAbsolutePath(),
+			TestScannerProvider.sIncludes = new String[] { fWrapperIncludeFolder.getLocation().toString(),
+					fIncludeFolder.getLocation().toString(), fExternalWrapperIncludeFolder.getAbsolutePath(),
 					fExternalIncludeFolder.getAbsolutePath() };
 
 			IndexerPreferences.set(fProject.getProject(), IndexerPreferences.KEY_INDEX_UNUSED_HEADERS_WITH_DEFAULT_LANG,
 					"false");
 
-			File falseFriendDirectory = new File(fWrapperIncludeFolder.getLocation().toOSString() + "/ext/..");
+			File falseFriendDirectory = new File(fWrapperIncludeFolder.getLocation().toString() + "/ext/..");
 
 			fFalseFriendsAccepted = falseFriendDirectory.exists();
 
diff --git a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java
index f0b037c928..974ed70df6 100644
--- a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java
+++ b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java
@@ -858,7 +858,7 @@ public abstract class IndexBindingResolutionTestBase extends SemanticTestBase {
 
 			referenced = createReferencedContent();
 
-			TestScannerProvider.sIncludes = new String[] { referenced.getProject().getLocation().toOSString() };
+			TestScannerProvider.sIncludes = new String[] { referenced.getProject().getLocation().toString() };
 			IFile references = TestSourceReader.createFile(cproject.getProject(),
 					new Path("refs.c" + (cpp ? "pp" : "")), sourceContents);
 
diff --git a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBugsTests.java b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBugsTests.java
index 6389b0884d..553c1de342 100644
--- a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBugsTests.java
+++ b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBugsTests.java
@@ -586,7 +586,7 @@ public class IndexBugsTests extends BaseTestCase {
 	public void test164360_1() throws Exception {
 		waitForIndexer();
 		IFile include = TestSourceReader.createFile(fCProject.getProject(), "test164360.h", "");
-		TestScannerProvider.sIncludeFiles = new String[] { include.getLocation().toOSString() };
+		TestScannerProvider.sIncludeFiles = new String[] { include.getLocation().toString() };
 		IFile file = TestSourceReader.createFile(fCProject.getProject(), "test164360.cpp", "");
 		TestSourceReader.waitUntilFileIsIndexed(fIndex, file, INDEXER_TIMEOUT_SEC * 1000);
 
@@ -609,7 +609,7 @@ public class IndexBugsTests extends BaseTestCase {
 	public void test164360_2() throws Exception {
 		waitForIndexer();
 		IFile include = TestSourceReader.createFile(fCProject.getProject(), "test164360.h", "");
-		TestScannerProvider.sMacroFiles = new String[] { include.getLocation().toOSString() };
+		TestScannerProvider.sMacroFiles = new String[] { include.getLocation().toString() };
 		IFile file = TestSourceReader.createFile(fCProject.getProject(), "test164360.cpp", "");
 		TestSourceReader.waitUntilFileIsIndexed(fIndex, file, INDEXER_TIMEOUT_SEC * 1000);
 
diff --git a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexIncludeTest.java b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexIncludeTest.java
index 98f15540e0..cbae3e1919 100644
--- a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexIncludeTest.java
+++ b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexIncludeTest.java
@@ -157,7 +157,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	// #include <system20061107.h>
 	public void testIncludeProperties() throws Exception {
 		waitForIndexer();
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		String content = readTaggedComment("source20061107");
 		TestSourceReader.createFile(fProject.getProject(), "user20061107.h", "");
 		TestSourceReader.createFile(fProject.getProject(), "system20061107.h", "");
@@ -178,7 +178,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	}
 
 	public void testIncludeProperties_2() throws Exception {
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		TestSourceReader.createFile(fProject.getProject(), "header20061107.h", "");
 		String content = "// comment \n#include \"header20061107.h\"\n";
 		IFile file = TestSourceReader.createFile(fProject.getProject(), "intermed20061107.h", content);
@@ -199,7 +199,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	}
 
 	public void testInactiveInclude() throws Exception {
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		String content = "#if 0\n#include \"inactive20070213.h\"\n#endif\n";
 		IFile file = TestSourceReader.createFile(fProject.getProject(), "source20070213.cpp", content);
 		CCorePlugin.getIndexManager().reindex(fProject);
@@ -219,7 +219,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	}
 
 	public void testUnresolvedInclude() throws Exception {
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		String content = "#include \"unresolved20070213.h\"\n";
 		IFile file = TestSourceReader.createFile(fProject.getProject(), "source20070214.cpp", content);
 		CCorePlugin.getIndexManager().reindex(fProject);
@@ -332,7 +332,7 @@ public class IndexIncludeTest extends IndexTestBase {
 
 	// #include "resolved20070426.h"
 	public void testFixedContext() throws Exception {
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		String source = getContentsForTest(1)[0].toString();
 		IFile header = TestSourceReader.createFile(fProject.getProject(), "resolved20070426.h", "");
 		IFile s1 = TestSourceReader.createFile(fProject.getProject(), "s1.cpp", source);
@@ -415,7 +415,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	// #include "unesolved20070427.h"
 	public void testUpdateIncludes() throws Exception {
 		waitForIndexer();
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		CharSequence[] source = getContentsForTest(4);
 		IFile header = TestSourceReader.createFile(fProject.getProject(), "resolved20070427.h", "");
 		IFile s1 = TestSourceReader.createFile(fProject.getProject(), "s20070427.cpp",
@@ -482,7 +482,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	// #include "h2.h"
 	public void testMultiVariantHeaderUpdate() throws Exception {
 		waitForIndexer();
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		StringBuilder[] contents = getContentsForTest(4);
 		final StringBuilder h1Contents = contents[0];
 		final IFile h1 = TestSourceReader.createFile(fProject.getProject(), "h1.h", h1Contents.toString());
@@ -566,7 +566,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	// #endif // H1_H_
 	public void testPragmaOnceChange() throws Exception {
 		waitForIndexer();
-		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fProject.getProject().getLocation().toString() };
 		CharSequence[] contents = getContentsForTest(5);
 		final CharSequence h1Contents = contents[0];
 		final IFile h1 = TestSourceReader.createFile(fProject.getProject(), "h1.h", h1Contents.toString());
@@ -658,7 +658,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	public void testSignificantMacrosWithPragmeOnceSemantic() throws Exception {
 		waitForIndexer();
 		IProject prj = fProject.getProject();
-		TestScannerProvider.sIncludes = new String[] { prj.getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { prj.getLocation().toString() };
 		CharSequence[] contents = getContentsForTest(5);
 
 		IFile b = createFile(prj, "b.hpp", contents[0].toString());
@@ -717,7 +717,7 @@ public class IndexIncludeTest extends IndexTestBase {
 	public void testSignificantMacrosWithPragmeOnceFromIdxSemantic() throws Exception {
 		waitForIndexer();
 		IProject prj = fProject.getProject();
-		TestScannerProvider.sIncludes = new String[] { prj.getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { prj.getLocation().toString() };
 		CharSequence[] contents = getContentsForTest(7);
 
 		IFile b = createFile(prj, "b.hpp", contents[0].toString());
diff --git a/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/ResourceHelper.java b/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/ResourceHelper.java
index da5d0d37e8..a5db6d9eb3 100644
--- a/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/ResourceHelper.java
+++ b/core/org.eclipse.cdt.core.tests/suite/org/eclipse/cdt/core/testplugin/ResourceHelper.java
@@ -317,14 +317,14 @@ public class ResourceHelper {
 	public static IPath createWorkspaceFile(String name) throws CoreException, IOException {
 		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
 		IPath fullPath = workspaceRoot.getLocation().append(name);
-		java.io.File file = new java.io.File(fullPath.toOSString());
+		java.io.File file = new java.io.File(fullPath.toString());
 		if (!file.exists()) {
 			boolean result = file.createNewFile();
 			Assert.assertTrue(result);
 		}
 		Assert.assertTrue(file.exists());
 
-		externalFilesCreated.add(fullPath.toOSString());
+		externalFilesCreated.add(fullPath.toString());
 		workspaceRoot.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
 		return fullPath;
 	}
@@ -364,14 +364,14 @@ public class ResourceHelper {
 	public static IPath createWorkspaceFolder(String name) throws CoreException, IOException {
 		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
 		IPath fullPath = workspaceRoot.getLocation().append(name);
-		java.io.File folder = new java.io.File(fullPath.toOSString());
+		java.io.File folder = new java.io.File(fullPath.toString());
 		if (!folder.exists()) {
 			boolean result = folder.mkdirs();
 			Assert.assertTrue(result);
 		}
 		Assert.assertTrue(folder.exists());
 
-		externalFilesCreated.add(fullPath.toOSString());
+		externalFilesCreated.add(fullPath.toString());
 		workspaceRoot.refreshLocal(IResource.DEPTH_INFINITE, NULL_MONITOR);
 		return fullPath;
 	}
@@ -556,8 +556,8 @@ public class ResourceHelper {
 			throw new UnsupportedOperationException("Windows links .lnk are not supported.");
 		}
 
-		Assert.assertTrue("Path for symbolic link does not exist: [" + realPath.toOSString() + "]",
-				new File(realPath.toOSString()).exists());
+		Assert.assertTrue("Path for symbolic link does not exist: [" + realPath.toString() + "]",
+				new File(realPath.toString()).exists());
 
 		IPath linkedPath = project.getLocation().append(linkName);
 		createSymbolicLink(linkedPath, realPath);
@@ -571,7 +571,7 @@ public class ResourceHelper {
 		}
 		Assert.assertTrue("Failed to create resource form symbolic link", resource.exists());
 
-		externalFilesCreated.add(linkedPath.toOSString());
+		externalFilesCreated.add(linkedPath.toString());
 		ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE, NULL_MONITOR);
 		return resource;
 	}
@@ -591,7 +591,7 @@ public class ResourceHelper {
 			throw new UnsupportedOperationException("Windows links .lnk are not supported.");
 		}
 
-		String command[] = { "ln", "-s", realPath.toOSString(), linkPath.toOSString() };
+		String command[] = { "ln", "-s", realPath.toString(), linkPath.toString() };
 		Process process = Runtime.getRuntime().exec(command);
 
 		// Wait for up to 2.5s...
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsScannerInfoProvider.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsScannerInfoProvider.java
index f19a013f9c..2e4a874bf3 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsScannerInfoProvider.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/LanguageSettingsScannerInfoProvider.java
@@ -225,7 +225,7 @@ public class LanguageSettingsScannerInfoProvider implements IScannerInfoProvider
 			IPath buildCWD = getBuildCWD(cfgDescription);
 			// again, we avoid using org.eclipse.core.runtime.Path for manipulations being careful
 			// to preserve "../" segments and not let collapsing them which is not correct for symbolic links.
-			location = buildCWD.addTrailingSeparator().toOSString() + location;
+			location = buildCWD.addTrailingSeparator().toString() + location;
 		}
 		return location;
 	}
@@ -266,10 +266,10 @@ public class LanguageSettingsScannerInfoProvider implements IScannerInfoProvider
 					if (loc != null) {
 						if (checkBit(resolved.getFlags(), ICSettingEntry.FRAMEWORKS_MAC)) {
 							// handle frameworks, see IScannerInfo.getIncludePaths()
-							locations.add(loc.append(FRAMEWORK_HEADERS_INCLUDE).toOSString());
-							locations.add(loc.append(FRAMEWORK_PRIVATE_HEADERS_INCLUDE).toOSString());
+							locations.add(loc.append(FRAMEWORK_HEADERS_INCLUDE).toString());
+							locations.add(loc.append(FRAMEWORK_PRIVATE_HEADERS_INCLUDE).toString());
 						} else {
-							locations.add(loc.toOSString());
+							locations.add(loc.toString());
 						}
 					}
 				}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/PathEntryScannerInfoLanguageSettingsProvider.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/PathEntryScannerInfoLanguageSettingsProvider.java
index 9b20c56fe1..a6f50fa380 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/PathEntryScannerInfoLanguageSettingsProvider.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/language/settings/providers/PathEntryScannerInfoLanguageSettingsProvider.java
@@ -156,20 +156,20 @@ public class PathEntryScannerInfoLanguageSettingsProvider extends LanguageSettin
 		switch (pathEntry.getEntryKind()) {
 		case IPathEntry.CDT_INCLUDE:
 			IIncludeEntry includeEntry = (IIncludeEntry) pathEntry;
-			return CDataUtil.createCIncludePathEntry(includeEntry.getFullIncludePath().toOSString(),
+			return CDataUtil.createCIncludePathEntry(includeEntry.getFullIncludePath().toString(),
 					includeEntry.isSystemInclude() ? 0 : ICSettingEntry.LOCAL);
 		case IPathEntry.CDT_MACRO:
 			IMacroEntry macroEntry = (IMacroEntry) pathEntry;
 			return CDataUtil.createCMacroEntry(macroEntry.getMacroName(), macroEntry.getMacroValue(), 0);
 		case IPathEntry.CDT_INCLUDE_FILE:
 			IIncludeFileEntry includeFileEntry = (IIncludeFileEntry) pathEntry;
-			return CDataUtil.createCIncludeFileEntry(includeFileEntry.getFullIncludeFilePath().toOSString(), 0);
+			return CDataUtil.createCIncludeFileEntry(includeFileEntry.getFullIncludeFilePath().toString(), 0);
 		case IPathEntry.CDT_MACRO_FILE:
 			IMacroFileEntry macroFileEntry = (IMacroFileEntry) pathEntry;
-			return CDataUtil.createCMacroFileEntry(macroFileEntry.getFullMacroFilePath().toOSString(), 0);
+			return CDataUtil.createCMacroFileEntry(macroFileEntry.getFullMacroFilePath().toString(), 0);
 		case IPathEntry.CDT_LIBRARY:
 			ILibraryEntry libraryEntry = (ILibraryEntry) pathEntry;
-			return CDataUtil.createCLibraryFileEntry(libraryEntry.getFullLibraryPath().toOSString(), 0);
+			return CDataUtil.createCLibraryFileEntry(libraryEntry.getFullLibraryPath().toString(), 0);
 		}
 		return null;
 	}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/PathEntryUtil.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/PathEntryUtil.java
index 9c065a6d58..c4e593cb3c 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/PathEntryUtil.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/PathEntryUtil.java
@@ -426,7 +426,7 @@ public class PathEntryUtil {
 				&& entry.getEntryKind() != IPathEntry.CDT_OUTPUT) {
 			if (!isValidWorkspacePath(project, path)) {
 				return new CModelStatus(ICModelStatusConstants.INVALID_PATHENTRY, CoreModelMessages.getFormattedString(
-						"PathEntryManager.0", new Object[] { path.toOSString(), ((PathEntry) entry).getKindString() })); //$NON-NLS-1$
+						"PathEntryManager.0", new Object[] { path.toString(), ((PathEntry) entry).getKindString() })); //$NON-NLS-1$
 			}
 		}
 
@@ -437,11 +437,11 @@ public class PathEntryUtil {
 				IPath includePath = include.getFullIncludePath();
 				if (!isValidExternalPath(includePath)) {
 					return new CModelStatus(ICModelStatusConstants.INVALID_PATHENTRY,
-							CoreModelMessages.getFormattedString("PathEntryManager.2", includePath.toOSString())); //$NON-NLS-1$
+							CoreModelMessages.getFormattedString("PathEntryManager.2", includePath.toString())); //$NON-NLS-1$
 				}
 				if (!isValidBasePath(include.getBasePath())) {
 					return new CModelStatus(ICModelStatusConstants.INVALID_PATHENTRY,
-							CoreModelMessages.getFormattedString("PathEntryManager.1", includePath.toOSString())); //$NON-NLS-1$
+							CoreModelMessages.getFormattedString("PathEntryManager.1", includePath.toString())); //$NON-NLS-1$
 				}
 			}
 			break;
@@ -454,7 +454,7 @@ public class PathEntryUtil {
 					if (!sourceAttach.isAbsolute()) {
 						if (!isValidWorkspacePath(project, sourceAttach) || !isValidExternalPath(sourceAttach)) {
 							return new CModelStatus(ICModelStatusConstants.INVALID_PATHENTRY, CoreModelMessages
-									.getFormattedString("PathEntryManager.3", sourceAttach.toOSString())); //$NON-NLS-1$
+									.getFormattedString("PathEntryManager.3", sourceAttach.toString())); //$NON-NLS-1$
 						}
 					}
 				}
@@ -462,11 +462,11 @@ public class PathEntryUtil {
 			IPath libraryPath = library.getFullLibraryPath();
 			if (!isValidExternalPath(libraryPath)) {
 				return new CModelStatus(ICModelStatusConstants.INVALID_PATHENTRY,
-						CoreModelMessages.getFormattedString("PathEntryManager.4", libraryPath.toOSString())); //$NON-NLS-1$
+						CoreModelMessages.getFormattedString("PathEntryManager.4", libraryPath.toString())); //$NON-NLS-1$
 			}
 			if (!isValidBasePath(library.getBasePath())) {
 				return new CModelStatus(ICModelStatusConstants.INVALID_PATHENTRY,
-						CoreModelMessages.getFormattedString("PathEntryManager.7", libraryPath.toOSString())); //$NON-NLS-1$
+						CoreModelMessages.getFormattedString("PathEntryManager.7", libraryPath.toString())); //$NON-NLS-1$
 			}
 			break;
 		}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/TranslationUnit.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/TranslationUnit.java
index dcf563dc47..f1089dd7f6 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/TranslationUnit.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/TranslationUnit.java
@@ -1037,15 +1037,15 @@ public class TranslationUnit extends Openable implements ITranslationUnit {
 		if (location == null)
 			return new org.eclipse.cdt.core.parser.CodeReader(getContents());
 		if (isWorkingCopy()) {
-			return new org.eclipse.cdt.core.parser.CodeReader(location.toOSString(), getContents());
+			return new org.eclipse.cdt.core.parser.CodeReader(location.toString(), getContents());
 		}
 
 		IResource res = getResource();
 		try {
 			if (res instanceof IFile)
-				return InternalParserUtil.createWorkspaceFileReader(location.toOSString(), (IFile) res, null);
+				return InternalParserUtil.createWorkspaceFileReader(location.toString(), (IFile) res, null);
 			else
-				return InternalParserUtil.createExternalFileReader(location.toOSString(), null);
+				return InternalParserUtil.createExternalFileReader(location.toString(), null);
 		} catch (CoreException e) {
 			CCorePlugin.log(e);
 		} catch (IOException e) {
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/DescriptionScannerInfoProvider.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/DescriptionScannerInfoProvider.java
index d944fd9181..6f9d84c305 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/DescriptionScannerInfoProvider.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/settings/model/DescriptionScannerInfoProvider.java
@@ -257,7 +257,7 @@ public class DescriptionScannerInfoProvider implements IScannerInfoProvider, ICP
 					path = projLocation.append(path);
 			}
 			if (path != null)
-				values[num++] = path.toOSString();
+				values[num++] = path.toString();
 		}
 
 		if (num < pathEntries.length) {
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/FileContent.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/FileContent.java
index 73f10c50dc..2a9cbf29a2 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/FileContent.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/FileContent.java
@@ -111,13 +111,13 @@ public abstract class FileContent {
 		if (location == null) {
 			fileContent = new InternalFileContent(tu.getElementName(), new CharArray(tu.getContents()));
 		} else if (tu.isWorkingCopy()) {
-			fileContent = new InternalFileContent(location.toOSString(), new CharArray(tu.getContents()));
+			fileContent = new InternalFileContent(location.toString(), new CharArray(tu.getContents()));
 		} else {
 			IResource res = tu.getResource();
 			if (res instanceof IFile) {
 				fileContent = InternalParserUtil.createWorkspaceFileContent((IFile) res);
 			} else {
-				fileContent = InternalParserUtil.createExternalFileContent(location.toOSString(),
+				fileContent = InternalParserUtil.createExternalFileContent(location.toString(),
 						InternalParserUtil.SYSTEM_DEFAULT_ENCODING);
 			}
 		}
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ICodeReaderCache.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ICodeReaderCache.java
index aed8020d7b..0211e1eef3 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ICodeReaderCache.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/parser/ICodeReaderCache.java
@@ -34,7 +34,7 @@ public interface ICodeReaderCache {
 	 * is created for the path and then returned.
 	 *
 	 * @param key the path corresponding to the CodeReader, generally:
-	 * fileToParse.getLocation().toOSString()
+	 * fileToParse.getLocation().toString()
 	 * @return the CodeReader corresponding to the path specified by the key
 	 */
 	public CodeReader get(String key);
@@ -45,7 +45,7 @@ public interface ICodeReaderCache {
 	 * is created for the ifl and then returned.
 	 *
 	 * @param key the path corresponding to the CodeReader, generally:
-	 * fileToParse.getLocation().toOSString()
+	 * fileToParse.getLocation().toString()
 	 * @return the CodeReader corresponding to the path specified by the key
 	 * @throws IOException
 	 * @throws CoreException
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerInputAdapter.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerInputAdapter.java
index 064a34a992..0563e59a34 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerInputAdapter.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/indexer/StandaloneIndexerInputAdapter.java
@@ -56,12 +56,12 @@ public class StandaloneIndexerInputAdapter extends IndexerInputAdapter {
 
 	@Override
 	public long getLastModified(IIndexFileLocation location) {
-		return new File(URIUtil.toPath(location.getURI()).toOSString()).lastModified();
+		return new File(URIUtil.toPath(location.getURI()).toString()).lastModified();
 	}
 
 	@Override
 	public long getFileSize(IIndexFileLocation location) {
-		return new File(URIUtil.toPath(location.getURI()).toOSString()).length();
+		return new File(URIUtil.toPath(location.getURI()).toString()).length();
 	}
 
 	@Override
@@ -110,7 +110,7 @@ public class StandaloneIndexerInputAdapter extends IndexerInputAdapter {
 
 	@Override
 	public String getASTPath(IIndexFileLocation ifl) {
-		return URIUtil.toPath(ifl.getURI()).toOSString();
+		return URIUtil.toPath(ifl.getURI()).toString();
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/InternalParserUtil.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/InternalParserUtil.java
index 88401d7004..f174459c7a 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/InternalParserUtil.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/parser/InternalParserUtil.java
@@ -51,7 +51,7 @@ public class InternalParserUtil extends ParserFactory {
 	public static String normalizePath(String path, IFile file) {
 		IPath loc = file.getLocation();
 		if (loc != null) {
-			path = loc.toOSString();
+			path = loc.toString();
 		}
 		return path;
 	}
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/AbstractIndexerTask.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/AbstractIndexerTask.java
index 5ceb609ee0..6c3bf727e2 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/AbstractIndexerTask.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/AbstractIndexerTask.java
@@ -1092,7 +1092,7 @@ public abstract class AbstractIndexerTask extends PDOMWriter {
 		Throwable th = null;
 		try {
 			if (fShowActivity) {
-				trace("Indexer: parsing " + path.toOSString()); //$NON-NLS-1$
+				trace("Indexer: parsing " + path.toString()); //$NON-NLS-1$
 			}
 			progress.subTask(
 					getMessage(MessageKind.parsingFileTask, path.lastSegment(), path.removeLastSegments(1).toString()));
@@ -1109,7 +1109,7 @@ public abstract class AbstractIndexerTask extends PDOMWriter {
 			}
 			if (fShowActivity) {
 				long time = System.currentTimeMillis() - start;
-				trace("Indexer: processed " + path.toOSString() + " [" + time + " ms]"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+				trace("Indexer: processed " + path.toString() + " [" + time + " ms]"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			}
 		} catch (OperationCanceledException e) {
 		} catch (RuntimeException e) {
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java
index 29bcca3e41..85c056e430 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java
@@ -651,7 +651,7 @@ public abstract class PDOMWriter implements IPDOMASTProcessor {
 			file.setPragmaOnceSemantics(pragmaOnce);
 
 			if (data.fReplacementHeaders != null) {
-				String headerKey = IndexLocationFactory.getAbsolutePath(location).toOSString();
+				String headerKey = IndexLocationFactory.getAbsolutePath(location).toString();
 				String replacementHeader = data.fReplacementHeaders.get(headerKey);
 				if (replacementHeader != null)
 					file.setReplacementHeader(replacementHeader);
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacro.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacro.java
index e029f88078..86af1641b9 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacro.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacro.java
@@ -303,7 +303,7 @@ public class PDOMMacro implements IIndexMacro, IPDOMBinding {
 			if (location == null) {
 				return null;
 			}
-			String filename = location.toOSString();
+			String filename = location.toString();
 			return new PDOMASTFileLocation(filename, getNodeOffset(), getNodeLength());
 		} catch (CoreException e) {
 			CCorePlugin.log(e);
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacroReferenceName.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacroReferenceName.java
index 13eb3498eb..455a39455d 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacroReferenceName.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMMacroReferenceName.java
@@ -225,7 +225,7 @@ public final class PDOMMacroReferenceName implements IIndexFragmentName {
 			if (location == null) {
 				return null;
 			}
-			String filename = location.toOSString();
+			String filename = location.toString();
 			return new PDOMASTFileLocation(filename, getNodeOffset(), getNodeLength());
 		} catch (CoreException e) {
 			CCorePlugin.log(e);
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMName.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMName.java
index f8ac35b883..3d1c3a6a1e 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMName.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/dom/PDOMName.java
@@ -363,7 +363,7 @@ public final class PDOMName implements IIndexFragmentName {
 			if (location == null) {
 				return null;
 			}
-			String filename = location.toOSString();
+			String filename = location.toString();
 			return new PDOMASTFileLocation(filename, getNodeOffset(), getNodeLength());
 		} catch (CoreException e) {
 			CCorePlugin.log(e);
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMUpdateTask.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMUpdateTask.java
index f96164e0f7..140cc13067 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMUpdateTask.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/PDOMUpdateTask.java
@@ -200,7 +200,7 @@ public class PDOMUpdateTask implements IPDOMIndexerTask {
 	private static boolean canResolveUnresolvedInclude(IIndexFile file, IScannerInfo scannerInfo,
 			ProjectIndexerIncludeResolutionHeuristics includeResolutionHeuristics) {
 		try {
-			String filePath = IndexLocationFactory.getAbsolutePath(file.getLocation()).toOSString();
+			String filePath = IndexLocationFactory.getAbsolutePath(file.getLocation()).toString();
 			long fileReadTime = file.getSourceReadTime();
 			IncludeSearchPath includeSearchPath = CPreprocessor
 					.configureIncludeSearchPath(new File(filePath).getParentFile(), scannerInfo);
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/ProjectIndexerInputAdapter.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/ProjectIndexerInputAdapter.java
index 3e199f69ee..f0bd407a8c 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/ProjectIndexerInputAdapter.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/ProjectIndexerInputAdapter.java
@@ -150,7 +150,7 @@ public class ProjectIndexerInputAdapter extends IndexerInputAdapter {
 	public String getASTPath(IIndexFileLocation ifl) {
 		IPath path = IndexLocationFactory.getAbsolutePath(ifl);
 		if (path != null) {
-			return path.toOSString();
+			return path.toString();
 		}
 		return ifl.getURI().getPath();
 	}
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CommandLauncher.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CommandLauncher.java
index 0f7984a6e1..5d90b3dead 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CommandLauncher.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/CommandLauncher.java
@@ -164,7 +164,7 @@ public class CommandLauncher implements ICommandLauncher {
 		String envPathValue = getEnvironmentProperty(PATH_ENV);
 
 		Boolean isFound = null;
-		String command = commandPath.toOSString();
+		String command = commandPath.toString();
 		fCommandArgs = constructCommandArray(command, args);
 		if (Platform.getOS().equals(Platform.OS_WIN32)) {
 			// Handle cygwin link
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/CBuildConfiguration.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/CBuildConfiguration.java
index 837b2042e3..3490532b76 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/CBuildConfiguration.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/CBuildConfiguration.java
@@ -414,7 +414,7 @@ public abstract class CBuildConfiguration extends PlatformObject implements ICBu
 			}
 			String externalLocation = null;
 			if (problemMarkerInfo.externalPath != null && !problemMarkerInfo.externalPath.isEmpty()) {
-				externalLocation = problemMarkerInfo.externalPath.toOSString();
+				externalLocation = problemMarkerInfo.externalPath.toString();
 			}
 
 			// Try to find matching markers and don't put in duplicates
@@ -688,13 +688,13 @@ public abstract class CBuildConfiguration extends PlatformObject implements ICBu
 		IIncludeEntry[] includeEntries = CoreModel.getIncludeEntries(resPath);
 		String[] includes = new String[includeEntries.length];
 		for (int i = 0; i < includeEntries.length; ++i) {
-			includes[i] = includeEntries[i].getFullIncludePath().toOSString();
+			includes[i] = includeEntries[i].getFullIncludePath().toString();
 		}
 
 		IIncludeFileEntry[] includeFileEntries = CoreModel.getIncludeFileEntries(resPath);
 		String[] includeFiles = new String[includeFileEntries.length];
 		for (int i = 0; i < includeFiles.length; ++i) {
-			includeFiles[i] = includeFileEntries[i].getFullIncludeFilePath().toOSString();
+			includeFiles[i] = includeFileEntries[i].getFullIncludeFilePath().toString();
 		}
 
 		IMacroEntry[] macros = CoreModel.getMacroEntries(resPath);
@@ -706,7 +706,7 @@ public abstract class CBuildConfiguration extends PlatformObject implements ICBu
 		IMacroFileEntry[] macroFileEntries = CoreModel.getMacroFileEntries(resPath);
 		String[] macroFiles = new String[macroFileEntries.length];
 		for (int i = 0; i < macroFiles.length; ++i) {
-			macroFiles[i] = macroFileEntries[i].getFullMacroFilePath().toOSString();
+			macroFiles[i] = macroFileEntries[i].getFullMacroFilePath().toString();
 		}
 		return new ExtendedScannerInfo(symbolMap, includes, macroFiles, includeFiles);
 	}
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ScannerInfoCache.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ScannerInfoCache.java
index f1a90bc3f2..753bd68e2b 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ScannerInfoCache.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/build/ScannerInfoCache.java
@@ -54,7 +54,7 @@ public class ScannerInfoCache {
 	}
 
 	public IExtendedScannerInfo getScannerInfo(IResource resource) {
-		String resourcePath = resource.getLocation().toOSString();
+		String resourcePath = resource.getLocation().toString();
 		Command command = resourceMap.get(resourcePath);
 		return command != null ? command.info : null;
 	}
@@ -70,7 +70,7 @@ public class ScannerInfoCache {
 
 	public void addScannerInfo(List<String> commandStrings, IExtendedScannerInfo info, IResource resource) {
 		// Do I need to remove the resource from an existing command?
-		String resourcePath = resource.getLocation().toOSString();
+		String resourcePath = resource.getLocation().toString();
 		Command oldCommand = resourceMap.get(resourcePath);
 		if (oldCommand != null) {
 			if (oldCommand.command.equals(commandStrings)) {
@@ -108,7 +108,7 @@ public class ScannerInfoCache {
 	 * @since 6.3
 	 */
 	public boolean hasResource(List<String> commandStrings, IResource resource) {
-		String resourcePath = resource.getLocation().toOSString();
+		String resourcePath = resource.getLocation().toString();
 		Command command = commandMap.get(commandStrings);
 		if (command == null) {
 			return false;
@@ -117,7 +117,7 @@ public class ScannerInfoCache {
 	}
 
 	public void addResource(List<String> commandStrings, IResource resource) {
-		String resourcePath = resource.getLocation().toOSString();
+		String resourcePath = resource.getLocation().toString();
 		Command command = commandMap.get(commandStrings);
 		Command current = resourceMap.get(resourcePath);
 		if (current != null) {
@@ -133,7 +133,7 @@ public class ScannerInfoCache {
 				return;
 			}
 		}
-		command.resourcePaths.add(resource.getLocation().toOSString());
+		command.resourcePaths.add(resource.getLocation().toString());
 		resourceMap.put(resourcePath, command);
 	}
 
@@ -141,7 +141,7 @@ public class ScannerInfoCache {
 	 * @since 6.4
 	 */
 	public void removeResource(IResource resource) {
-		String resourcePath = resource.getLocation().toOSString();
+		String resourcePath = resource.getLocation().toString();
 		Command command = resourceMap.get(resourcePath);
 		if (command != null) {
 			command.resourcePaths.remove(resourcePath);
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/FixitErrorParser.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/FixitErrorParser.java
index 617dd0c76f..8ad0388984 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/FixitErrorParser.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/errorparsers/FixitErrorParser.java
@@ -55,7 +55,7 @@ public class FixitErrorParser extends RegexErrorParser {
 					ProblemMarkerInfo info = ProblemMarkerFilterManager.getInstance().getLastProblemMarker(f);
 					String externalLocation = null;
 					if (info.externalPath != null && !info.externalPath.isEmpty()) {
-						externalLocation = info.externalPath.toOSString();
+						externalLocation = info.externalPath.toString();
 					}
 
 					// Try to find matching marker to tie to fix-it
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/parser/CodeReaderCache.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/parser/CodeReaderCache.java
index e846d5258d..b7afd3d661 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/parser/CodeReaderCache.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/parser/CodeReaderCache.java
@@ -105,7 +105,7 @@ public class CodeReaderCache implements ICodeReaderCache {
 						removeKeys(delta.getAffectedChildren());
 					} else if (delta.getResource() instanceof IFile
 							&& ((IFile) delta.getResource()).getLocation() != null) {
-						removeKey(((IFile) delta.getResource()).getLocation().toOSString());
+						removeKey(((IFile) delta.getResource()).getLocation().toString());
 					}
 				}
 			}
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ACBuilder.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ACBuilder.java
index 4b141b3469..0b398db711 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ACBuilder.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ACBuilder.java
@@ -179,7 +179,7 @@ public abstract class ACBuilder extends IncrementalProjectBuilder implements IMa
 			}
 			String externalLocation = null;
 			if (problemMarkerInfo.externalPath != null && !problemMarkerInfo.externalPath.isEmpty()) {
-				externalLocation = problemMarkerInfo.externalPath.toOSString();
+				externalLocation = problemMarkerInfo.externalPath.toString();
 			}
 
 			if (!problemMarkerInfo.isDeferDeDuplication()) {
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/FileStorage.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/FileStorage.java
index e215e86574..96df504668 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/FileStorage.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/FileStorage.java
@@ -83,7 +83,7 @@ public class FileStorage extends PlatformObject implements IStorage {
 	 */
 	@Override
 	public String toString() {
-		return path.toOSString();
+		return path.toString();
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ScannerProvider.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ScannerProvider.java
index d38d1333ae..f835b39703 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ScannerProvider.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/resources/ScannerProvider.java
@@ -111,9 +111,9 @@ public class ScannerProvider extends AbstractCExtension implements IScannerInfoP
 			String[] systemIncludes = new String[systemCount];
 			for (int i = 0, j = 0, k = 0; i < includeEntries.length; ++i) {
 				if (includeEntries[i].isSystemInclude()) {
-					systemIncludes[j++] = includeEntries[i].getFullIncludePath().toOSString();
+					systemIncludes[j++] = includeEntries[i].getFullIncludePath().toString();
 				} else {
-					localIncludes[k++] = includeEntries[i].getFullIncludePath().toOSString();
+					localIncludes[k++] = includeEntries[i].getFullIncludePath().toString();
 				}
 			}
 
@@ -121,7 +121,7 @@ public class ScannerProvider extends AbstractCExtension implements IScannerInfoP
 			IIncludeFileEntry[] includeFileEntries = CoreModel.getIncludeFileEntries(resPath);
 			String[] includeFiles = new String[includeFileEntries.length];
 			for (int i = 0; i < includeFiles.length; ++i) {
-				includeFiles[i] = includeFileEntries[i].getFullIncludeFilePath().toOSString();
+				includeFiles[i] = includeFileEntries[i].getFullIncludeFilePath().toString();
 			}
 
 			// get the macros
@@ -135,7 +135,7 @@ public class ScannerProvider extends AbstractCExtension implements IScannerInfoP
 			IMacroFileEntry[] macroFileEntries = CoreModel.getMacroFileEntries(resPath);
 			String[] macroFiles = new String[macroFileEntries.length];
 			for (int i = 0; i < macroFiles.length; ++i) {
-				macroFiles[i] = macroFileEntries[i].getFullMacroFilePath().toOSString();
+				macroFiles[i] = macroFileEntries[i].getFullMacroFilePath().toString();
 			}
 			return new ScannerInfo(systemIncludes, localIncludes, includeFiles, symbolMap, macroFiles);
 		} catch (CModelException e) {
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CdtMacroSupplier.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CdtMacroSupplier.java
index cc454f227a..6f26f98033 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CdtMacroSupplier.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/cdtvariables/CdtMacroSupplier.java
@@ -80,7 +80,7 @@ public class CdtMacroSupplier extends CoreMacroSupplierBase {
 					if(workingDirectory != null){
 						IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory, inputFileLocation);
 						if(filePath != null)
-							value = filePath.toOSString();
+							value = filePath.toString();
 					}
 				}
 			}
@@ -90,7 +90,7 @@ public class CdtMacroSupplier extends CoreMacroSupplierBase {
 					if(workingDirectory != null){
 						IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory, inputFileLocation.removeLastSegments(1).addTrailingSeparator());
 						if(filePath != null)
-							value = filePath.toOSString();
+							value = filePath.toString();
 					}
 				}
 			}
@@ -109,7 +109,7 @@ public class CdtMacroSupplier extends CoreMacroSupplierBase {
 					if(workingDirectory != null){
 						IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory, outputFileLocation);
 						if(filePath != null)
-							value = filePath.toOSString();
+							value = filePath.toString();
 					}
 				}
 			}else if("OutputDirRelPath".equals(name)){	//$NON-NLS-1$
@@ -118,7 +118,7 @@ public class CdtMacroSupplier extends CoreMacroSupplierBase {
 					if(workingDirectory != null){
 						IPath filePath = ManagedBuildManager.calculateRelativePath(workingDirectory, outputFileLocation.removeLastSegments(1).addTrailingSeparator());
 						if(filePath != null)
-							value = filePath.toOSString();
+							value = filePath.toString();
 					}
 				}
 			}
@@ -389,7 +389,7 @@ public class CdtMacroSupplier extends CoreMacroSupplierBase {
 				macro = new BuildMacro(macroName,IBuildMacro.VALUE_TEXT,mngProj.getOwner().getName());
 			}
 			else if (VAR_PROJ_DIR_PATH.equals(macroName)) {
-				macro = new BuildMacro(macroName,IBuildMacro.VALUE_PATH_DIR,mngProj.getOwner().getLocation().toOSString());
+				macro = new BuildMacro(macroName,IBuildMacro.VALUE_PATH_DIR,mngProj.getOwner().getLocation().toString());
 			}
 			return macro;
 		}
@@ -399,7 +399,7 @@ public class CdtMacroSupplier extends CoreMacroSupplierBase {
 			wsp = ResourcesPlugin.getWorkspace();
 		ICdtVariable macro = null;
 		if (VAR_WORKSPACE_DIR_PATH.equals(macroName)) {
-			macro = new CdtVariable(macroName, ICdtVariable.VALUE_PATH_DIR, wsp.getRoot().getLocation().toOSString());
+			macro = new CdtVariable(macroName, ICdtVariable.VALUE_PATH_DIR, wsp.getRoot().getLocation().toString());
 		} else if (VAR_DIRECTORY_DELIMITER.equals(macroName)) {
 			if (isWin32()) {
 				macro = new CdtVariable(macroName, ICdtVariable.VALUE_TEXT, "\\"); //$NON-NLS-1$
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/InternalASTServiceProvider.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/InternalASTServiceProvider.java
index c223b70ad5..4a6da4124e 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/InternalASTServiceProvider.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/InternalASTServiceProvider.java
@@ -72,20 +72,20 @@ public class InternalASTServiceProvider implements IASTServiceProvider {
 
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IFile fileToParse) throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getLocation().toOSString(), fileToParse,
+		return getTranslationUnit(fileToParse.getLocation().toString(), fileToParse,
 				SavedCodeReaderFactory.getInstance(), null);
 	}
 
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IFile fileToParse, ICodeReaderFactory fileCreator)
 			throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getLocation().toOSString(), fileToParse, fileCreator, null);
+		return getTranslationUnit(fileToParse.getLocation().toString(), fileToParse, fileCreator, null);
 	}
 
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IFile fileToParse, ICodeReaderFactory fileCreator,
 			IParserConfiguration configuration) throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getLocation().toOSString(), fileToParse, fileCreator, configuration);
+		return getTranslationUnit(fileToParse.getLocation().toString(), fileToParse, fileCreator, configuration);
 	}
 
 	public IASTTranslationUnit getTranslationUnit(String filename, IResource infoProvider,
@@ -170,13 +170,13 @@ public class InternalASTServiceProvider implements IASTServiceProvider {
 	@Override
 	public IASTCompletionNode getCompletionNode(IStorage fileToParse, IProject project, int offset,
 			ICodeReaderFactory fileCreator) throws UnsupportedDialectException {
-		return getCompletionNode(fileToParse.getFullPath().toOSString(), project, offset, fileCreator);
+		return getCompletionNode(fileToParse.getFullPath().toString(), project, offset, fileCreator);
 	}
 
 	@Override
 	public IASTCompletionNode getCompletionNode(IFile fileToParse, int offset, ICodeReaderFactory fileCreator)
 			throws UnsupportedDialectException {
-		return getCompletionNode(fileToParse.getLocation().toOSString(), fileToParse, offset, fileCreator);
+		return getCompletionNode(fileToParse.getLocation().toString(), fileToParse, offset, fileCreator);
 	}
 
 	public IASTCompletionNode getCompletionNode(String filename, IResource infoProvider, int offset,
@@ -264,26 +264,26 @@ public class InternalASTServiceProvider implements IASTServiceProvider {
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IStorage fileToParse, IProject project,
 			ICodeReaderFactory fileCreator) throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getFullPath().toOSString(), project, fileCreator, null);
+		return getTranslationUnit(fileToParse.getFullPath().toString(), project, fileCreator, null);
 	}
 
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IStorage fileToParse, IProject project)
 			throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getFullPath().toOSString(), project, SavedCodeReaderFactory.getInstance(),
+		return getTranslationUnit(fileToParse.getFullPath().toString(), project, SavedCodeReaderFactory.getInstance(),
 				null);
 	}
 
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IFile fileToParse, boolean parseComments)
 			throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getLocation().toOSString(), fileToParse,
+		return getTranslationUnit(fileToParse.getLocation().toString(), fileToParse,
 				SavedCodeReaderFactory.getInstance(), null);
 	}
 
 	@Override
 	public IASTTranslationUnit getTranslationUnit(IFile fileToParse, ICodeReaderFactory fileCreator,
 			boolean parseComments) throws UnsupportedDialectException {
-		return getTranslationUnit(fileToParse.getLocation().toOSString(), fileToParse, fileCreator, null);
+		return getTranslationUnit(fileToParse.getLocation().toString(), fileToParse, fileCreator, null);
 	}
 }
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/PartialWorkingCopyCodeReaderFactory.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/PartialWorkingCopyCodeReaderFactory.java
index fecc6c1449..2409c02a13 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/PartialWorkingCopyCodeReaderFactory.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/PartialWorkingCopyCodeReaderFactory.java
@@ -52,7 +52,7 @@ public class PartialWorkingCopyCodeReaderFactory extends AbstractCodeReaderFacto
 	}
 
 	public CodeReader createCodeReaderForTranslationUnit(ITranslationUnit tu) {
-		return new CodeReader(tu.getPath().toOSString(), tu.getContents());
+		return new CodeReader(tu.getPath().toString(), tu.getContents());
 	}
 
 	protected CodeReader checkWorkingCopyThenCache(String path) {
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/SavedCodeReaderFactory.java b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/SavedCodeReaderFactory.java
index bf995f159e..07c32315e2 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/SavedCodeReaderFactory.java
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/dom/SavedCodeReaderFactory.java
@@ -84,7 +84,7 @@ public class SavedCodeReaderFactory extends AbstractCodeReaderFactory {
 	}
 
 	public CodeReader createCodeReaderForTranslationUnit(ITranslationUnit tu) {
-		return new CodeReader(tu.getResource().getLocation().toOSString(), tu.getContents());
+		return new CodeReader(tu.getResource().getLocation().toString(), tu.getContents());
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/Cygwin.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/Cygwin.java
index 49f3da0bc4..4e2fc74881 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/Cygwin.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/Cygwin.java
@@ -77,7 +77,7 @@ public class Cygwin {
 		String cygpathLocation = cygpathLocationCache.get(envPath);
 		if (cygpathLocation == null) {
 			IPath loc = PathUtil.findProgramLocation(CYGPATH, envPath);
-			cygpathLocation = loc != null ? loc.toOSString() : null;
+			cygpathLocation = loc != null ? loc.toString() : null;
 			cygpathLocationCache.put(envPath, cygpathLocation);
 		}
 		return cygpathLocation;
@@ -299,7 +299,7 @@ public class Cygwin {
 			IPath location = new Path(envCygwinHomeValue + "/bin/" + CYGWIN_DLL); //$NON-NLS-1$
 			if (location.toFile().exists()) {
 				// get rootValue from "rootValue\bin\cygwin1.dll"
-				rootValue = location.removeLastSegments(2).toOSString();
+				rootValue = location.removeLastSegments(2).toString();
 			}
 		}
 
@@ -308,7 +308,7 @@ public class Cygwin {
 			IPath location = PathUtil.findProgramLocation(CYGWIN_DLL, envPathValue);
 			if (location != null) {
 				// get rootValue from "rootValue\bin\cygwin1.dll"
-				rootValue = location.removeLastSegments(2).toOSString();
+				rootValue = location.removeLastSegments(2).toString();
 			}
 		}
 
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/MinGW.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/MinGW.java
index 7d516ee7df..a067a03ee5 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/MinGW.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/internal/core/MinGW.java
@@ -68,7 +68,7 @@ public class MinGW {
 		if (envMinGWHomeValue != null && !envMinGWHomeValue.isEmpty()) {
 			IPath mingwBinDir = new Path(envMinGWHomeValue + "\\bin"); //$NON-NLS-1$
 			if (mingwBinDir.toFile().isDirectory()) {
-				rootValue = mingwBinDir.removeLastSegments(1).toOSString();
+				rootValue = mingwBinDir.removeLastSegments(1).toString();
 			}
 		}
 
@@ -78,7 +78,7 @@ public class MinGW {
 			IPath installPath = new Path(Platform.getInstallLocation().getURL().getFile());
 			IPath mingwBinDir = installPath.append("mingw\\bin"); //$NON-NLS-1$
 			if (mingwBinDir.toFile().isDirectory()) {
-				rootValue = mingwBinDir.removeLastSegments(1).toOSString();
+				rootValue = mingwBinDir.removeLastSegments(1).toString();
 			}
 		}
 
@@ -151,7 +151,7 @@ public class MinGW {
 		if (rootValue == null) {
 			IPath mingwBinDir = new Path("C:\\MinGW"); //$NON-NLS-1$
 			if (mingwBinDir.toFile().isDirectory()) {
-				rootValue = mingwBinDir.toOSString();
+				rootValue = mingwBinDir.toString();
 			}
 		}
 
@@ -161,7 +161,7 @@ public class MinGW {
 	private static Optional<String> findMinGwInstallationLocation(String exeName, String envPath) {
 		IPath exeLocation = PathUtil.findProgramLocation(exeName, envPath);
 		if (exeLocation != null) {
-			return Optional.of(exeLocation.removeLastSegments(2).toOSString());
+			return Optional.of(exeLocation.removeLastSegments(2).toString());
 		}
 		return Optional.empty();
 	}
@@ -209,7 +209,7 @@ public class MinGW {
 		IPath installPath = new Path(Platform.getInstallLocation().getURL().getFile());
 		IPath installMsysBin = installPath.append("msys\\bin"); //$NON-NLS-1$
 		if (installMsysBin.toFile().isDirectory()) {
-			msysHome = installMsysBin.removeLastSegments(1).toOSString();
+			msysHome = installMsysBin.removeLastSegments(1).toString();
 		}
 
 		// Look under $MINGW_HOME
@@ -217,7 +217,7 @@ public class MinGW {
 			if (envMinGWHomeValue != null && !envMinGWHomeValue.isEmpty()) {
 				IPath minGwMsysBin = new Path(envMinGWHomeValue + "\\msys\\1.0\\bin"); //$NON-NLS-1$
 				if (minGwMsysBin.toFile().isDirectory()) {
-					msysHome = minGwMsysBin.removeLastSegments(1).toOSString();
+					msysHome = minGwMsysBin.removeLastSegments(1).toString();
 				}
 			}
 		}
@@ -270,7 +270,7 @@ public class MinGW {
 		if (msysHome == null) {
 			IPath minGwMsysBin = new Path("C:\\MinGW\\msys\\1.0\\bin"); //$NON-NLS-1$
 			if (minGwMsysBin.toFile().isDirectory()) {
-				msysHome = minGwMsysBin.removeLastSegments(1).toOSString();
+				msysHome = minGwMsysBin.removeLastSegments(1).toString();
 			}
 		}
 
@@ -278,7 +278,7 @@ public class MinGW {
 		if (msysHome == null) {
 			IPath defaultMsysBin = new Path("C:\\msys\\1.0\\bin"); //$NON-NLS-1$
 			if (defaultMsysBin.toFile().isDirectory()) {
-				msysHome = defaultMsysBin.removeLastSegments(1).toOSString();
+				msysHome = defaultMsysBin.removeLastSegments(1).toString();
 			}
 		}
 		return msysHome;
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CygPath.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CygPath.java
index 9b05377398..d6e888a46a 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CygPath.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/CygPath.java
@@ -125,7 +125,7 @@ public class CygPath {
 				ipath = ipath.makeAbsolute();
 				ipath = ipath.setDevice(drive.toString());
 			}
-			return ipath.toOSString();
+			return ipath.toString();
 		} finally {
 			if (reader != null) {
 				reader.close();
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultCygwinToolFactory.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultCygwinToolFactory.java
index 770c067daa..9f538f058f 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultCygwinToolFactory.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultCygwinToolFactory.java
@@ -35,7 +35,7 @@ public class DefaultCygwinToolFactory extends DefaultGnuToolFactory implements I
 		CygPath cygpath = null;
 		if (cygPathPath != null && !cygPathPath.isEmpty()) {
 			try {
-				cygpath = new CygPath(cygPathPath.toOSString());
+				cygpath = new CygPath(cygPathPath.toString());
 			} catch (IOException e1) {
 			}
 		}
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultGnuToolFactory.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultGnuToolFactory.java
index 7f31273bba..958f3d2776 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultGnuToolFactory.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/DefaultGnuToolFactory.java
@@ -43,7 +43,7 @@ public class DefaultGnuToolFactory implements IGnuToolFactory {
 		Addr2line addr2line = null;
 		if (addr2LinePath != null && !addr2LinePath.isEmpty()) {
 			try {
-				addr2line = new Addr2line(addr2LinePath.toOSString(), new String[0], path.toOSString(), environment);
+				addr2line = new Addr2line(addr2LinePath.toString(), new String[0], path.toString(), environment);
 			} catch (IOException e1) {
 			}
 		}
@@ -57,7 +57,7 @@ public class DefaultGnuToolFactory implements IGnuToolFactory {
 		CPPFilt cppfilt = null;
 		if (cppFiltPath != null && !cppFiltPath.isEmpty()) {
 			try {
-				cppfilt = new CPPFilt(cppFiltPath.toOSString(), new String[0], environment);
+				cppfilt = new CPPFilt(cppFiltPath.toString(), new String[0], environment);
 			} catch (IOException e2) {
 			}
 		}
@@ -72,7 +72,7 @@ public class DefaultGnuToolFactory implements IGnuToolFactory {
 		Objdump objdump = null;
 		if (objdumpPath != null && !objdumpPath.isEmpty()) {
 			try {
-				objdump = new Objdump(objdumpPath.toOSString(), objdumpArgs, path.toOSString(), environment);
+				objdump = new Objdump(objdumpPath.toString(), objdumpArgs, path.toString(), environment);
 			} catch (IOException e1) {
 			}
 		}
@@ -87,7 +87,7 @@ public class DefaultGnuToolFactory implements IGnuToolFactory {
 		NM nm = null;
 		if (nmPath != null && !nmPath.isEmpty()) {
 			try {
-				nm = new NM(nmPath.toOSString(), nmArgs, path.toOSString(), environment);
+				nm = new NM(nmPath.toString(), nmArgs, path.toString(), environment);
 			} catch (IOException e1) {
 			}
 		}
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryArchive64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryArchive64.java
index c37b477450..c56d1e207c 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryArchive64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryArchive64.java
@@ -34,7 +34,7 @@ public class PEBinaryArchive64 extends BinaryFile implements IBinaryArchive {
 
 	public PEBinaryArchive64(PEParser64 parser, IPath path) throws IOException {
 		super(parser, path, IBinaryFile.ARCHIVE);
-		try (AR ar = new AR(path.toOSString())) {
+		try (AR ar = new AR(path.toString())) {
 			// create the object just to check file type
 		}
 		children = new ArrayList<>(5);
@@ -49,7 +49,7 @@ public class PEBinaryArchive64 extends BinaryFile implements IBinaryArchive {
 			children.clear();
 			AR ar = null;
 			try {
-				ar = new AR(getPath().toOSString());
+				ar = new AR(getPath().toString());
 				AR.ARHeader[] headers = ar.getHeaders();
 				addArchiveMembers(headers, children);
 			} catch (IOException e) {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryObject64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryObject64.java
index 00eac1cce7..49a6474365 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryObject64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEBinaryObject64.java
@@ -102,9 +102,9 @@ public class PEBinaryObject64 extends BinaryObjectAdapter {
 		if (adapter.equals(PE64.class)) {
 			try {
 				if (header != null) {
-					return (T) new PE64(getPath().toOSString(), header.getObjectDataOffset());
+					return (T) new PE64(getPath().toString(), header.getObjectDataOffset());
 				}
-				return (T) new PE64(getPath().toOSString());
+				return (T) new PE64(getPath().toString());
 			} catch (IOException e) {
 			}
 		}
@@ -120,9 +120,9 @@ public class PEBinaryObject64 extends BinaryObjectAdapter {
 
 	protected PE64 getPE() throws IOException {
 		if (header != null) {
-			return new PE64(getPath().toOSString(), header.getObjectDataOffset());
+			return new PE64(getPath().toString(), header.getObjectDataOffset());
 		}
-		return new PE64(getPath().toOSString());
+		return new PE64(getPath().toString());
 	}
 
 	protected void loadAll() throws IOException {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
index acea09c599..56ecb87174 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
@@ -55,7 +55,7 @@ public class PEParser64 extends AbstractCExtension implements IBinaryParser {
 			}
 			// the hints may have to small, keep on trying.
 			if (attribute == null) {
-				attribute = PE64.getAttribute(path.toOSString());
+				attribute = PE64.getAttribute(path.toString());
 			}
 
 			if (attribute != null) {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
index 04602d1cdf..24c4e7c6c0 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
@@ -694,7 +694,7 @@ public class DwarfReader extends Dwarf implements ISymbolReader, ICompileOptions
 
 		// This convert the path to canonical path (but not necessarily absolute, which
 		// is different from java.io.File.getCanonicalPath()).
-		fullName = pa.toOSString();
+		fullName = pa.toString();
 
 		if (!m_fileCollection.contains(fullName))
 			m_fileCollection.add(fullName);
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryArchive.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryArchive.java
index a4affdd11c..bfa0fc23f1 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryArchive.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryArchive.java
@@ -34,7 +34,7 @@ public class ElfBinaryArchive extends BinaryFile implements IBinaryArchive {
 
 	public ElfBinaryArchive(IBinaryParser parser, IPath path) throws IOException {
 		super(parser, path, IBinaryFile.ARCHIVE);
-		try (AR ar = new AR(path.toOSString())) {
+		try (AR ar = new AR(path.toString())) {
 			// create the object just to check file type
 		}
 		children = new ArrayList<>(5);
@@ -46,7 +46,7 @@ public class ElfBinaryArchive extends BinaryFile implements IBinaryArchive {
 			children.clear();
 			AR ar = null;
 			try {
-				ar = new AR(getPath().toOSString());
+				ar = new AR(getPath().toString());
 				AR.ARHeader[] headers = ar.getHeaders();
 				IBinaryObject[] bobjs = createArchiveMembers(headers);
 				children.addAll(Arrays.asList(bobjs));
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryObject.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryObject.java
index a60d9a048d..99603f83dd 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryObject.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfBinaryObject.java
@@ -107,7 +107,7 @@ public class ElfBinaryObject extends BinaryObjectAdapter {
 		if (header != null) {
 			return new ElfHelper(header.getArchiveName(), header.getObjectDataOffset());
 		}
-		return new ElfHelper(getPath().toOSString());
+		return new ElfHelper(getPath().toString());
 	}
 
 	protected void loadAll() throws IOException {
@@ -182,7 +182,7 @@ public class ElfBinaryObject extends BinaryObjectAdapter {
 	public <T> T getAdapter(Class<T> adapter) {
 		if (adapter.equals(Elf.class)) {
 			try {
-				return (T) new Elf(getPath().toOSString());
+				return (T) new Elf(getPath().toString());
 			} catch (IOException e) {
 			}
 		}
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
index 0e4da98b04..c6c594303e 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
@@ -134,7 +134,7 @@ public class ElfParser extends AbstractCExtension implements IBinaryParser {
 				// continue, the array was to small.
 			}
 		}
-		return Elf.getAttributes(path.toOSString());
+		return Elf.getAttributes(path.toString());
 	}
 
 	private static boolean hasInterpProgramHeader(byte[] hints, IPath path) throws IOException {
@@ -154,7 +154,7 @@ public class ElfParser extends AbstractCExtension implements IBinaryParser {
 				e_phnumOffset = 0x38;
 				break;
 			default:
-				CCorePlugin.log(IStatus.WARNING, "Unknown ELF header class in file: " + path.toOSString()); //$NON-NLS-1$
+				CCorePlugin.log(IStatus.WARNING, "Unknown ELF header class in file: " + path.toString()); //$NON-NLS-1$
 				return false;
 			}
 			if (e_phnumOffset + 2 < hints.length) {
@@ -185,7 +185,7 @@ public class ElfParser extends AbstractCExtension implements IBinaryParser {
 	}
 
 	private static PHdr[] getPHdrs(IPath path) throws IOException {
-		try (Elf elf = new Elf(path.toOSString())) {
+		try (Elf elf = new Elf(path.toString())) {
 			return elf.getPHdrs();
 		}
 	}
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryArchive64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryArchive64.java
index 3a09e1b258..9f3cedd676 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryArchive64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryArchive64.java
@@ -33,7 +33,7 @@ public class MachOBinaryArchive64 extends BinaryFile implements IBinaryArchive {
 
 	public MachOBinaryArchive64(IBinaryParser parser, IPath p) throws IOException {
 		super(parser, p, IBinaryFile.ARCHIVE);
-		try (AR ar = new AR(p.toOSString())) {
+		try (AR ar = new AR(p.toString())) {
 			// create the object just to check file type
 
 		}
@@ -49,7 +49,7 @@ public class MachOBinaryArchive64 extends BinaryFile implements IBinaryArchive {
 			children.clear();
 			AR ar = null;
 			try {
-				ar = new AR(getPath().toOSString());
+				ar = new AR(getPath().toString());
 				AR.ARHeader[] headers = ar.getHeaders();
 				for (int i = 0; i < headers.length; i++) {
 					IBinaryObject bin = new MachOBinaryObject64(getBinaryParser(), getPath(), headers[i]);
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryObject64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryObject64.java
index f72e50ccfd..69ef5c5a51 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryObject64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOBinaryObject64.java
@@ -97,9 +97,9 @@ public class MachOBinaryObject64 extends BinaryObjectAdapter {
 		IPath path = getPath();
 		if (path != null) {
 			if (header != null) {
-				return new MachOHelper64(path.toOSString(), header.getObjectDataOffset());
+				return new MachOHelper64(path.toString(), header.getObjectDataOffset());
 			} else {
-				return new MachOHelper64(path.toOSString());
+				return new MachOHelper64(path.toString());
 			}
 		}
 		return null;
@@ -405,7 +405,7 @@ public class MachOBinaryObject64 extends BinaryObjectAdapter {
 	public <T> T getAdapter(Class<T> adapter) {
 		if (adapter.equals(MachO64.class)) {
 			try {
-				return (T) new MachO64(getPath().toOSString());
+				return (T) new MachO64(getPath().toString());
 			} catch (IOException e) {
 			}
 		}
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOParser64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOParser64.java
index 348813add1..8c2b6ead84 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOParser64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/macho/parser/MachOParser64.java
@@ -55,7 +55,7 @@ public class MachOParser64 extends AbstractCExtension implements IBinaryParser {
 
 			//Take a second run at it if the data array failed.
 			if (attribute == null) {
-				attribute = MachO64.getAttributes(path.toOSString());
+				attribute = MachO64.getAttributes(path.toString());
 			}
 
 			if (attribute != null) {
@@ -103,7 +103,7 @@ public class MachOParser64 extends AbstractCExtension implements IBinaryParser {
 		CPPFilt cppfilt = null;
 		if (cppFiltPath != null && !cppFiltPath.isEmpty()) {
 			try {
-				cppfilt = new CPPFilt(cppFiltPath.toOSString());
+				cppfilt = new CPPFilt(cppFiltPath.toString());
 			} catch (IOException e2) {
 			}
 		}
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryArchive.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryArchive.java
index 18cebb87df..21a3a7ee4b 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryArchive.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryArchive.java
@@ -39,7 +39,7 @@ public class SOMBinaryArchive extends BinaryFile implements IBinaryArchive {
 	 */
 	public SOMBinaryArchive(IBinaryParser parser, IPath path) throws IOException {
 		super(parser, path, IBinaryFile.ARCHIVE);
-		try (AR ar = new AR(path.toOSString())) {
+		try (AR ar = new AR(path.toString())) {
 			// create the object just to check file type
 		}
 		children = new ArrayList<>(5);
@@ -51,7 +51,7 @@ public class SOMBinaryArchive extends BinaryFile implements IBinaryArchive {
 			children.clear();
 			AR ar = null;
 			try {
-				ar = new AR(getPath().toOSString());
+				ar = new AR(getPath().toString());
 				AR.ARHeader[] headers = ar.getHeaders();
 				for (int i = 0; i < headers.length; i++) {
 					IBinaryObject bin = new SOMBinaryObject(getBinaryParser(), getPath(), headers[i]);
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryObject.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryObject.java
index 646b8f5679..0f49ea8310 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryObject.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMBinaryObject.java
@@ -127,9 +127,9 @@ public class SOMBinaryObject extends BinaryObjectAdapter {
 
 	protected SOM getSOM() throws IOException {
 		if (header != null) {
-			return new SOM(getPath().toOSString(), header.getObjectDataOffset());
+			return new SOM(getPath().toString(), header.getObjectDataOffset());
 		}
-		return new SOM(getPath().toOSString());
+		return new SOM(getPath().toString());
 	}
 
 	protected void loadAll() throws IOException {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMParser.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMParser.java
index 15726fa12a..2d7abe9732 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMParser.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/som/parser/SOMParser.java
@@ -52,7 +52,7 @@ public class SOMParser extends AbstractCExtension implements IBinaryParser {
 
 			//Take a second run at it if the data array failed.
 			if (attribute == null) {
-				attribute = SOM.getAttributes(path.toOSString());
+				attribute = SOM.getAttributes(path.toString());
 			}
 
 			if (attribute != null) {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFF32Parser.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFF32Parser.java
index 5b9cf431d1..130d87c464 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFF32Parser.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFF32Parser.java
@@ -53,7 +53,7 @@ public class XCOFF32Parser extends AbstractCExtension implements IBinaryParser {
 
 			//Take a second run at it if the data array failed.
 			if (attribute == null) {
-				attribute = XCoff32.getAttributes(path.toOSString());
+				attribute = XCoff32.getAttributes(path.toString());
 			}
 
 			if (attribute != null) {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryArchive.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryArchive.java
index d0cdf5f729..2494bb5b86 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryArchive.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryArchive.java
@@ -39,7 +39,7 @@ public class XCOFFBinaryArchive extends BinaryFile implements IBinaryArchive {
 	 */
 	public XCOFFBinaryArchive(IBinaryParser parser, IPath path) throws IOException {
 		super(parser, path, IBinaryFile.ARCHIVE);
-		try (AR ar = new AR(path.toOSString())) {
+		try (AR ar = new AR(path.toString())) {
 			// create the object just to check file type
 		}
 		children = new ArrayList<>(5);
@@ -51,7 +51,7 @@ public class XCOFFBinaryArchive extends BinaryFile implements IBinaryArchive {
 			children.clear();
 			AR ar = null;
 			try {
-				ar = new AR(getPath().toOSString());
+				ar = new AR(getPath().toString());
 				AR.MemberHeader[] headers = ar.getHeaders();
 				for (int i = 0; i < headers.length; i++) {
 					IBinaryObject bin = new XCOFFBinaryObject(getBinaryParser(), getPath(), headers[i]);
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryObject.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryObject.java
index da955ee9fb..51ce5d083f 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryObject.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/xcoff/parser/XCOFFBinaryObject.java
@@ -125,9 +125,9 @@ public class XCOFFBinaryObject extends BinaryObjectAdapter {
 
 	protected XCoff32 getXCoff32() throws IOException {
 		if (header != null) {
-			return new XCoff32(getPath().toOSString(), header.getObjectDataOffset());
+			return new XCoff32(getPath().toString(), header.getObjectDataOffset());
 		}
-		return new XCoff32(getPath().toOSString());
+		return new XCoff32(getPath().toString());
 	}
 
 	protected void loadAll() throws IOException {
diff --git a/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/ShowInDOMViewAction.java b/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/ShowInDOMViewAction.java
index df477f2d7f..5a802c84f5 100644
--- a/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/ShowInDOMViewAction.java
+++ b/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/DOMAST/ShowInDOMViewAction.java
@@ -140,19 +140,19 @@ public class ShowInDOMViewAction extends ActionDelegate implements IEditorAction
 		}
 		IFile file = ResourceUtil.getFile(input);
 		if (file != null) {
-			return file.getLocation().toOSString();
+			return file.getLocation().toString();
 		}
 		if (input instanceof IPathEditorInput) {
 			IPath location = ((IPathEditorInput) input).getPath();
 			if (location != null) {
-				return location.toOSString();
+				return location.toString();
 			}
 		}
 		ILocationProvider locationProvider = input.getAdapter(ILocationProvider.class);
 		if (locationProvider != null) {
 			IPath location = locationProvider.getPath(input);
 			if (location != null) {
-				return location.toOSString();
+				return location.toString();
 			}
 		}
 		return null;
diff --git a/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestProcesses.java b/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestProcesses.java
index f57c9a2ffc..07bdf41608 100644
--- a/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestProcesses.java
+++ b/core/org.eclipse.cdt.ui.tests/src/org/eclipse/cdt/ui/tests/templateengine/TestProcesses.java
@@ -32,7 +32,7 @@ import org.eclipse.core.runtime.Platform;
 
 public class TestProcesses extends BaseTestCase {
 	private static final String workspaceLocation = ResourcesPlugin.getWorkspace().getRoot().getRawLocation()
-			.toOSString();
+			.toString();
 	private static final String PROJECT_NAME = "TemplateEngineTestsProject"; //$NON-NLS-1$
 	private static final String SOURCE_FOLDER = "Source"; //$NON-NLS-1$
 	private static final String FILE_NAME = "File"; //$NON-NLS-1$
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/CallHierarchyAcrossProjectsTest.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/CallHierarchyAcrossProjectsTest.java
index 1933fd6fe4..407a3d581b 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/CallHierarchyAcrossProjectsTest.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/callhierarchy/CallHierarchyAcrossProjectsTest.java
@@ -48,8 +48,8 @@ public class CallHierarchyAcrossProjectsTest extends CallHierarchyBaseTest {
 		CCorePlugin.getIndexManager().setIndexerId(fCProject2, IPDOMManager.ID_FAST_INDEXER);
 		waitForIndexer(fCProject2);
 		fIndex = CCorePlugin.getIndexManager().getIndex(new ICProject[] { fCProject, fCProject2 });
-		TestScannerProvider.sIncludes = new String[] { fCProject.getProject().getLocation().toOSString(),
-				fCProject2.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fCProject.getProject().getLocation().toString(),
+				fCProject2.getProject().getLocation().toString() };
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/includebrowser/BasicIncludeBrowserTest.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/includebrowser/BasicIncludeBrowserTest.java
index f21ca23eaf..1ad7b222e8 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/includebrowser/BasicIncludeBrowserTest.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/includebrowser/BasicIncludeBrowserTest.java
@@ -45,7 +45,7 @@ public class BasicIncludeBrowserTest extends IncludeBrowserBaseTest {
 	// #include "user.h"
 
 	public void testSimpleInclusion() throws Exception {
-		TestScannerProvider.sIncludes = new String[] { getProject().getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { getProject().getProject().getLocation().toString() };
 
 		StringBuilder[] contents = getContentsForTest(1);
 		IProject project = getProject().getProject();
@@ -80,7 +80,7 @@ public class BasicIncludeBrowserTest extends IncludeBrowserBaseTest {
 		try {
 			fIndex = CCorePlugin.getIndexManager().getIndex(new ICProject[] { getProject(), op });
 
-			TestScannerProvider.sIncludes = new String[] { op.getProject().getLocation().toOSString() };
+			TestScannerProvider.sIncludes = new String[] { op.getProject().getLocation().toString() };
 
 			StringBuilder[] contents = getContentsForTest(1);
 			IFile user = createFile(op.getProject(), "user.h", "");
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/RefactoringTestBase.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/RefactoringTestBase.java
index b353571122..b4c0a2ebbe 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/RefactoringTestBase.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/RefactoringTestBase.java
@@ -94,7 +94,7 @@ public abstract class RefactoringTestBase extends BaseTestCase {
 						IPDOMManager.ID_NO_INDEXER)
 				: CProjectHelper.createCProject(getName() + System.currentTimeMillis(), "bin",
 						IPDOMManager.ID_NO_INDEXER);
-		TestScannerProvider.sLocalIncludes = new String[] { cproject.getProject().getLocation().toOSString() };
+		TestScannerProvider.sLocalIncludes = new String[] { cproject.getProject().getLocation().toString() };
 
 		Bundle bundle = CTestPlugin.getDefault().getBundle();
 		CharSequence[] testData = TestSourceReader.getContentsForTest(bundle, "ui", getClass(), getName(), 0);
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludesTestBase.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludesTestBase.java
index 880882dd20..7fbdb9960b 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludesTestBase.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/refactoring/includes/IncludesTestBase.java
@@ -91,7 +91,7 @@ public abstract class IncludesTestBase extends BaseTestCase {
 				: CProjectHelper.createCProject(getName() + System.currentTimeMillis(), "bin",
 						IPDOMManager.ID_NO_INDEXER);
 		IProject project = cproject.getProject();
-		TestScannerProvider.sLocalIncludes = new String[] { project.getLocation().toOSString() };
+		TestScannerProvider.sLocalIncludes = new String[] { project.getLocation().toString() };
 		QualifiedName scannerInfoProviderName = new QualifiedName(CCorePlugin.PLUGIN_ID, SCANNER_INFO_PROVIDER2_NAME);
 		project.setSessionProperty(scannerInfoProviderName, new TestScannerProvider());
 
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/SearchTestBase.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/SearchTestBase.java
index 356274bc60..40e4727cbe 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/SearchTestBase.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/search/SearchTestBase.java
@@ -110,8 +110,7 @@ public abstract class SearchTestBase extends BaseUITestCase {
 			CCorePlugin.getIndexManager().reindex(fReferencedCProject);
 			waitForIndexer(fReferencedCProject);
 
-			TestScannerProvider.sIncludes = new String[] {
-					fReferencedCProject.getProject().getLocation().toOSString() };
+			TestScannerProvider.sIncludes = new String[] { fReferencedCProject.getProject().getLocation().toString() };
 
 			fSourceContents = fTestData[1].toString();
 			fSourceFile = TestSourceReader.createFile(fCProject.getProject(), new Path("refs.cpp"), fSourceContents);
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/BaseSelectionTestsIndexer.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/BaseSelectionTestsIndexer.java
index dd974ef336..c81283330d 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/BaseSelectionTestsIndexer.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/BaseSelectionTestsIndexer.java
@@ -112,7 +112,7 @@ public abstract class BaseSelectionTestsIndexer extends BaseSelectionTests {
 
 		IPath location = ResourceHelper.createTemporaryFolder().append(fileName);
 
-		File linkFile = new File(location.toOSString());
+		File linkFile = new File(location.toString());
 		if (linkFile.exists()) {
 			linkFile.delete();
 		}
@@ -140,7 +140,7 @@ public abstract class BaseSelectionTestsIndexer extends BaseSelectionTests {
 		IProject project = fCProject.getProject();
 		IFolder linkedFolder = project.getFolder(folderName);
 		IPath folderLocation = new Path(
-				project.getLocation().toOSString() + File.separator + folderName + "_this_is_linked"); //$NON-NLS-1$
+				project.getLocation().toString() + File.separator + folderName + "_this_is_linked"); //$NON-NLS-1$
 		IFolder actualFolder = project.getFolder(folderName + "_this_is_linked"); //$NON-NLS-1$
 		if (!actualFolder.exists())
 			actualFolder.create(true, true, monitor);
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionIndexerTests.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionIndexerTests.java
index af240ce66f..a625c0fcb9 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionIndexerTests.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionIndexerTests.java
@@ -1281,7 +1281,7 @@ public class CPPSelectionIndexerTests extends BaseSelectionTestsIndexer {
 		assertTrue(def instanceof IASTName);
 		assertEquals("func", def.toString());
 		IASTFileLocation location = def.getFileLocation();
-		assertEquals(hfile.getLocation().toOSString(), location.getFileName());
+		assertEquals(hfile.getLocation().toString(), location.getFileName());
 		assertEquals(hoffset, location.getNodeOffset());
 	}
 
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionNoIndexerTests.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionNoIndexerTests.java
index e1fd71660a..66c30db9e0 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionNoIndexerTests.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CPPSelectionNoIndexerTests.java
@@ -99,7 +99,7 @@ public class CPPSelectionNoIndexerTests extends BaseSelectionTests {
 		project = cPrj.getProject();
 
 		IPath pathLoc = CCorePlugin.getDefault().getStateLocation();
-		File indexFile = new File(pathLoc.append(INDEX_FILE_ID + ".index").toOSString()); //$NON-NLS-1$
+		File indexFile = new File(pathLoc.append(INDEX_FILE_ID + ".index").toString()); //$NON-NLS-1$
 		if (indexFile.exists())
 			indexFile.delete();
 		assertNotNull("Unable to create project"); //$NON-NLS-1$
@@ -140,7 +140,7 @@ public class CPPSelectionNoIndexerTests extends BaseSelectionTests {
 
 		IPath location = ResourceHelper.createTemporaryFolder().append(fileName);
 
-		File linkFile = new File(location.toOSString());
+		File linkFile = new File(location.toString());
 		if (!linkFile.exists()) {
 			linkFile.createNewFile();
 		}
@@ -162,7 +162,7 @@ public class CPPSelectionNoIndexerTests extends BaseSelectionTests {
 	protected IFile importFileInsideLinkedFolder(String fileName, String contents, String folderName) throws Exception {
 		IFolder linkedFolder = project.getFolder(folderName);
 		IPath folderLocation = new Path(
-				project.getLocation().toOSString() + File.separator + folderName + "_this_is_linked"); //$NON-NLS-1$
+				project.getLocation().toString() + File.separator + folderName + "_this_is_linked"); //$NON-NLS-1$
 		IFolder actualFolder = project.getFolder(folderName + "_this_is_linked"); //$NON-NLS-1$
 		if (!actualFolder.exists())
 			actualFolder.create(true, true, monitor);
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CSelectionNoIndexerTests.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CSelectionNoIndexerTests.java
index 3aae00459b..b1480bebd3 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CSelectionNoIndexerTests.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/selection/CSelectionNoIndexerTests.java
@@ -121,7 +121,7 @@ public class CSelectionNoIndexerTests extends BaseSelectionTests {
 
 		IPath location = ResourceHelper.createTemporaryFolder().append(fileName);
 
-		File linkFile = new File(location.toOSString());
+		File linkFile = new File(location.toString());
 		assertFalse(linkFile.exists());
 		linkFile.createNewFile();
 
@@ -142,7 +142,7 @@ public class CSelectionNoIndexerTests extends BaseSelectionTests {
 	protected IFile importFileInsideLinkedFolder(String fileName, String contents, String folderName) throws Exception {
 		IFolder linkedFolder = project.getFolder(folderName);
 		IPath folderLocation = new Path(
-				project.getLocation().toOSString() + File.separator + folderName + "_this_is_linked"); //$NON-NLS-1$
+				project.getLocation().toString() + File.separator + folderName + "_this_is_linked"); //$NON-NLS-1$
 		IFolder actualFolder = project.getFolder(folderName + "_this_is_linked"); //$NON-NLS-1$
 		if (!actualFolder.exists())
 			actualFolder.create(true, true, monitor);
@@ -172,9 +172,9 @@ public class CSelectionNoIndexerTests extends BaseSelectionTests {
 		//Obtain file handle
 		IFile file = project.getProject().getFile(fileName);
 
-		IPath location = new Path(folder.getLocation().toOSString() + File.separator + fileName);
+		IPath location = new Path(folder.getLocation().toString() + File.separator + fileName);
 
-		File linkFile = new File(location.toOSString());
+		File linkFile = new File(location.toString());
 		if (!linkFile.exists()) {
 			linkFile.createNewFile();
 		}
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/typehierarchy/TypeHierarchyAcrossProjectsTest.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/typehierarchy/TypeHierarchyAcrossProjectsTest.java
index 3633488b15..1fc1c7e62e 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/typehierarchy/TypeHierarchyAcrossProjectsTest.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/typehierarchy/TypeHierarchyAcrossProjectsTest.java
@@ -51,8 +51,8 @@ public class TypeHierarchyAcrossProjectsTest extends TypeHierarchyBaseTest {
 
 		CCorePlugin.getIndexManager().reindex(fCProject2);
 		fIndex = CCorePlugin.getIndexManager().getIndex(new ICProject[] { fCProject, fCProject2 });
-		TestScannerProvider.sIncludes = new String[] { fCProject.getProject().getLocation().toOSString(),
-				fCProject2.getProject().getLocation().toOSString() };
+		TestScannerProvider.sIncludes = new String[] { fCProject.getProject().getLocation().toString(),
+				fCProject2.getProject().getLocation().toString() };
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/wizards/settingswizards/SettingsImportExportTest.java b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/wizards/settingswizards/SettingsImportExportTest.java
index a168a126db..f625df1066 100644
--- a/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/wizards/settingswizards/SettingsImportExportTest.java
+++ b/core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/wizards/settingswizards/SettingsImportExportTest.java
@@ -79,7 +79,7 @@ public class SettingsImportExportTest extends BaseUITestCase {
 
 	private static String getFilePath(String fileName) {
 		IPath workspaceLocation = ResourcesPlugin.getWorkspace().getRoot().getLocation();
-		return workspaceLocation.toOSString() + IPath.SEPARATOR + fileName;
+		return workspaceLocation.toString() + IPath.SEPARATOR + fileName;
 	}
 
 	private void setUpProjectSettings(ICProject cProject) throws Exception {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/codemanipulation/InclusionContext.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/codemanipulation/InclusionContext.java
index 97fc167b59..cafc4aa83f 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/codemanipulation/InclusionContext.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/codemanipulation/InclusionContext.java
@@ -88,7 +88,7 @@ public class InclusionContext {
 	public IPath resolveInclude(IncludeInfo include) {
 		IPath path = fIncludeResolutionCache.get(include);
 		if (path == null) {
-			String directory = fCurrentDirectory == null ? null : fCurrentDirectory.toOSString();
+			String directory = fCurrentDirectory == null ? null : fCurrentDirectory.toString();
 			String filePath = CPreprocessor.getAbsoluteInclusionPath(include.getName(), directory);
 			if (filePath != null) {
 				path = new Path(filePath);
@@ -128,7 +128,7 @@ public class InclusionContext {
 		IncludeInfo include = fInverseIncludeResolutionCache.get(fullPath);
 		if (include != null)
 			return include;
-		String headerLocation = fullPath.toOSString();
+		String headerLocation = fullPath.toString();
 		String shortestInclude = null;
 		boolean isSystem = false;
 		for (IncludeSearchPathElement pathElement : fIncludeSearchPath.getElements()) {
@@ -162,7 +162,7 @@ public class InclusionContext {
 		IncludeInfo include = fInverseIncludeResolutionCache.get(fullPath);
 		if (include != null)
 			return include;
-		String headerLocation = fullPath.toOSString();
+		String headerLocation = fullPath.toString();
 		String shortestInclude = null;
 		for (IncludeSearchPathElement pathElement : fIncludeSearchPath.getElements()) {
 			if (isSystem && pathElement.isForQuoteIncludesOnly())
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContext.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContext.java
index bb552fffa2..bdbfe72943 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContext.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/template/c/FileTemplateContext.java
@@ -107,7 +107,7 @@ public class FileTemplateContext extends TemplateContext {
 		setVariable(FileTemplateContextType.FILENAME, file.getName());
 		setVariable(FileTemplateContextType.FILEBASE, new Path(file.getName()).removeFileExtension().lastSegment());
 		IPath location = file.getLocation();
-		setVariable(FileTemplateContextType.FILELOCATION, location != null ? location.toOSString() : ""); //$NON-NLS-1$
+		setVariable(FileTemplateContextType.FILELOCATION, location != null ? location.toString() : ""); //$NON-NLS-1$
 		setVariable(FileTemplateContextType.FILEPATH, file.getFullPath().toString());
 		setVariable(FileTemplateContextType.PROJECTNAME, file.getProject().getName());
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/Resources.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/Resources.java
index 583368e9d3..6526f49eae 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/Resources.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/corext/util/Resources.java
@@ -181,7 +181,7 @@ public class Resources {
 		for (int i = 0; i < resources.length; i++) {
 			IPath location = resources[i].getLocation();
 			if (location != null)
-				result.add(location.toOSString());
+				result.add(location.toString());
 		}
 		return result.toArray(new String[result.size()]);
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsoleManager.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsoleManager.java
index 9e1dc20db1..b06b06cc08 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsoleManager.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/BuildConsoleManager.java
@@ -527,7 +527,7 @@ public class BuildConsoleManager implements IBuildConsoleManager, IResourceChang
 	public String getDefaultConsoleLogLocation(IProject project) {
 		IPath defaultLogLocation = CUIPlugin.getDefault().getStateLocation()
 				.append(project.getName() + PROJECT_LOG_EXT);
-		return defaultLogLocation.toOSString();
+		return defaultLogLocation.toString();
 	}
 
 	/**
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/GlobalBuildConsoleManager.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/GlobalBuildConsoleManager.java
index 785779f294..862f38f193 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/GlobalBuildConsoleManager.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/buildconsole/GlobalBuildConsoleManager.java
@@ -147,7 +147,7 @@ public class GlobalBuildConsoleManager extends BuildConsoleManager {
 	 */
 	public static String getDefaultConsoleLogLocation() {
 		IPath defaultLogLocation = CUIPlugin.getDefault().getStateLocation().append(GLOBAL_LOG_FILE);
-		return defaultLogLocation.toOSString();
+		return defaultLogLocation.toString();
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java
index 9d93a813d9..494dc73431 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java
@@ -971,7 +971,7 @@ public class CView extends ViewPart
 					ICElement e = (ICElement) o;
 					IResource res = e.getResource();
 					if (res != null && res.getLocation() != null) {
-						elementMem.putString(TAG_PATH, res.getLocation().toOSString());
+						elementMem.putString(TAG_PATH, res.getLocation().toString());
 					}
 				}
 			}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CopyAction.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CopyAction.java
index 81df97c75f..3787d26e95 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CopyAction.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CopyAction.java
@@ -116,7 +116,7 @@ public class CopyAction extends SelectionListenerAction {
 			IPath location = resources[i].getLocation();
 			// location may be null. See bug 29491.
 			if (location != null)
-				fileNames[actualLength++] = location.toOSString();
+				fileNames[actualLength++] = location.toString();
 			if (i > 0)
 				buf.append("\n"); //$NON-NLS-1$
 			buf.append(resources[i].getName());
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPElementLabelProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPElementLabelProvider.java
index 118cbc9819..2e87af228b 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPElementLabelProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPElementLabelProvider.java
@@ -281,12 +281,12 @@ class CPElementLabelProvider extends LabelProvider implements IColorProvider {
 				if (endPath != null) {
 					path = path.append(endPath);
 				}
-				str.append(path.makeRelative().toOSString());
+				str.append(path.makeRelative().toString());
 			} else {
 				//				str.append("From contribution ");
 				IPathEntryContainer container;
 				if (endPath != null) {
-					str.append(endPath.toOSString());
+					str.append(endPath.toString());
 				}
 				str.append(" - ("); //$NON-NLS-1$
 				try {
@@ -304,9 +304,9 @@ class CPElementLabelProvider extends LabelProvider implements IColorProvider {
 				if (endPath != null) {
 					path = path.append(endPath);
 				}
-				str.insert(0, path.toOSString());
+				str.insert(0, path.toString());
 			} else if (endPath != null) {
-				str.insert(0, endPath.toOSString());
+				str.insert(0, endPath.toString());
 			}
 		}
 
@@ -315,14 +315,14 @@ class CPElementLabelProvider extends LabelProvider implements IColorProvider {
 	private String getPathString(IPath path, boolean isExternal) {
 		//		if (ArchiveFileFilter.isArchivePath(path)) {
 		//			IPath appendedPath = path.removeLastSegments(1);
-		//			String appended = isExternal ? appendedPath.toOSString() :
+		//			String appended = isExternal ? appendedPath.toString() :
 		// appendedPath.makeRelative().toString();
 		//			return
 		// CPathEntryMessages.getFormattedString("CPListLabelProvider.twopart",
 		// //$NON-NLS-1$
 		//					new String[] { path.lastSegment(), appended});
 		//		} else {
-		return isExternal ? path.toOSString() : path.makeRelative().toString();
+		return isExternal ? path.toString() : path.makeRelative().toString();
 		//		}
 	}
 
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPage.java
index d74d085171..d0a4a87e0a 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPage.java
@@ -898,7 +898,7 @@ public class CPathIncludeSymbolEntryPage extends CPathIncludeSymbolEntryBasePage
 		} else {
 			dialog = new SelectPathInputDialog(getShell(), CPathEntryMessages.IncludeSymbolEntryPage_editExternal_title,
 					CPathEntryMessages.IncludeSymbolEntryPage_editExternal_message,
-					((IPath) existing.getAttribute(CPElement.INCLUDE)).toOSString(), null);
+					((IPath) existing.getAttribute(CPElement.INCLUDE)).toString(), null);
 		}
 		String newItem = null;
 		if (dialog.open() == Window.OK) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPerFilePage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPerFilePage.java
index d819663848..663c89a86c 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPerFilePage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathIncludeSymbolEntryPerFilePage.java
@@ -953,7 +953,7 @@ public class CPathIncludeSymbolEntryPerFilePage extends CPathIncludeSymbolEntryB
 		} else {
 			dialog = new SelectPathInputDialog(getShell(), CPathEntryMessages.IncludeSymbolEntryPage_editExternal_title,
 					CPathEntryMessages.IncludeSymbolEntryPage_editExternal_message,
-					((IPath) existing.getAttribute(CPElement.INCLUDE)).toOSString(), null);
+					((IPath) existing.getAttribute(CPElement.INCLUDE)).toString(), null);
 		}
 		String newItem = null;
 		if (dialog.open() == Window.OK) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathLibraryEntryPage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathLibraryEntryPage.java
index ebbe97dcee..41d03606d7 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathLibraryEntryPage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/CPathLibraryEntryPage.java
@@ -470,7 +470,7 @@ public class CPathLibraryEntryPage extends CPathBasePage {
 			IPath path = filterPath.append(fileNames[i]).makeAbsolute();
 			elems[i] = newCPLibraryElement(path);
 		}
-		//fDialogSettings.put(IUIConstants.DIALOGSTORE_LASTEXTJAR, filterPath.toOSString());
+		//fDialogSettings.put(IUIConstants.DIALOGSTORE_LASTEXTJAR, filterPath.toString());
 
 		return elems;
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/SourceAttachmentBlock.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/SourceAttachmentBlock.java
index b1d124d1d7..2b48686f8d 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/SourceAttachmentBlock.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dialogs/cpaths/SourceAttachmentBlock.java
@@ -282,7 +282,7 @@ public class SourceAttachmentBlock {
 		IPath resolvedPath = getResolvedPath(new Path(path));
 		if (resolvedPath != null) {
 			if (osPath) {
-				return resolvedPath.toOSString();
+				return resolvedPath.toString();
 			}
 			return resolvedPath.toString();
 		}
@@ -339,7 +339,7 @@ public class SourceAttachmentBlock {
 		FileDialog dialog = new FileDialog(getShell());
 		dialog.setText(CPathEntryMessages.SourceAttachmentBlock_extjardialog_text);
 		dialog.setFilterExtensions(new String[] { "*.jar;*.zip" }); //$NON-NLS-1$
-		dialog.setFilterPath(currPath.toOSString());
+		dialog.setFilterPath(currPath.toString());
 		String res = dialog.open();
 		if (res != null) {
 			return new Path(res).makeAbsolute();
@@ -358,7 +358,7 @@ public class SourceAttachmentBlock {
 
 		DirectoryDialog dialog = new DirectoryDialog(getShell());
 		dialog.setText(CPathEntryMessages.SourceAttachmentBlock_extfolderdialog_text);
-		dialog.setFilterPath(currPath.toOSString());
+		dialog.setFilterPath(currPath.toString());
 		String res = dialog.open();
 		if (res != null) {
 			return new Path(res).makeAbsolute();
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/FileTransferDragAdapter.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/FileTransferDragAdapter.java
index 4ecab539da..adec1c040b 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/FileTransferDragAdapter.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/dnd/FileTransferDragAdapter.java
@@ -154,7 +154,7 @@ public class FileTransferDragAdapter implements TransferDragSourceListener {
 				IPath location = resource.getLocation();
 
 				if (location != null) {
-					locations.add(location.toOSString());
+					locations.add(location.toString());
 				}
 			}
 
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AddIncludeAction.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AddIncludeAction.java
index 8e772d139c..785322e7bd 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AddIncludeAction.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/AddIncludeAction.java
@@ -113,7 +113,7 @@ public class AddIncludeAction extends TextEditorAction {
 						IASTTranslationUnit ast = tu.getAST(index, ASTCache.PARSE_MODE);
 						if (ast == null) {
 							return CUIPlugin.createErrorStatus(
-									NLS.bind(CEditorMessages.AddInclude_ast_not_available, tu.getPath().toOSString()));
+									NLS.bind(CEditorMessages.AddInclude_ast_not_available, tu.getPath().toString()));
 						}
 						IncludeCreator creator = new IncludeCreator(tu, index, fAmbiguityResolver);
 						holder[0] = creator.createInclude(ast, (ITextSelection) selection);
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CElementIncludeResolver.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CElementIncludeResolver.java
index abebbdd70b..7910a83c25 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CElementIncludeResolver.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/CElementIncludeResolver.java
@@ -78,7 +78,7 @@ public class CElementIncludeResolver {
 						// search in current directory
 						IPath location = include.getTranslationUnit().getLocation();
 						if (location != null) {
-							String currentDir = location.removeLastSegments(1).toOSString();
+							String currentDir = location.removeLastSegments(1).toString();
 							findFile(new String[] { currentDir }, includeName, filesFound);
 						}
 						if (filesFound.isEmpty()) {
@@ -149,7 +149,7 @@ public class CElementIncludeResolver {
 						IPath sPath = rPath.removeFirstSegments(numSegToRemove);
 						sPath = sPath.setDevice(name.getDevice());
 						if (Platform.getOS().equals(Platform.OS_WIN32)
-								? sPath.toOSString().equalsIgnoreCase(name.toOSString())
+								? sPath.toString().equalsIgnoreCase(name.toString())
 								: sPath.equals(name)) {
 							list.add(rPath);
 						}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/OrganizeIncludesAction.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/OrganizeIncludesAction.java
index 55bfffcc8f..fd044755a6 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/OrganizeIncludesAction.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/editor/OrganizeIncludesAction.java
@@ -83,8 +83,8 @@ public class OrganizeIncludesAction extends TextEditorAction {
 						index.acquireReadLock();
 						IASTTranslationUnit ast = tu.getAST(index, ASTCache.PARSE_MODE);
 						if (ast == null) {
-							return CUIPlugin.createErrorStatus(NLS.bind(
-									CEditorMessages.OrganizeIncludes_ast_not_available, tu.getPath().toOSString()));
+							return CUIPlugin.createErrorStatus(NLS
+									.bind(CEditorMessages.OrganizeIncludes_ast_not_available, tu.getPath().toString()));
 						}
 						IncludeOrganizer organizer = new IncludeOrganizer(tu, index, headerChooser);
 						holder[0] = organizer.organizeIncludes(ast);
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBDragSourceListener.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBDragSourceListener.java
index 32a070efd1..c154176914 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBDragSourceListener.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/includebrowser/IBDragSourceListener.java
@@ -76,7 +76,7 @@ public class IBDragSourceListener implements DragSourceListener {
 			if (ifl != null) {
 				IPath location = IndexLocationFactory.getAbsolutePath(ifl);
 				if (location != null) {
-					files.add(location.toOSString());
+					files.add(location.toString());
 				}
 			}
 		}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorDragAdapterAssistant.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorDragAdapterAssistant.java
index 559df1409c..d170190c46 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorDragAdapterAssistant.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorDragAdapterAssistant.java
@@ -80,7 +80,7 @@ public class CNavigatorDragAdapterAssistant extends CommonDragAdapterAssistant {
 						ITranslationUnit tu = (ITranslationUnit) element;
 						IPath location = tu.getLocation();
 						if (location != null) {
-							files.add(location.toOSString());
+							files.add(location.toString());
 						}
 					}
 				}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/BuildLogPreferencePage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/BuildLogPreferencePage.java
index 23f4d10e0a..8fe78f9f6a 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/BuildLogPreferencePage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/BuildLogPreferencePage.java
@@ -105,7 +105,7 @@ public class BuildLogPreferencePage extends PropertyPage implements ICOptionCont
 					dialog.setText(PreferencesMessages.BuildLogPreferencePage_ChooseLogFile);
 					String fileName = logLocationText.getText();
 					IPath logFolder = new Path(fileName).removeLastSegments(1);
-					dialog.setFilterPath(logFolder.toOSString());
+					dialog.setFilterPath(logFolder.toString());
 					String chosenFile = dialog.open();
 					if (chosenFile != null) {
 						logLocationText.setText(chosenFile);
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/GlobalBuildLogPreferencePage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/GlobalBuildLogPreferencePage.java
index aa9e52f598..750bcc5f88 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/GlobalBuildLogPreferencePage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/preferences/GlobalBuildLogPreferencePage.java
@@ -51,7 +51,7 @@ public class GlobalBuildLogPreferencePage extends FieldEditorPreferencePage impl
 			dialog.setText(getLabelText());
 			String fileName = super.oldValue;
 			IPath logFolder = new Path(fileName).removeLastSegments(1);
-			dialog.setFilterPath(logFolder.toOSString());
+			dialog.setFilterPath(logFolder.toString());
 			return dialog.open();
 		}
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/CreateFileChange.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/CreateFileChange.java
index ca4b56c32e..69785a8e6a 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/CreateFileChange.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/CreateFileChange.java
@@ -64,7 +64,7 @@ public class CreateFileChange extends ResourceChange {
 	@Override
 	public String getName() {
 		if (name == null) {
-			return NLS.bind(Messages.CreateFileChange_create_file, path.toOSString());
+			return NLS.bind(Messages.CreateFileChange_create_file, path.toString());
 		}
 		return name;
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/DeleteFileChange.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/DeleteFileChange.java
index a6db7f97ca..ad3b518b8e 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/DeleteFileChange.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/changes/DeleteFileChange.java
@@ -50,7 +50,7 @@ public class DeleteFileChange extends Change {
 
 	@Override
 	public String getName() {
-		return NLS.bind(Messages.DeleteFileChange_delete_file, path.toOSString());
+		return NLS.bind(Messages.DeleteFileChange_delete_file, path.toString());
 	}
 
 	@Override
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoring.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoring.java
index dc0e3078ce..0a74927a99 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoring.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/hidemethod/HideMethodRefactoring.java
@@ -204,7 +204,7 @@ public class HideMethodRefactoring extends CRefactoring {
 				if (editorInput instanceof ITranslationUnitEditorInput) {
 					ITranslationUnit tu = CModelUtil
 							.toWorkingCopy(((ITranslationUnitEditorInput) editorInput).getTranslationUnit());
-					searchedFiles.add(tu.getLocation().toOSString());
+					searchedFiles.add(tu.getLocation().toString());
 					IASTTranslationUnit ast = getAST(tu, loopProgress.newChild(1));
 					for (IASTName reference : ast.getReferences(methodBinding)) {
 						if (!AccessContext.isAccessible(methodBinding, ICPPMember.v_private, reference)) {
@@ -223,7 +223,7 @@ public class HideMethodRefactoring extends CRefactoring {
 					throw new OperationCanceledException();
 				}
 				ITranslationUnit tu = CoreModelUtil.findTranslationUnitForLocation(name.getFile().getLocation(), null);
-				if (searchedFiles.add(tu.getLocation().toOSString())) {
+				if (searchedFiles.add(tu.getLocation().toString())) {
 					IASTTranslationUnit ast = getAST(tu, loopProgress.newChild(1));
 					for (IASTName reference : ast.getReferences(methodBinding)) {
 						if (!AccessContext.isAccessible(methodBinding, ICPPMember.v_private, reference)) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreator.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreator.java
index d1929ba46d..facab985fd 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreator.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeCreator.java
@@ -117,7 +117,7 @@ public class IncludeCreator {
 	private MultiTextEdit createIncludeImpl(IASTTranslationUnit ast, ITextSelection selection) throws CoreException {
 		MultiTextEdit rootEdit = new MultiTextEdit();
 		ITranslationUnit tu = fContext.getTranslationUnit();
-		IASTNodeSelector selector = ast.getNodeSelector(tu.getLocation().toOSString());
+		IASTNodeSelector selector = ast.getNodeSelector(tu.getLocation().toString());
 		IASTName name = selector.findEnclosingName(selection.getOffset(), selection.getLength());
 		if (name == null) {
 			return rootEdit;
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeUtil.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeUtil.java
index cc7c87859d..30c3dfee88 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeUtil.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/IncludeUtil.java
@@ -111,7 +111,7 @@ public class IncludeUtil {
 	 * @return The path.
 	 */
 	public static String getPath(IIndexFileLocation fileLocation) {
-		return IndexLocationFactory.getAbsolutePath(fileLocation).toOSString();
+		return IndexLocationFactory.getAbsolutePath(fileLocation).toString();
 	}
 
 	public static boolean isContainedInRegion(IASTNode node, IRegion region) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/InclusionRequest.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/InclusionRequest.java
index e0c7865738..6d60c053ff 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/InclusionRequest.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/includes/InclusionRequest.java
@@ -116,11 +116,11 @@ class InclusionRequest {
 		for (int i = 0; i < fCandidatePaths.size(); i++) {
 			if (i != 0)
 				buf.append(", "); //$NON-NLS-1$
-			buf.append(fCandidatePaths.get(i).toOSString());
+			buf.append(fCandidatePaths.get(i).toString());
 		}
 		if (fResolvedPath != null) {
 			buf.append(" represented by "); //$NON-NLS-1$
-			buf.append(fResolvedPath.toOSString());
+			buf.append(fResolvedPath.toString());
 		}
 		return buf.toString();
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/ToggleFileCreator.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/ToggleFileCreator.java
index e29600ad4d..ee8d829c5b 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/ToggleFileCreator.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/togglefunction/ToggleFileCreator.java
@@ -79,7 +79,7 @@ public class ToggleFileCreator {
 	}
 
 	private String getPath() {
-		String result = context.getSelectionFile().getFullPath().toOSString();
+		String result = context.getSelectionFile().getFullPath().toString();
 		return result.replaceAll("(\\w)*\\.(\\w)*", EMPTY_STRING); //$NON-NLS-1$
 	}
 }
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/DefinitionFinder.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/DefinitionFinder.java
index 89d72b59ca..c0f0d39742 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/DefinitionFinder.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/DefinitionFinder.java
@@ -108,7 +108,7 @@ public class DefinitionFinder {
 				ITranslationUnit tu = CoreModelUtil.findTranslationUnitForLocation(indexFile.getLocation(), null);
 				if (tu == null)
 					return null;
-				if (searchedFiles.add(tu.getLocation().toOSString())) {
+				if (searchedFiles.add(tu.getLocation().toString())) {
 					findDefinitionsInTranslationUnit(indexBinding, tu, context, definitions, pm);
 					if (definitions.size() > 1)
 						return null;
@@ -127,7 +127,7 @@ public class DefinitionFinder {
 				IEditorInput editorInput = editor.getEditorInput();
 				if (editorInput instanceof ITranslationUnitEditorInput) {
 					ITranslationUnit tu = ((ITranslationUnitEditorInput) editorInput).getTranslationUnit();
-					if (searchedFiles.add(tu.getLocation().toOSString())) {
+					if (searchedFiles.add(tu.getLocation().toString())) {
 						findDefinitionsInTranslationUnit(indexBinding, tu, context, definitions,
 								loopProgress.newChild(1));
 						if (definitions.size() > 1)
@@ -166,7 +166,7 @@ public class DefinitionFinder {
 			IEditorInput editorInput = editor.getEditorInput();
 			if (editorInput instanceof ITranslationUnitEditorInput) {
 				ITranslationUnit tu = ((ITranslationUnitEditorInput) editorInput).getTranslationUnit();
-				dirtyFiles.add(tu.getLocation().toOSString());
+				dirtyFiles.add(tu.getLocation().toString());
 			}
 		}
 
@@ -180,7 +180,7 @@ public class DefinitionFinder {
 				throw new OperationCanceledException();
 			}
 			ITranslationUnit tu = CoreModelUtil.findTranslationUnitForLocation(name.getFile().getLocation(), null);
-			String filename = tu.getLocation().toOSString();
+			String filename = tu.getLocation().toString();
 			if (searchedFiles.add(filename) && (!dirtyFiles.contains(filename)
 					|| hasDefinitionsInTranslationUnit(indexBinding, tu, context, loopProgress.newChild(1)))) {
 				return true;
@@ -197,7 +197,7 @@ public class DefinitionFinder {
 			IEditorInput editorInput = editor.getEditorInput();
 			if (editorInput instanceof ITranslationUnitEditorInput) {
 				ITranslationUnit tu = ((ITranslationUnitEditorInput) editorInput).getTranslationUnit();
-				String filename = tu.getLocation().toOSString();
+				String filename = tu.getLocation().toString();
 				if (searchedFiles.add(filename)
 						&& hasDefinitionsInTranslationUnit(indexBinding, tu, context, loopProgress.newChild(1))) {
 					return true;
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NamespaceHelper.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NamespaceHelper.java
index 1d9f660dc9..fe316bcd43 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NamespaceHelper.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/utils/NamespaceHelper.java
@@ -86,7 +86,7 @@ public class NamespaceHelper {
 		if (fileLoc == null) {
 			return false;
 		}
-		boolean fileNameOk = fileLoc.getFileName().endsWith(path.toOSString());
+		boolean fileNameOk = fileLoc.getFileName().endsWith(path.toString());
 		if (!fileNameOk) {
 			return false;
 		}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchQuery.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchQuery.java
index 399c447174..a11d0ba29b 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchQuery.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchQuery.java
@@ -466,7 +466,7 @@ public abstract class CSearchQuery implements ISearchQuery {
 					if (editorInput instanceof IPathEditorInput) {
 						IPathEditorInput pathEditorInput = (IPathEditorInput) editorInput;
 						IPath path = pathEditorInput.getPath();
-						if (fullPath.equals(path.toOSString())) {
+						if (fullPath.equals(path.toString())) {
 							dirtyTextEditor = textEditor;
 							break;
 						}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchResult.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchResult.java
index a433ef12f2..f15c927a80 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchResult.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/CSearchResult.java
@@ -97,7 +97,7 @@ public class CSearchResult extends AbstractTextSearchResult implements IEditorMa
 			}
 		}
 		if (path != null)
-			return path.toOSString();
+			return path.toString();
 
 		return null;
 	}
@@ -144,7 +144,7 @@ public class CSearchResult extends AbstractTextSearchResult implements IEditorMa
 	@Override
 	public Match[] computeContainedMatches(AbstractTextSearchResult result, IFile file) {
 		try {
-			String filename = file.getLocation().toOSString();
+			String filename = file.getLocation().toString();
 			return computeContainedMatches(result, filename);
 		} catch (CoreException e) {
 			CUIPlugin.log(e);
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/SelectionParseAction.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/SelectionParseAction.java
index 4b41f83778..532cefa5e8 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/SelectionParseAction.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/search/actions/SelectionParseAction.java
@@ -113,7 +113,7 @@ public class SelectionParseAction extends Action {
 
 	protected void reportSourceFileOpenFailure(IPath path) {
 		showStatusLineMessage(MessageFormat.format(CSearchMessages.SelectionParseAction_FileOpenFailure_format,
-				new Object[] { path.toOSString() }));
+				new Object[] { path.toString() }));
 	}
 
 	protected void reportSelectionMatchFailure() {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExternalEditorInputFactory.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExternalEditorInputFactory.java
index dcf3f868b4..ead6632e3f 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExternalEditorInputFactory.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/ExternalEditorInputFactory.java
@@ -76,7 +76,7 @@ public class ExternalEditorInputFactory implements IElementFactory {
 	static void saveState(IMemento memento, ExternalEditorInput input) {
 		IPath location = input.getPath();
 		if (location != null) {
-			memento.putString(TAG_PATH, location.toOSString());
+			memento.putString(TAG_PATH, location.toString());
 		}
 		IProject project = null;
 		ITranslationUnit unit = input.getTranslationUnit();
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/BasicElementLabels.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/BasicElementLabels.java
index 9aa181733f..93f7350071 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/BasicElementLabels.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/BasicElementLabels.java
@@ -42,7 +42,7 @@ public class BasicElementLabels {
 	public static String getPathLabel(IPath path, boolean isOSPath) {
 		String label;
 		if (isOSPath) {
-			label = path.toOSString();
+			label = path.toString();
 		} else {
 			label = path.makeRelative().toString();
 		}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/LinkToFileGroup.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/LinkToFileGroup.java
index 9763ea8c31..7f90c71984 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/LinkToFileGroup.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/wizards/dialogfields/LinkToFileGroup.java
@@ -286,7 +286,7 @@ public class LinkToFileGroup extends StringButtonDialogField {
 		IPath path = new Path(linkTargetField.getText());
 		IPath resolvedPath = pathVariableManager.resolvePath(path);
 
-		resolvedPathLabelData.setText(resolvedPath.toOSString());
+		resolvedPathLabelData.setText(resolvedPath.toString());
 	}
 
 	/**
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractPage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractPage.java
index 7e8ed167dc..2ca56b09e1 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractPage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/AbstractPage.java
@@ -1015,7 +1015,7 @@ public abstract class AbstractPage extends PropertyPage implements IPreferencePa
 						else
 							out = cf.createFileDescription(p, out);
 					} catch (CoreException e) {
-						System.out.println(Messages.AbstractPage_10 + p.toOSString() + "\n" + e.getLocalizedMessage()); //$NON-NLS-1$
+						System.out.println(Messages.AbstractPage_10 + p.toString() + "\n" + e.getLocalizedMessage()); //$NON-NLS-1$
 					}
 				}
 			}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationTab.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationTab.java
index fc74fdf3f4..6b5993a395 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationTab.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/CLocationTab.java
@@ -97,7 +97,7 @@ public abstract class CLocationTab extends AbstractCPropertyTab {
 				return new String[0];
 			String[] s = new String[p.length];
 			for (int i = 0; i < p.length; i++)
-				s[i] = p[i].toOSString();
+				s[i] = p[i].toString();
 			return s;
 		}
 
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/StructureTreeTab.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/StructureTreeTab.java
index 28860d9f60..c0feb965fa 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/StructureTreeTab.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/StructureTreeTab.java
@@ -666,7 +666,7 @@ public class StructureTreeTab extends AbstractCPropertyTab {
 		TreeItem ti1 = create(ti, "segmentCount()", p.segmentCount()); //$NON-NLS-1$
 		for (int i = 0; i < p.segmentCount(); i++)
 			create(ti1, "segment(" + i + ")", p.segment(i)); //$NON-NLS-1$  //$NON-NLS-2$
-		create(ti, "toOSString()", p.toOSString()); //$NON-NLS-1$
+		create(ti, "toString()", p.toString()); //$NON-NLS-1$
 		create(ti, "toPortableString()", p.toPortableString()); //$NON-NLS-1$
 		return ti;
 	}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizardPage.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizardPage.java
index 22904f8d2e..34b73d680d 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizardPage.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/wizards/NewCProjectWizardPage.java
@@ -78,7 +78,7 @@ public class NewCProjectWizardPage extends WizardNewProjectCreationPage {
 			}
 
 			// Give a chance to the wizard to do its own validation
-			IStatus validLocation = ((NewCProjectWizard) getWizard()).isValidLocation(getLocationPath().toOSString());
+			IStatus validLocation = ((NewCProjectWizard) getWizard()).isValidLocation(getLocationPath().toString());
 			if (!validLocation.isOK()) {
 				setErrorMessage(validLocation.getMessage());
 				return false;
diff --git a/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/ProjectSelectionPage.java b/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/ProjectSelectionPage.java
index 783e2bb573..97df10b384 100644
--- a/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/ProjectSelectionPage.java
+++ b/core/org.eclipse.cdt.ui/templateengine/org/eclipse/cdt/ui/templateengine/ProjectSelectionPage.java
@@ -275,7 +275,7 @@ public class ProjectSelectionPage extends WizardPage implements IWizardDataPage
 		ICProject cProject = chooseProject();
 		if (cProject != null) {
 			IPath path = cProject.getProject().getFullPath().makeRelative();
-			projectName = path.toOSString();
+			projectName = path.toString();
 			projectNameText.setText(projectName);
 		}
 	}
diff --git a/cross/org.eclipse.cdt.launch.remote/src/org/eclipse/cdt/launch/remote/launching/RemoteRunLaunchDelegate.java b/cross/org.eclipse.cdt.launch.remote/src/org/eclipse/cdt/launch/remote/launching/RemoteRunLaunchDelegate.java
index 18c60dbe12..230403a575 100644
--- a/cross/org.eclipse.cdt.launch.remote/src/org/eclipse/cdt/launch/remote/launching/RemoteRunLaunchDelegate.java
+++ b/cross/org.eclipse.cdt.launch.remote/src/org/eclipse/cdt/launch/remote/launching/RemoteRunLaunchDelegate.java
@@ -76,7 +76,7 @@ public class RemoteRunLaunchDelegate extends AbstractCLaunchDelegate {
 					monitor.setTaskName(Messages.RemoteRunLaunchDelegate_12);
 					remoteProcess = RemoteHelper.remoteShellExec(config, prelaunchCmd, remoteExePath, arguments,
 							new SubProgressMonitor(monitor, 20));
-					DebugPlugin.newProcess(launch, remoteProcess, renderProcessLabel(exePath.toOSString()));
+					DebugPlugin.newProcess(launch, remoteProcess, renderProcessLabel(exePath.toString()));
 				} catch (CoreException e) {
 					throw e;
 				} finally {
diff --git a/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest.java b/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest.java
index 31ac1225e2..eea01c4cec 100644
--- a/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest.java
+++ b/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest.java
@@ -44,7 +44,7 @@ public abstract class StandaloneTest {
 		SWTBotShell executableShell = bot.shell(DEBUG_NEW_EXECUTABLE_TITLE);
 		executableShell.setFocus();
 
-		executableShell.bot().textWithLabel("Binary: ").typeText(executablePath.toOSString());
+		executableShell.bot().textWithLabel("Binary: ").typeText(executablePath.toString());
 		executableShell.bot().button("OK").click();
 
 		bot.waitUntil(Conditions.shellIsActive(C_C_STAND_ALONE_DEBUGGER_TITLE));
diff --git a/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest1.java b/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest1.java
index 0f243b1ebd..7db4d11943 100644
--- a/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest1.java
+++ b/debug/org.eclipse.cdt.debug.application.tests/src/org/eclipse/cdt/debug/application/tests/StandaloneTest1.java
@@ -17,15 +17,16 @@ import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withMn
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 
+import java.awt.MenuItem;
+import java.util.concurrent.TimeoutException;
+
 import org.eclipse.core.runtime.IPath;
-import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swtbot.swt.finder.junit.SWTBotJunit4ClassRunner;
 import org.eclipse.swtbot.swt.finder.waits.Conditions;
 import org.eclipse.swtbot.swt.finder.waits.WaitForObjectCondition;
 import org.eclipse.swtbot.swt.finder.widgets.SWTBotMenu;
 import org.eclipse.swtbot.swt.finder.widgets.SWTBotShell;
 import org.eclipse.swtbot.swt.finder.widgets.SWTBotText;
-import org.eclipse.swtbot.swt.finder.widgets.TimeoutException;
 import org.hamcrest.Matcher;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -78,7 +79,7 @@ public class StandaloneTest1 extends StandaloneTest {
 		shell.setFocus();
 		// Try and have two open debug sessions on same binary
 		IPath projectPath = Utilities.getDefault().getProjectPath(PROJECT_NAME).append("a.out");
-		shell.bot().textWithLabel("Binary: ").setText(projectPath.toOSString());
+		shell.bot().textWithLabel("Binary: ").setText(projectPath.toString());
 		shell.bot().textWithLabel("Arguments: ").setText("1 2 3");
 		bot.sleep(2000);
 
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugUtils.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugUtils.java
index 9a510412b3..63880227cf 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugUtils.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/CDebugUtils.java
@@ -443,7 +443,7 @@ public class CDebugUtils {
 		if (!isEmpty(handle)) {
 			IPath path = new Path(handle);
 			if (path.isValidPath(handle)) {
-				label.append(qualified ? path.toOSString() : path.lastSegment());
+				label.append(qualified ? path.toString() : path.lastSegment());
 			}
 		}
 		return label;
@@ -740,7 +740,7 @@ public class CDebugUtils {
 			if (!programPath.toFile().exists()) {
 				throwCoreException(DebugCoreMessages.getString("CDebugUtils.Program_file_does_not_exist"), //$NON-NLS-1$
 						new FileNotFoundException(DebugCoreMessages
-								.getFormattedString("CDebugUtils.PROGRAM_PATH_not_found", programPath.toOSString())), //$NON-NLS-1$
+								.getFormattedString("CDebugUtils.PROGRAM_PATH_not_found", programPath.toString())), //$NON-NLS-1$
 						ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_EXIST);
 			}
 		}
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/Executable.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/Executable.java
index bb806fa6c9..2d7fe63373 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/Executable.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/executables/Executable.java
@@ -136,7 +136,7 @@ public class Executable extends PlatformObject {
 	public Executable(IPath path, IProject project, IResource resource, ISourceFileRemapping[] sourceFileRemappings) {
 		this.executablePath = path;
 		this.project = project;
-		this.name = new File(path.toOSString()).getName();
+		this.name = new File(path.toString()).getName();
 		this.resource = resource;
 		this.remappers = sourceFileRemappings;
 		remappedPaths = new HashMap<>();
@@ -320,7 +320,7 @@ public class Executable extends PlatformObject {
 	public synchronized String getOriginalLocation(ITranslationUnit tu) {
 		String orgLocation = remappedPaths.get(tu);
 		if (orgLocation == null)
-			orgLocation = tu.getLocation().toOSString();
+			orgLocation = tu.getLocation().toString();
 		return orgLocation;
 	}
 
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/CProjectSourceContainer.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/CProjectSourceContainer.java
index eaf4feadf7..263cb45f1f 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/CProjectSourceContainer.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/core/sourcelookup/CProjectSourceContainer.java
@@ -259,7 +259,7 @@ public class CProjectSourceContainer extends CompositeSourceContainer {
 			return false;
 		}
 		IPath path = fProject.getFullPath().append(name);
-		return ResourcesPlugin.getWorkspace().validatePath(path.toOSString(), IResource.FILE).isOK();
+		return ResourcesPlugin.getWorkspace().validatePath(path.toString(), IResource.FILE).isOK();
 	}
 
 	/**
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/DebugStringVariableSubstitutor.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/DebugStringVariableSubstitutor.java
index 15dcb1ba66..72d01ba270 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/DebugStringVariableSubstitutor.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/DebugStringVariableSubstitutor.java
@@ -66,7 +66,7 @@ public class DebugStringVariableSubstitutor implements IStringVariableManager {
 			if (name.endsWith("_name")) //$NON-NLS-1$
 				return project.getName();
 			if (name.endsWith("_loc")) //$NON-NLS-1$
-				return project.getLocation().toOSString();
+				return project.getLocation().toString();
 			if (name.endsWith("_path")) //$NON-NLS-1$
 				return project.getProjectRelativePath().toString();
 			return null;
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/BreakpointProblems.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/BreakpointProblems.java
index 85db4a54f7..1a44b9787a 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/BreakpointProblems.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/breakpoints/BreakpointProblems.java
@@ -190,7 +190,7 @@ public class BreakpointProblems {
 			}
 			if (problemMarkerInfo.externalPath != null) {
 				marker.setAttribute(ICModelMarker.C_MODEL_MARKER_EXTERNAL_LOCATION,
-						problemMarkerInfo.externalPath.toOSString());
+						problemMarkerInfo.externalPath.toString());
 			}
 
 			return marker;
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/executables/StandardSourceFilesProvider.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/executables/StandardSourceFilesProvider.java
index 29752f98f4..2b493c2f95 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/executables/StandardSourceFilesProvider.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/executables/StandardSourceFilesProvider.java
@@ -51,7 +51,7 @@ public class StandardSourceFilesProvider extends PlatformObject implements ISour
 		if (!Executable.isBinaryFile(executable.getPath()))
 			return null;
 
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.length() == 0) {
 			return null;
 		}
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CDirectorySourceLocation.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CDirectorySourceLocation.java
index 004e28c97c..bba2e87852 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CDirectorySourceLocation.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CDirectorySourceLocation.java
@@ -103,7 +103,7 @@ public class CDirectorySourceLocation implements IDirectorySourceLocation {
 				IPath path = new Path(name);
 				if (path.segmentCount() > 1 && getAssociation().isPrefixOf(path)) {
 					path = getDirectory().append(path.removeFirstSegments(getAssociation().segmentCount()));
-					result = findFileByAbsolutePath(path.toOSString());
+					result = findFileByAbsolutePath(path.toString());
 				}
 			}
 		}
@@ -282,9 +282,9 @@ public class CDirectorySourceLocation implements IDirectorySourceLocation {
 			document = XmlProcessorFactoryCdt.createDocumentBuilderWithErrorOnDOCTYPE().newDocument();
 			Element node = document.createElement(ELEMENT_NAME);
 			document.appendChild(node);
-			node.setAttribute(ATTR_DIRECTORY, getDirectory().toOSString());
+			node.setAttribute(ATTR_DIRECTORY, getDirectory().toString());
 			if (getAssociation() != null)
-				node.setAttribute(ATTR_ASSOCIATION, getAssociation().toOSString());
+				node.setAttribute(ATTR_ASSOCIATION, getAssociation().toString());
 			node.setAttribute(ATTR_SEARCH_SUBFOLDERS, String.valueOf(searchSubfolders()));
 			return CDebugUtils.serializeDocument(document);
 		} catch (ParserConfigurationException e) {
@@ -294,7 +294,7 @@ public class CDirectorySourceLocation implements IDirectorySourceLocation {
 		} catch (TransformerException e) {
 			ex = e;
 		}
-		abort(NLS.bind(InternalSourceLookupMessages.CDirectorySourceLocation_0, getDirectory().toOSString()), ex);
+		abort(NLS.bind(InternalSourceLookupMessages.CDirectorySourceLocation_0, getDirectory().toString()), ex);
 		// execution will not reach here
 		return null;
 	}
@@ -384,8 +384,8 @@ public class CDirectorySourceLocation implements IDirectorySourceLocation {
 		int segCount = prefix.segmentCount();
 		if (segCount >= path.segmentCount())
 			return false;
-		String prefixString = prefix.toOSString();
-		String pathString = path.removeLastSegments(path.segmentCount() - segCount).toOSString();
+		String prefixString = prefix.toString();
+		String pathString = path.removeLastSegments(path.segmentCount() - segCount).toString();
 		return prefixString.equalsIgnoreCase(pathString);
 	}
 
@@ -458,7 +458,7 @@ public class CDirectorySourceLocation implements IDirectorySourceLocation {
 	 */
 	@Override
 	public String toString() {
-		return (getDirectory() != null) ? getDirectory().toOSString() : ""; //$NON-NLS-1$
+		return (getDirectory() != null) ? getDirectory().toString() : ""; //$NON-NLS-1$
 	}
 
 	/* (non-Javadoc)
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CProjectSourceLocation.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CProjectSourceLocation.java
index 5e4e456142..24b568f20f 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CProjectSourceLocation.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CProjectSourceLocation.java
@@ -162,7 +162,7 @@ public class CProjectSourceLocation implements IProjectSourceLocation {
 			IPath path = folders[i].getLocation();
 			if (path != null) {
 				path = path.append(fileName);
-				File file = new File(path.toOSString());
+				File file = new File(path.toString());
 				if (file.exists()) {
 					IFile[] wsFiles = ResourceLookup.findFilesForLocation(path);
 					for (int j = 0; j < wsFiles.length; ++j) {
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLocator.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLocator.java
index d4eb106dae..6a0b3054c1 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLocator.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/CSourceLocator.java
@@ -150,7 +150,7 @@ public class CSourceLocator implements ICSourceLocator, IPersistableSourceLocato
 			}
 			if (resource instanceof IFile) {
 				try {
-					Object result = locations[i].findSourceElement(resource.getLocation().toOSString());
+					Object result = locations[i].findSourceElement(resource.getLocation().toString());
 					if (result instanceof IFile && ((IFile) result).equals(resource))
 						return true;
 					if (result instanceof List && ((List<?>) result).contains(resource))
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainer.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainer.java
index 50a9c4ea17..22bf88a79f 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainer.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainer.java
@@ -199,7 +199,7 @@ public class MapEntrySourceContainer extends AbstractSourceContainer {
 
 	@Override
 	public String getName() {
-		return MessageFormat.format("{0} - {1}", new Object[] { getBackendPathStr(), getLocalPath().toOSString() }); //$NON-NLS-1$
+		return MessageFormat.format("{0} - {1}", new Object[] { getBackendPathStr(), getLocalPath().toString() }); //$NON-NLS-1$
 	}
 
 	@Override
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainerType.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainerType.java
index 4d8c28d499..49600c4faa 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainerType.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/MapEntrySourceContainerType.java
@@ -68,7 +68,7 @@ public class MapEntrySourceContainerType extends AbstractSourceContainerTypeDele
 		Document document = newDocument();
 		Element element = document.createElement(ELEMENT_NAME);
 		element.setAttribute(BACKEND_PATH, entry.getBackendPathStr());
-		element.setAttribute(LOCAL_PATH, entry.getLocalPath().toOSString());
+		element.setAttribute(LOCAL_PATH, entry.getLocalPath().toString());
 		document.appendChild(element);
 		return serializeDocument(document);
 	}
diff --git a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/SourceUtils.java b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/SourceUtils.java
index fff66ff420..1adb403a8b 100644
--- a/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/SourceUtils.java
+++ b/debug/org.eclipse.cdt.debug.core/src/org/eclipse/cdt/debug/internal/core/sourcelookup/SourceUtils.java
@@ -192,7 +192,7 @@ public class SourceUtils {
 					MappingSourceContainer mapping = new MappingSourceContainer(
 							InternalSourceLookupMessages.SourceUtils_0 + (++mappingCount));
 					mapping.addMapEntries(new MapEntrySourceContainer[] {
-							new MapEntrySourceContainer(a.toOSString(), d.getDirectory()) });
+							new MapEntrySourceContainer(a.toString(), d.getDirectory()) });
 					containers.add(mapping);
 
 				}
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugModelPresentation.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugModelPresentation.java
index b039409951..bbf9a45b23 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugModelPresentation.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugModelPresentation.java
@@ -681,7 +681,7 @@ public class CDebugModelPresentation extends LabelProvider implements IDebugMode
 				if (frame.getFile() != null) {
 					IPath path = new Path(frame.getFile());
 					if (!path.isEmpty()) {
-						label.append((qualified ? path.toOSString() : path.lastSegment()));
+						label.append((qualified ? path.toString() : path.lastSegment()));
 						label.append(':');
 						if (frame.getFrameLineNumber() != 0)
 							label.append(frame.getFrameLineNumber());
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugUIUtils.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugUIUtils.java
index 5ef48c0605..5a528ce602 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugUIUtils.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/CDebugUIUtils.java
@@ -190,27 +190,27 @@ public class CDebugUIUtils {
 		if (input instanceof IFileEditorInput) {
 			IPath location = ((IFileEditorInput) input).getFile().getLocation();
 			if (location != null) {
-				return location.toOSString();
+				return location.toString();
 			}
 			URI locationURI = ((IFileEditorInput) input).getFile().getLocationURI();
 			if (locationURI != null) {
 				IPath uriPath = URIUtil.toPath(locationURI);
 				if (uriPath != null) {
-					return uriPath.toOSString();
+					return uriPath.toString();
 				}
 			}
 			return ""; //$NON-NLS-1$
 		}
 		if (input instanceof IStorageEditorInput) {
-			return ((IStorageEditorInput) input).getStorage().getFullPath().toOSString();
+			return ((IStorageEditorInput) input).getStorage().getFullPath().toString();
 		}
 		if (input instanceof IPathEditorInput) {
-			return ((IPathEditorInput) input).getPath().toOSString();
+			return ((IPathEditorInput) input).getPath().toString();
 		}
 		if (input instanceof IURIEditorInput) {
 			IPath uriPath = URIUtil.toPath(((IURIEditorInput) input).getURI());
 			if (uriPath != null)
-				return uriPath.toOSString();
+				return uriPath.toString();
 		}
 		return ""; //$NON-NLS-1$
 	}
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/DebugMarkerAnnotationModelFactory.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/DebugMarkerAnnotationModelFactory.java
index 854d662820..d2de468764 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/DebugMarkerAnnotationModelFactory.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/DebugMarkerAnnotationModelFactory.java
@@ -32,7 +32,7 @@ public class DebugMarkerAnnotationModelFactory extends ResourceMarkerAnnotationM
 		if (file != null) {
 			return super.createAnnotationModel(location);
 		}
-		File osFile = new File(location.toOSString());
+		File osFile = new File(location.toString());
 		if (osFile.exists()) {
 			return new DebugMarkerAnnotationModel(osFile);
 		}
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointPropertyPage.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointPropertyPage.java
index ec2ef12875..c8222822aa 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointPropertyPage.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/breakpoints/CBreakpointPropertyPage.java
@@ -270,7 +270,7 @@ public class CBreakpointPropertyPage extends FieldEditorPreferencePage implement
 							IFile file = (IFile) result[0];
 							IPath location = file.getRawLocation();
 							if (location != null) {
-								String newValue = location.makeAbsolute().toOSString();
+								String newValue = location.makeAbsolute().toString();
 								setStringValue(newValue);
 							}
 						}
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/ModulePropertyPage.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/ModulePropertyPage.java
index 3c3cedeabb..92fae4ce7f 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/ModulePropertyPage.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/propertypages/ModulePropertyPage.java
@@ -177,11 +177,11 @@ public class ModulePropertyPage extends PropertyPage {
 			public void widgetSelected(SelectionEvent e) {
 				FileDialog dialog = new FileDialog(fBrowseButton.getShell());
 				dialog.setFileName(
-						((IPath) getModuleProperties().getProperty(ModuleProperties.SYMBOLS_FILE)).toOSString());
+						((IPath) getModuleProperties().getProperty(ModuleProperties.SYMBOLS_FILE)).toString());
 				String fn = dialog.open();
 				if (fn != null) {
 					IPath path = new Path(fn);
-					fSymbolsFileField.setText(path.toOSString());
+					fSymbolsFileField.setText(path.toString());
 					getModuleProperties().setProperty(ModuleProperties.SYMBOLS_FILE, path);
 				}
 			}
@@ -229,7 +229,7 @@ public class ModulePropertyPage extends PropertyPage {
 
 		// Symbols file:
 		IPath path = (IPath) getModuleProperties().getProperty(ModuleProperties.SYMBOLS_FILE);
-		value = (path != null) ? path.toOSString() : PropertyPageMessages.getString("ModulePropertyPage.14"); //$NON-NLS-1$
+		value = (path != null) ? path.toString() : PropertyPageMessages.getString("ModulePropertyPage.14"); //$NON-NLS-1$
 		fSymbolsFileField.setText(value);
 	}
 
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CSourceNotFoundEditor.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CSourceNotFoundEditor.java
index f1ef15d560..7354dffa46 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CSourceNotFoundEditor.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/CSourceNotFoundEditor.java
@@ -172,7 +172,7 @@ public class CSourceNotFoundEditor extends CommonSourceNotFoundEditor {
 				tunit = (ITranslationUnit) artifact;
 				IPath tuPath = tunit.getLocation();
 				if (tuPath != null) {
-					missingFile = tuPath.toOSString();
+					missingFile = tuPath.toString();
 				}
 			} else {
 				missingFile = ""; //$NON-NLS-1$
@@ -422,7 +422,7 @@ public class CSourceNotFoundEditor extends CommonSourceNotFoundEditor {
 		if (tu != null) {
 			IPath tuPath = tu.getLocation();
 			if (tuPath != null) {
-				String filePath = tuPath.toOSString();
+				String filePath = tuPath.toString();
 				try {
 					Object[] foundElements = CDebugCorePlugin.getDefault().getCommonSourceLookupDirector()
 							.findSourceElements(filePath);
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/MappingSourceContainerDialog.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/MappingSourceContainerDialog.java
index fbfbc067ea..31b3bdc4eb 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/MappingSourceContainerDialog.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/sourcelookup/MappingSourceContainerDialog.java
@@ -86,7 +86,7 @@ public class MappingSourceContainerDialog extends TitleAreaDialog {
 				if (CP_COMPILATION_PATH.equals(property))
 					return entry.getBackendPathStr();
 				if (CP_FILE_SYSTEM_PATH.equals(property))
-					return entry.getLocalPath().toOSString();
+					return entry.getLocalPath().toString();
 			}
 			return null;
 		}
@@ -153,7 +153,7 @@ public class MappingSourceContainerDialog extends TitleAreaDialog {
 				if (columnIndex == 0)
 					return entry.getBackendPathStr();
 				if (columnIndex == 1)
-					return entry.getLocalPath().toOSString();
+					return entry.getLocalPath().toString();
 			}
 			return null;
 		}
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesContentProvider.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesContentProvider.java
index 3c21bd389b..936111ce2f 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesContentProvider.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesContentProvider.java
@@ -80,7 +80,7 @@ class ExecutablesContentProvider extends ColumnLabelProvider
 			if (cell.getColumnIndex() == 1)
 				cellText = exe.getProject().getName();
 			else if (cell.getColumnIndex() == 2)
-				cellText = exe.getPath().toOSString();
+				cellText = exe.getPath().toString();
 			else if (cell.getColumnIndex() == 3) {
 				cellText = ""; //$NON-NLS-1$
 				IPath path = exe.getPath();
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesViewerComparator.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesViewerComparator.java
index 28e0361b5f..a7f77cfd89 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesViewerComparator.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/ExecutablesViewerComparator.java
@@ -57,7 +57,7 @@ class ExecutablesViewerComparator extends ViewerComparator {
 			}
 
 			if (sortType == ExecutablesView.LOCATION) {
-				return getComparator().compare(getPath(e1).toOSString(), getPath(e2).toOSString()) * columnOrder;
+				return getComparator().compare(getPath(e1).toString(), getPath(e2).toString()) * columnOrder;
 			}
 
 			if (sortType == ExecutablesView.MODIFIED) {
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesLabelProvider.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesLabelProvider.java
index e8cf86d07b..27717f1051 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesLabelProvider.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesLabelProvider.java
@@ -80,7 +80,7 @@ public class SourceFilesLabelProvider extends TreeColumnViewerLabelProvider impl
 			cell.setText(null);
 			if (tuInfo != null) {
 				if (tuInfo.location != null) {
-					cell.setText(tuInfo.location.toOSString());
+					cell.setText(tuInfo.location.toString());
 					if (tuInfo.exists)
 						cell.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
 					else
@@ -91,7 +91,7 @@ public class SourceFilesLabelProvider extends TreeColumnViewerLabelProvider impl
 		} else if (orgColumnIndex == 2) {
 			cell.setText(null);
 			if (tuInfo != null && tuInfo.originalLocation != null) {
-				cell.setText(tuInfo.originalLocation.toOSString());
+				cell.setText(tuInfo.originalLocation.toString());
 				if (tuInfo.originalExists)
 					cell.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
 				else
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesViewer.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesViewer.java
index c9e0a9fed2..61460cb2f6 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesViewer.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/executables/SourceFilesViewer.java
@@ -266,7 +266,7 @@ public class SourceFilesViewer extends BaseViewer {
 				// java.io.File would be wrong since that class makes arbitrary
 				// assumptions about where the file should be locally. See
 				// similar comment in Executable.getSourceFiles()
-				if (Util.isNativeAbsolutePath(info.location.toOSString())) {
+				if (Util.isNativeAbsolutePath(info.location.toString())) {
 					File file = info.location.toFile();
 					info.exists = file.exists();
 					if (info.exists) {
@@ -283,7 +283,7 @@ public class SourceFilesViewer extends BaseViewer {
 				}
 
 				info.originalLocation = new Path(executable.getOriginalLocation(tu));
-				info.originalExists = Util.isNativeAbsolutePath(info.originalLocation.toOSString())
+				info.originalExists = Util.isNativeAbsolutePath(info.originalLocation.toString())
 						&& info.originalLocation.toFile().exists();
 			} else {
 				info.exists = false;
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java
index f86aeb821c..fc40870b67 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/internal/ui/views/modules/ModuleDetailPane.java
@@ -162,7 +162,7 @@ public class ModuleDetailPane extends AbstractDetailPane implements IAdaptable,
 
 		// Symbols file
 		sb.append(ModulesMessages.getString("ModulesView.7")); //$NON-NLS-1$
-		sb.append(module.getSymbolsFileName().toOSString());
+		sb.append(module.getSymbolsFileName().toString());
 		sb.append('\n');
 
 		// CPU
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AbstractToggleBreakpointAdapter.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AbstractToggleBreakpointAdapter.java
index 9e77c4cb29..21d787a9b1 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AbstractToggleBreakpointAdapter.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/breakpoints/AbstractToggleBreakpointAdapter.java
@@ -722,7 +722,7 @@ abstract public class AbstractToggleBreakpointAdapter
 		if (tu != null) {
 			IPath location = tu.getLocation();
 			if (location != null) {
-				return location.toOSString();
+				return location.toString();
 			}
 		}
 		return ""; //$NON-NLS-1$
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/ImportExecutablePageOne.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/ImportExecutablePageOne.java
index e05e9b78c9..310deeac80 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/ImportExecutablePageOne.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/ImportExecutablePageOne.java
@@ -547,7 +547,7 @@ public class ImportExecutablePageOne extends WizardPage {
 		if (dirName.length() > 0) {
 			File path = new File(dirName);
 			if (path.exists())
-				dialog.setFilterPath(new Path(dirName).toOSString());
+				dialog.setFilterPath(new Path(dirName).toString());
 		}
 
 		String selectedDirectory = dialog.open();
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbConnectCommand.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbConnectCommand.java
index 538bc46e8d..17e49bff9c 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbConnectCommand.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/commands/GdbConnectCommand.java
@@ -607,7 +607,7 @@ public class GdbConnectCommand extends RefreshableDebugCommand implements IConne
 											IPath binaryPath = backend.getProgramPath();
 											if (binaryPath != null && !binaryPath.isEmpty()) {
 												fProcessNameToBinaryMap.put(binaryPath.lastSegment(),
-														binaryPath.toOSString());
+														binaryPath.toString());
 											}
 										}
 
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java
index c27f15f0dd..69aa8dc7b9 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/console/GdbCliConsoleManager.java
@@ -190,7 +190,7 @@ public class GdbCliConsoleManager implements ILaunchesListener2 {
 				gdbVersion = "???"; //$NON-NLS-1$
 				assert false : "Should not happen since the gdb version is cached"; //$NON-NLS-1$
 			}
-			String consoleTitle = fLaunch.getGDBPath().toOSString().trim() + " (" + gdbVersion + ")"; //$NON-NLS-1$ //$NON-NLS-2$
+			String consoleTitle = fLaunch.getGDBPath().toString().trim() + " (" + gdbVersion + ")"; //$NON-NLS-1$ //$NON-NLS-2$
 
 			DsfServicesTracker tracker = new DsfServicesTracker(GdbUIPlugin.getBundleContext(), fSession.getId());
 			IGDBControl control = tracker.getService(IGDBControl.class);
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/SolibSearchPathBlock.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/SolibSearchPathBlock.java
index c64bd742b2..1f4398a91b 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/SolibSearchPathBlock.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb.ui/src/org/eclipse/cdt/dsf/gdb/internal/ui/launching/SolibSearchPathBlock.java
@@ -260,7 +260,7 @@ public class SolibSearchPathBlock extends Observable implements IMILaunchConfigu
 			@Override
 			public String getText(Object element) {
 				if (element instanceof IPath)
-					return ((IPath) element).toOSString();
+					return ((IPath) element).toString();
 				return super.getText(element);
 			}
 		};
@@ -364,7 +364,7 @@ public class SolibSearchPathBlock extends Observable implements IMILaunchConfigu
 			ArrayList<String> values = new ArrayList<>(elements.size());
 			Iterator<IPath> it = elements.iterator();
 			while (it.hasNext()) {
-				values.add((it.next()).toOSString());
+				values.add((it.next()).toString());
 			}
 			configuration.setAttribute(IGDBLaunchConfigurationConstants.ATTR_DEBUGGER_SOLIB_PATH, values);
 		}
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/CoreBuildLocalDebugLaunchDelegate.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/CoreBuildLocalDebugLaunchDelegate.java
index 24877b3c27..bcd3b16588 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/CoreBuildLocalDebugLaunchDelegate.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/CoreBuildLocalDebugLaunchDelegate.java
@@ -102,7 +102,7 @@ public class CoreBuildLocalDebugLaunchDelegate extends CoreBuildLaunchConfigDele
 
 		gdbLaunch.initializeControl();
 
-		gdbLaunch.addCLIProcess(gdbLaunch.getGDBPath().toOSString() + " (" + gdbVersion + ")"); //$NON-NLS-1$ //$NON-NLS-2$
+		gdbLaunch.addCLIProcess(gdbLaunch.getGDBPath().toString() + " (" + gdbVersion + ")"); //$NON-NLS-1$ //$NON-NLS-2$
 
 		Query<Object> ready = new Query<>() {
 			@Override
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/FlatpakLaunch.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/FlatpakLaunch.java
index fb7b68fc09..04e4cc0494 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/FlatpakLaunch.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/launching/FlatpakLaunch.java
@@ -178,7 +178,7 @@ public class FlatpakLaunch {
 			// if we don't have a working directory, the default is to use
 			// the project
 			if (workingDir == null && projectName != null) {
-				workingDir = project.getLocation().toOSString();
+				workingDir = project.getLocation().toString();
 			}
 			if (workingDir != null) {
 				IPath workingPath = new Path(workingDir);
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java
index e072dd4c4d..38052ad680 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java
@@ -222,7 +222,7 @@ public class GdbLaunch extends DsfLaunch implements ITracedLaunch, ITargetedLaun
 			attributes.put(IProcess.ATTR_CMDLINE, StringUtil.join(gdbBackend.getDebuggerCommandLineArray(), "\n")); //$NON-NLS-1$
 			attributes.put(DebugPlugin.ATTR_ENVIRONMENT, StringUtil.join(getLaunchEnvironment(), "\n")); //$NON-NLS-1$
 			attributes.put(DebugPlugin.ATTR_LAUNCH_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-			Optional.ofNullable(gdbBackend.getGDBWorkingDirectory()).map(IPath::toOSString)
+			Optional.ofNullable(gdbBackend.getGDBWorkingDirectory()).map(IPath::toString)
 					.ifPresent(dir -> attributes.put(DebugPlugin.ATTR_WORKING_DIRECTORY, dir));
 
 			// Need to go through DebugPlugin.newProcess so that we can use
@@ -530,7 +530,7 @@ public class GdbLaunch extends DsfLaunch implements ITracedLaunch, ITargetedLaun
 			return fGdbVersion;
 		}
 
-		String gdbPath = getGDBPath().toOSString();
+		String gdbPath = getGDBPath().toString();
 		String[] launchEnvironment = getLaunchEnvironment();
 
 		String gdbVersion = LaunchUtils.getGDBVersion(gdbPath, launchEnvironment);
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunchDelegate.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunchDelegate.java
index bf84a51e92..739db78727 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunchDelegate.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunchDelegate.java
@@ -284,7 +284,7 @@ public class GdbLaunchDelegate extends AbstractCLaunchDelegate2 {
 		if (gdbPath == null) {
 			gdbPath = LaunchUtils.getGDBPath(config);
 		}
-		return gdbPath.toOSString().trim() + " (" + gdbVersion + ")"; //$NON-NLS-1$ //$NON-NLS-2$
+		return gdbPath.toString().trim() + " (" + gdbVersion + ")"; //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	/**
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbSourceLookupDirector.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbSourceLookupDirector.java
index 87af49df70..f3ed983e46 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbSourceLookupDirector.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbSourceLookupDirector.java
@@ -106,7 +106,7 @@ public class GdbSourceLookupDirector extends DsfSourceLookupDirector {
 				String from = sourceSubContainer.getBackendPathStr();
 				IPath to = sourceSubContainer.getLocalPath();
 				if (from != null && to != null) {
-					entries.put(from, to.toOSString());
+					entries.put(from, to.toString());
 				}
 			} else if (container.isComposite()) {
 				ISourceContainer[] childContainers;
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/LaunchUtils.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/LaunchUtils.java
index 4ba7534fec..70664d1528 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/LaunchUtils.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/LaunchUtils.java
@@ -129,7 +129,7 @@ public class LaunchUtils {
 			abort(LaunchMessages.getString("AbstractCLaunchDelegate.Program_file_does_not_exist"), //$NON-NLS-1$
 					new FileNotFoundException(
 							LaunchMessages.getFormattedString("AbstractCLaunchDelegate.PROGRAM_PATH_not_found", //$NON-NLS-1$
-									programPath.toOSString())),
+									programPath.toString())),
 					ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_EXIST);
 		}
 
@@ -169,7 +169,7 @@ public class LaunchUtils {
 		abort(LaunchMessages.getString("AbstractCLaunchDelegate.Program_is_not_a_recognized_executable"), //$NON-NLS-1$
 				new FileNotFoundException(LaunchMessages.getFormattedString(
 						"AbstractCLaunchDelegate.Program_is_not_a_recognized_executable", //$NON-NLS-1$
-						exePath.toOSString())),
+						exePath.toString())),
 				ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_BINARY);
 
 		return null;
@@ -284,7 +284,7 @@ public class LaunchUtils {
 	 */
 	@Deprecated
 	public static String getGDBVersion(final ILaunchConfiguration configuration) throws CoreException {
-		String gdbPath = getGDBPath(configuration).toOSString();
+		String gdbPath = getGDBPath(configuration).toString();
 		String[] launchEnvironment = getLaunchEnvironment(configuration);
 
 		return getGDBVersion(gdbPath, launchEnvironment);
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java
index 3faebeb1a4..f26ee0fca7 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend.java
@@ -185,7 +185,7 @@ public class GDBBackend extends AbstractDsfService implements IGDBBackend, IMIBa
 		// All configuration should be done in the final launch sequence
 		// to allow for more flexibility.
 
-		String cmd = getGDBPath().toOSString() + " --interpreter" + //$NON-NLS-1$
+		String cmd = getGDBPath().toString() + " --interpreter" + //$NON-NLS-1$
 		// We currently work with MI version 2. Don't use just 'mi' because it
 		// points to the latest MI version, while we want mi2 specifically.
 				" mi2" + //$NON-NLS-1$
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend_7_12.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend_7_12.java
index 61946ecbef..ad6414d65e 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend_7_12.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBBackend_7_12.java
@@ -202,7 +202,7 @@ public class GDBBackend_7_12 extends GDBBackend {
 			fCLIPty = new PTY(Mode.TERMINAL);
 			IPath path = getGDBWorkingDirectory();
 			proc = ProcessFactory.getFactory().exec(commandLine, getGDBLaunch().getLaunchEnvironment(),
-					new File(path != null ? path.toOSString() : ""), //$NON-NLS-1$
+					new File(path != null ? path.toString() : ""), //$NON-NLS-1$
 					fCLIPty);
 		} catch (IOException e) {
 			String message = "Error while launching command: " + StringUtil.join(commandLine, " "); //$NON-NLS-1$ //$NON-NLS-2$
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java
index 1e96c870ef..ad349d14f0 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_0.java
@@ -1031,7 +1031,7 @@ public class GDBProcesses_7_0 extends AbstractDsfService implements IGDBProcesse
 					if (name == null) {
 						// Should not happen, but just in case...use the
 						// binary file name (absolute path)
-						name = fBackend.getProgramPath().toOSString();
+						name = fBackend.getProgramPath().toString();
 						fDebuggedProcessesAndNames.put(id, name);
 					} else if (name.isEmpty()) {
 						// We know of the process but haven't fetched its name yet.
@@ -1090,7 +1090,7 @@ public class GDBProcesses_7_0 extends AbstractDsfService implements IGDBProcesse
 
 										if (name == null) {
 											// No way to get the name right now, so use the binary file name (absolute path)
-											name = fBackend.getProgramPath().toOSString();
+											name = fBackend.getProgramPath().toString();
 											fDebuggedProcessesAndNames.put(finalPId, name);
 										}
 										rm.done(new MIThreadDMData(name, finalPId));
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsSynchronizer.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsSynchronizer.java
index 581f27a900..adcb8a3ed5 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsSynchronizer.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIBreakpointsSynchronizer.java
@@ -1579,13 +1579,13 @@ public class MIBreakpointsSynchronizer extends AbstractDsfService
 				String fileName = null;
 				if (isSuccess()) {
 					if (getData() instanceof IFile) {
-						fileName = ((IFile) getData()).getLocation().toOSString();
+						fileName = ((IFile) getData()).getLocation().toString();
 					} else if (getData() instanceof File) {
 						fileName = ((File) getData()).getAbsolutePath();
 					} else if (getData() instanceof ITranslationUnit) {
 						IPath location = ((ITranslationUnit) getData()).getLocation();
 						if (location != null) {
-							fileName = location.toOSString();
+							fileName = location.toString();
 						}
 					} else if (getData() instanceof LocalFileStorage) {
 						fileName = ((LocalFileStorage) getData()).getFile().getAbsolutePath();
diff --git a/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/SourceLookupTest.java b/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/SourceLookupTest.java
index ce39d3c882..0d301e91e3 100644
--- a/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/SourceLookupTest.java
+++ b/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/SourceLookupTest.java
@@ -448,7 +448,7 @@ public class SourceLookupTest extends BaseParametrizedTestCase {
 		// insert breakpoint in source file
 		fBreakpointInstalledWait.waitReset();
 		ICLineBreakpoint bp = CDIDebugModel.createLineBreakpoint(
-				new Path(SOURCE_ABSPATH).append(SOURCE_NAME).toOSString(), ResourcesPlugin.getWorkspace().getRoot(),
+				new Path(SOURCE_ABSPATH).append(SOURCE_NAME).toString(), ResourcesPlugin.getWorkspace().getRoot(),
 				ICBreakpointType.REGULAR, SOURCE_LINE, true, 0, "", true);
 		// The delay here is based on:
 		// 1) The installation of the breakpoint takes some time
diff --git a/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/nonstop/MultiProcessRemoteTest.java b/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/nonstop/MultiProcessRemoteTest.java
index 4660e3cdea..3a5eb7b55d 100644
--- a/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/nonstop/MultiProcessRemoteTest.java
+++ b/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/nonstop/MultiProcessRemoteTest.java
@@ -219,7 +219,7 @@ public class MultiProcessRemoteTest extends BaseParametrizedTestCase {
 		Query<IDMContext> query = new Query<>() {
 			@Override
 			protected void execute(DataRequestMonitor<IDMContext> rm) {
-				fGdbProcesses.debugNewProcess(fCommandControl.getContext(), execPath.toOSString(), attributes, rm);
+				fGdbProcesses.debugNewProcess(fCommandControl.getContext(), execPath.toString(), attributes, rm);
 			}
 		};
 		fGDBBackend.getExecutor().execute(query);
diff --git a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/ResumeAtLine.java b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/ResumeAtLine.java
index 68fa7f274a..dc88a425e7 100644
--- a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/ResumeAtLine.java
+++ b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/ResumeAtLine.java
@@ -49,7 +49,7 @@ public class ResumeAtLine implements IResumeAtLine, IResumeAtAddress {
 
 	@Override
 	public boolean canResumeAtLine(IFile file, final int lineNumber) {
-		return canResumeAtLine(file.getLocation().makeAbsolute().toOSString(), lineNumber);
+		return canResumeAtLine(file.getLocation().makeAbsolute().toString(), lineNumber);
 	}
 
 	@Override
@@ -86,7 +86,7 @@ public class ResumeAtLine implements IResumeAtLine, IResumeAtAddress {
 
 	@Override
 	public void resumeAtLine(IFile file, int lineNumber) throws DebugException {
-		resumeAtLine(file.getLocation().makeAbsolute().toOSString(), lineNumber);
+		resumeAtLine(file.getLocation().makeAbsolute().toString(), lineNumber);
 	}
 
 	@Override
diff --git a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/RunToLine.java b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/RunToLine.java
index a734c6d267..8bfd6b717a 100644
--- a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/RunToLine.java
+++ b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/actions/RunToLine.java
@@ -52,7 +52,7 @@ public class RunToLine implements IRunToLine, IRunToAddress {
 
 	@Override
 	public boolean canRunToLine(final IFile file, final int lineNumber) {
-		return canRunToLine(file.getLocation().makeAbsolute().toOSString(), lineNumber);
+		return canRunToLine(file.getLocation().makeAbsolute().toString(), lineNumber);
 	}
 
 	@Override
@@ -89,7 +89,7 @@ public class RunToLine implements IRunToLine, IRunToAddress {
 
 	@Override
 	public void runToLine(IFile file, int lineNumber, boolean skipBreakpoints) throws DebugException {
-		runToLine(file.getLocation().makeAbsolute().toOSString(), lineNumber, skipBreakpoints);
+		runToLine(file.getLocation().makeAbsolute().toString(), lineNumber, skipBreakpoints);
 	}
 
 	@Override
diff --git a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/AddressRulerColumn.java b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/AddressRulerColumn.java
index b4c0dbeb56..a98f534ed8 100644
--- a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/AddressRulerColumn.java
+++ b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/AddressRulerColumn.java
@@ -175,7 +175,7 @@ public class AddressRulerColumn extends DisassemblyRulerColumn
 		BigInteger address = doc.getAddressOfLine(line);
 		SourceFileInfo info = doc.getSourceInfo(address);
 		if (info != null) {
-			return info.fFile.getFullPath().toOSString();
+			return info.fFile.getFullPath().toString();
 		}
 		return null;
 	}
diff --git a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/util/StorageEditorInput.java b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/util/StorageEditorInput.java
index 10c56b115c..f42d7dce28 100644
--- a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/util/StorageEditorInput.java
+++ b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/internal/ui/disassembly/util/StorageEditorInput.java
@@ -83,7 +83,7 @@ abstract public class StorageEditorInput implements IStorageEditorInput {
 	 */
 	@Override
 	public String getToolTipText() {
-		return getStorage().getFullPath().toOSString();
+		return getStorage().getFullPath().toString();
 	}
 
 	/**
diff --git a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/AbstractDisassemblyBreakpointsTarget.java b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/AbstractDisassemblyBreakpointsTarget.java
index 6e8926e599..686f56d554 100644
--- a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/AbstractDisassemblyBreakpointsTarget.java
+++ b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/actions/AbstractDisassemblyBreakpointsTarget.java
@@ -333,10 +333,10 @@ public abstract class AbstractDisassemblyBreakpointsTarget
 				if (location == null) {
 					return;
 				}
-				filePath = location.toOSString();
+				filePath = location.toString();
 			} else {
 				resource = ResourcesPlugin.getWorkspace().getRoot();
-				filePath = URIUtil.toPath(fileUri).toOSString();
+				filePath = URIUtil.toPath(fileUri).toString();
 			}
 			int srcLine = selection.getSourceLine();
 			if (interactive) {
diff --git a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java
index d2c9f815c5..19b8f7fb24 100644
--- a/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java
+++ b/dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/sourcelookup/DsfSourceDisplayAdapter.java
@@ -471,7 +471,7 @@ public class DsfSourceDisplayAdapter implements ISourceDisplay, ISteppingControl
 						ITranslationUnit tunit = (ITranslationUnit) artifact;
 						IPath tuPath = tunit.getLocation();
 						if (tuPath != null)
-							missingFile = tuPath.toOSString();
+							missingFile = tuPath.toString();
 					} else {
 						missingFile = ""; //$NON-NLS-1$
 					}
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.arm.tests/src/org/eclipse/cdt/jsoncdb/arm/SystemIncludePathTest.java b/jsoncdb/org.eclipse.cdt.jsoncdb.arm.tests/src/org/eclipse/cdt/jsoncdb/arm/SystemIncludePathTest.java
index e1ceb3819e..7813cf1e49 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.arm.tests/src/org/eclipse/cdt/jsoncdb/arm/SystemIncludePathTest.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.arm.tests/src/org/eclipse/cdt/jsoncdb/arm/SystemIncludePathTest.java
@@ -56,7 +56,7 @@ public class SystemIncludePathTest {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("A:an\\In CLU  de/Pat h")).toOSString();
+		name = (new Path("A:an\\In CLU  de/Pat h")).toString();
 		// -J"A:an\In CLU de/Pat h"
 		result = tcp.processArgs(cwd, "-J" + "\"" + name + "\"" + more);
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludeFile_GCCTest.java b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludeFile_GCCTest.java
index e3fdc91de3..23c15acd2d 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludeFile_GCCTest.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludeFile_GCCTest.java
@@ -82,7 +82,7 @@ public class IncludeFile_GCCTest {
 		parsed = result.getIncludeFiles().get(0);
 		assertEquals("name", name, parsed);
 
-		name = (new Path("A:an\\Include/file.inc")).toOSString();
+		name = (new Path("A:an\\Include/file.inc")).toString();
 		// -includeA:an\Include/file.inc
 		result = new ParseContext();
 		assertEquals(8 + name.length(), testee.processArgument(result, cwd, "-include" + name + more));
@@ -131,7 +131,7 @@ public class IncludeFile_GCCTest {
 		parsed = result.getIncludeFiles().get(0);
 		assertEquals("name", name, parsed);
 
-		name = (new Path("A:an\\In CLU  de/fi le.inc")).toOSString();
+		name = (new Path("A:an\\In CLU  de/fi le.inc")).toString();
 		// -include'A:an\In CLU de/fi le.inc'
 		result = new ParseContext();
 		assertEquals(8 + name.length() + 2,
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludePath_C_POSIXTest.java b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludePath_C_POSIXTest.java
index 4365adbb33..ce7bed677c 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludePath_C_POSIXTest.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/IncludePath_C_POSIXTest.java
@@ -78,7 +78,7 @@ public class IncludePath_C_POSIXTest {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("A:an\\Include/Path")).toOSString();
+		name = (new Path("A:an\\Include/Path")).toString();
 		// -IA:an\Include/Path
 		result = new ParseContext();
 		assertEquals(2 + name.length(), testee.processArgument(result, cwd, "-I" + name + more));
@@ -121,7 +121,7 @@ public class IncludePath_C_POSIXTest {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("A:an\\In CLU  de/Pat h")).toOSString();
+		name = (new Path("A:an\\In CLU  de/Pat h")).toString();
 		// -I'A:an\In CLU de/Pat h'
 		result = new ParseContext();
 		assertEquals(2 + name.length() + 2, testee.processArgument(result, cwd, "-I" + "\"" + name + "\"" + more));
@@ -139,7 +139,7 @@ public class IncludePath_C_POSIXTest {
 		final String more = " -g -MMD -MT CMakeFiles/execut1.dir/util1.c.o -MF \"CMakeFiles/execut1.dir/util1.c.o.d\""
 				+ " -o CMakeFiles/execut1.dir/util1.c.o -c /testprojects/C-subsrc/src/src-sub/main1.c";
 
-		String name = (new Path("a/relative/Include/Path")).toOSString();
+		String name = (new Path("a/relative/Include/Path")).toString();
 		IPath cwd = new Path("/compiler/working/dir");
 		ParseContext result = new ParseContext();
 		assertEquals(2 + name.length(), testee.processArgument(result, cwd, "-I" + name + more));
@@ -147,7 +147,7 @@ public class IncludePath_C_POSIXTest {
 		String absPath = cwd.append(name).toString();
 		assertEquals("name", absPath, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("a\\relative\\Include\\Path")).toOSString();
+		name = (new Path("a\\relative\\Include\\Path")).toString();
 		cwd = new Path("\\compiler\\working\\dir");
 		result = new ParseContext();
 		assertEquals(2 + name.length(), testee.processArgument(result, cwd, "-I" + name + more));
@@ -155,7 +155,7 @@ public class IncludePath_C_POSIXTest {
 		absPath = cwd.append(name).toString();
 		assertEquals("name", absPath, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("../../src/Include/Path")).toOSString();
+		name = (new Path("../../src/Include/Path")).toString();
 		cwd = new Path("/compiler/working/dir");
 		result = new ParseContext();
 		assertEquals(2 + name.length(), testee.processArgument(result, cwd, "-I" + name + more));
@@ -163,7 +163,7 @@ public class IncludePath_C_POSIXTest {
 		absPath = cwd.append(name).toString();
 		assertEquals("name", absPath, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("..\\..\\src\\Include\\Path")).toOSString();
+		name = (new Path("..\\..\\src\\Include\\Path")).toString();
 		cwd = new Path("\\compiler\\working\\dir");
 		result = new ParseContext();
 		assertEquals(2 + name.length(), testee.processArgument(result, cwd, "-I" + name + more));
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/MacrosFile_GCCTest.java b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/MacrosFile_GCCTest.java
index 0b72350ad7..d7f11b774a 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/MacrosFile_GCCTest.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/MacrosFile_GCCTest.java
@@ -82,7 +82,7 @@ public class MacrosFile_GCCTest {
 		parsed = result.getMacroFiles().get(0);
 		assertEquals("name", name, parsed);
 
-		name = (new Path("A:an\\Macros/file.inc")).toOSString();
+		name = (new Path("A:an\\Macros/file.inc")).toString();
 		// -imacrosA:an\Macros/file.inc
 		result = new ParseContext();
 		assertEquals(8 + name.length(), testee.processArgument(result, cwd, "-imacros" + name + more));
@@ -131,7 +131,7 @@ public class MacrosFile_GCCTest {
 		parsed = result.getMacroFiles().get(0);
 		assertEquals("name", name, parsed);
 
-		name = (new Path("A:an\\Ma cr os/fi le.inc")).toOSString();
+		name = (new Path("A:an\\Ma cr os/fi le.inc")).toString();
 		// -imacros'A:an\Ma cr os/fi le.inc'
 		result = new ParseContext();
 		assertEquals(8 + name.length() + 2,
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/SystemIncludePath_C_Test.java b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/SystemIncludePath_C_Test.java
index ccd819a20d..07dbfefba2 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/SystemIncludePath_C_Test.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.core.tests/src/org/eclipse/cdt/jsoncdb/core/internal/SystemIncludePath_C_Test.java
@@ -60,7 +60,7 @@ public class SystemIncludePath_C_Test {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("A:an\\Include/Path")).toOSString();
+		name = (new Path("A:an\\Include/Path")).toString();
 		// -isystem A:an\Include/Path
 		result = new ParseContext();
 		assertEquals(8 + 1 + name.length(), testee.processArgument(result, cwd, "-isystem " + name + more));
@@ -99,7 +99,7 @@ public class SystemIncludePath_C_Test {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("A:an\\In CLU  de/Pat h")).toOSString();
+		name = (new Path("A:an\\In CLU  de/Pat h")).toString();
 		// -isystem"A:an\In CLU de/Pat h"
 		result = new ParseContext();
 		assertEquals(8 + name.length() + 2,
@@ -113,7 +113,7 @@ public class SystemIncludePath_C_Test {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("/Inc/CLUde/Path")).toOSString();
+		name = (new Path("/Inc/CLUde/Path")).toString();
 		// -isystem/Inc/CLUde/Path
 		result = new ParseContext();
 		assertEquals(8 + name.length(), testee.processArgument(result, cwd, "-isystem" + name + more));
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/Arglets.java b/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/Arglets.java
index c0ac01031f..e35c37e6c6 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/Arglets.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/Arglets.java
@@ -194,7 +194,7 @@ public final class Arglets {
 					IPath path = Path.fromOSString(name);
 					if (!path.isAbsolute()) {
 						// prepend CWD
-						name = cwd.append(path).toOSString();
+						name = cwd.append(path).toString();
 					}
 					if (isSystemIncludePath) {
 						resultCollector.addSystemIncludePath(name);
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/ResponseFileArglets.java b/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/ResponseFileArglets.java
index 16f162eb2a..21a552ebbb 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/ResponseFileArglets.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.core/src/org/eclipse/cdt/jsoncdb/core/participant/ResponseFileArglets.java
@@ -71,7 +71,7 @@ public class ResponseFileArglets {
 					IPath path = Path.fromOSString(fname);
 					if (!path.isAbsolute()) {
 						// relative path, prepend CWD
-						fname = parserHandler.getCompilerWorkingDirectory().append(path).toOSString();
+						fname = parserHandler.getCompilerWorkingDirectory().append(path).toString();
 					}
 
 					// parse file
diff --git a/jsoncdb/org.eclipse.cdt.jsoncdb.nvidia.tests/src/org/eclipse/cdt/jsoncdb/nvidia/NvccSystemIncludePathTest.java b/jsoncdb/org.eclipse.cdt.jsoncdb.nvidia.tests/src/org/eclipse/cdt/jsoncdb/nvidia/NvccSystemIncludePathTest.java
index 76ac388c2b..7a3f2c7e1e 100644
--- a/jsoncdb/org.eclipse.cdt.jsoncdb.nvidia.tests/src/org/eclipse/cdt/jsoncdb/nvidia/NvccSystemIncludePathTest.java
+++ b/jsoncdb/org.eclipse.cdt.jsoncdb.nvidia.tests/src/org/eclipse/cdt/jsoncdb/nvidia/NvccSystemIncludePathTest.java
@@ -55,7 +55,7 @@ public class NvccSystemIncludePathTest {
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
 		assertEquals("name", name, result.getSystemIncludePaths().get(0));
 
-		name = (new Path("A:an\\In CLU  de/Pat h")).toOSString();
+		name = (new Path("A:an\\In CLU  de/Pat h")).toString();
 		// -isystem="A:an\In CLU de/Pat h"
 		result = tcp.processArgs(cwd, "-isystem" + "=" + "\"" + name + "\"" + more);
 		assertEquals("#entries", 1, result.getSystemIncludePaths().size());
diff --git a/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence.java b/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence.java
index 0d2e2ecf46..fe63a6b7d4 100644
--- a/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence.java
+++ b/jtag/org.eclipse.cdt.debug.gdbjtag.core/src/org/eclipse/cdt/debug/gdbjtag/core/GDBJtagDSFFinalLaunchSequence.java
@@ -334,7 +334,7 @@ public class GDBJtagDSFFinalLaunchSequence extends FinalLaunchSequence {
 	public void stepSetExecutableFile(final RequestMonitor rm) {
 		final IPath programPath = fGDBBackend.getProgramPath();
 		if (!programPath.isEmpty()) {
-			final String file = programPath.toOSString();
+			final String file = programPath.toString();
 			fCommandControl.queueCommand(
 					fCommandControl.getCommandFactory().createMIFileExecFile(fCommandControl.getContext(), file),
 					new ImmediateDataRequestMonitor<MIInfo>(rm));
@@ -361,7 +361,7 @@ public class GDBJtagDSFFinalLaunchSequence extends FinalLaunchSequence {
 								IGDBJtagConstants.DEFAULT_USE_PROJ_BINARY_FOR_SYMBOLS)) {
 					IPath programFile = fGDBBackend.getProgramPath();
 					if (programFile != null) {
-						symbolsFileName = programFile.toOSString();
+						symbolsFileName = programFile.toString();
 					}
 				} else {
 					symbolsFileName = CDebugUtils.getAttribute(getAttributes(),
@@ -569,7 +569,7 @@ public class GDBJtagDSFFinalLaunchSequence extends FinalLaunchSequence {
 								IGDBJtagConstants.DEFAULT_USE_PROJ_BINARY_FOR_IMAGE)) {
 					IPath programFile = fGDBBackend.getProgramPath();
 					if (programFile != null) {
-						imageFileName = programFile.toOSString();
+						imageFileName = programFile.toString();
 					}
 				} else {
 					imageFileName = CDebugUtils.getAttribute(getAttributes(), IGDBJtagConstants.ATTR_IMAGE_FILE_NAME,
diff --git a/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagStartupTab.java b/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagStartupTab.java
index c32ac9d5df..1dfb234592 100644
--- a/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagStartupTab.java
+++ b/jtag/org.eclipse.cdt.debug.gdbjtag.ui/src/org/eclipse/cdt/debug/gdbjtag/ui/GDBJtagStartupTab.java
@@ -147,7 +147,7 @@ public class GDBJtagStartupTab extends AbstractLaunchConfigurationTab {
 		dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
 		if (dialog.open() == IDialogConstants.OK_ID) {
 			IResource resource = (IResource) dialog.getFirstResult();
-			String arg = resource.getFullPath().toOSString();
+			String arg = resource.getFullPath().toString();
 			String fileLoc = VariablesPlugin.getDefault().getStringVariableManager()
 					.generateVariableExpression("workspace_loc", arg); //$NON-NLS-1$
 			text.setText(fileLoc);
diff --git a/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/ContainerCommandLauncherFactory.java b/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/ContainerCommandLauncherFactory.java
index f07ed6ed9a..4a81405b2d 100644
--- a/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/ContainerCommandLauncherFactory.java
+++ b/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/docker/launcher/ContainerCommandLauncherFactory.java
@@ -319,7 +319,7 @@ public class ContainerCommandLauncherFactory implements ICommandLauncherFactory,
 			for (IPath copiedVolume : copiedVolumes) {
 				if (copiedVolume.isPrefixOf(path)) {
 					IPath newPath = tpath.append(path);
-					String newEntry = newPath.toOSString();
+					String newEntry = newPath.toString();
 					newEntries.add(newEntry);
 					found = true;
 					break;
diff --git a/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerLaunchConfigurationDelegate.java b/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerLaunchConfigurationDelegate.java
index 15ba069db6..695aae6e26 100644
--- a/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerLaunchConfigurationDelegate.java
+++ b/launch/org.eclipse.cdt.docker.launcher/src/org/eclipse/cdt/internal/docker/launcher/ContainerLaunchConfigurationDelegate.java
@@ -180,7 +180,7 @@ public class ContainerLaunchConfigurationDelegate extends GdbLaunchDelegate {
 				// the project
 				if (workingDir == null && projectName != null) {
 					IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
-					workingDir = project.getLocation().toOSString();
+					workingDir = project.getLocation().toString();
 				}
 
 				if (workingDir != null) {
@@ -313,7 +313,7 @@ public class ContainerLaunchConfigurationDelegate extends GdbLaunchDelegate {
 				// the project
 				if (workingDir == null && projectName != null) {
 					IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
-					workingDir = project.getLocation().toOSString();
+					workingDir = project.getLocation().toString();
 				}
 				if (workingDir != null) {
 					IPath workingPath = new Path(workingDir);
diff --git a/launch/org.eclipse.cdt.flatpak.launcher/src/org/eclipse/cdt/flatpak/launcher/FlatpakCommandLauncherFactory.java b/launch/org.eclipse.cdt.flatpak.launcher/src/org/eclipse/cdt/flatpak/launcher/FlatpakCommandLauncherFactory.java
index 1bfa1edbc3..1287bb84d2 100644
--- a/launch/org.eclipse.cdt.flatpak.launcher/src/org/eclipse/cdt/flatpak/launcher/FlatpakCommandLauncherFactory.java
+++ b/launch/org.eclipse.cdt.flatpak.launcher/src/org/eclipse/cdt/flatpak/launcher/FlatpakCommandLauncherFactory.java
@@ -191,11 +191,11 @@ public class FlatpakCommandLauncherFactory
 					}
 					try {
 						Process p1 = ProcessFactory.getFactory()
-								.exec(new String[] { "mkdir", "-p", pluginPath.append(path).toOSString() }); //$NON-NLS-1$ //$NON-NLS-2$
+								.exec(new String[] { "mkdir", "-p", pluginPath.append(path).toString() }); //$NON-NLS-1$ //$NON-NLS-2$
 						int rc1 = waitFor(p1);
 						if (rc1 == 0) {
 							Process p2 = ProcessFactory.getFactory().exec(new String[] { "cp", "-ru", "path", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
-									pluginPath.append(path).removeLastSegments(1).toOSString() });
+									pluginPath.append(path).removeLastSegments(1).toString() });
 							int rc2 = waitFor(p2);
 							if (rc2 == 0) {
 								copiedDirs.add(path);
@@ -270,15 +270,15 @@ public class FlatpakCommandLauncherFactory
 					if (!copiedDirs.contains(path)) {
 						try {
 							Process p1 = ProcessFactory.getFactory()
-									.exec(new String[] { "mkdir", "-p", copiedPath.append(path).toOSString() }); //$NON-NLS-1$ //$NON-NLS-2$
+									.exec(new String[] { "mkdir", "-p", copiedPath.append(path).toString() }); //$NON-NLS-1$ //$NON-NLS-2$
 							int rc1 = waitFor(p1);
 							if (rc1 == 0) {
 								Process p2 = ProcessFactory.getFactory().exec(new String[] { "cp", "-ru", path, //$NON-NLS-1$ //$NON-NLS-2$
-										copiedPath.append(path).removeLastSegments(1).toOSString() });
+										copiedPath.append(path).removeLastSegments(1).toString() });
 								int rc2 = waitFor(p2);
 								if (rc2 == 0) {
 									copiedDirs.add(path);
-									newEntries.add(copiedPath.append(path).toOSString());
+									newEntries.add(copiedPath.append(path).toString());
 									String[] removedEntries = removedDirs.toArray(new String[0]);
 									for (String removedDir : removedEntries) {
 										if (removedDir.startsWith(path)) {
@@ -295,7 +295,7 @@ public class FlatpakCommandLauncherFactory
 							FlatpakLaunchPlugin.log(e);
 						}
 					} else {
-						newEntries.add(copiedPath.append(path).toOSString());
+						newEntries.add(copiedPath.append(path).toString());
 					}
 				}
 				return newEntries;
@@ -321,11 +321,11 @@ public class FlatpakCommandLauncherFactory
 					if (removedDirs.contains(path)) {
 						try {
 							Process p1 = ProcessFactory.getFactory()
-									.exec(new String[] { "mkdir", "-p", hostDir.append(path).toOSString() }); //$NON-NLS-1$ //$NON-NLS-2$
+									.exec(new String[] { "mkdir", "-p", hostDir.append(path).toString() }); //$NON-NLS-1$ //$NON-NLS-2$
 							int rc1 = waitFor(p1);
 							if (rc1 == 0) {
 								Process p2 = ProcessFactory.getFactory().exec(new String[] { "cp", "-ru", path, //$NON-NLS-1$ //$NON-NLS-2$
-										hostDir.append(path).removeLastSegments(1).toOSString() });
+										hostDir.append(path).removeLastSegments(1).toString() });
 								int rc2 = waitFor(p2);
 								if (rc2 == 0) {
 									copiedDirs.add(path);
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate.java
index fb68ed6d8b..9451192c40 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate.java
@@ -396,7 +396,7 @@ abstract public class AbstractCLaunchDelegate extends LaunchConfigurationDelegat
 		if (programPath == null || !programPath.exists() || !programPath.getLocation().toFile().exists()) {
 			abort(LaunchMessages.AbstractCLaunchDelegate_Program_file_does_not_exist,
 					new FileNotFoundException(NLS.bind(LaunchMessages.AbstractCLaunchDelegate_PROGRAM_PATH_not_found,
-							programPath.getLocation().toOSString())),
+							programPath.getLocation().toString())),
 					ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_EXIST);
 		}
 		return programPath;
@@ -445,14 +445,14 @@ abstract public class AbstractCLaunchDelegate extends LaunchConfigurationDelegat
 			}
 		} else {
 			if (path.isAbsolute()) {
-				File dir = new File(path.toOSString());
+				File dir = new File(path.toString());
 				if (dir.isDirectory()) {
 					return dir;
 				}
 				abort(LaunchMessages.AbstractCLaunchDelegate_Working_directory_does_not_exist,
 						new FileNotFoundException(
 								NLS.bind(LaunchMessages.AbstractCLaunchDelegate_WORKINGDIRECTORY_PATH_not_found,
-										path.toOSString())),
+										path.toString())),
 						ICDTLaunchConfigurationConstants.ERR_WORKING_DIRECTORY_DOES_NOT_EXIST);
 			} else {
 				IResource res = ResourcesPlugin.getWorkspace().getRoot().findMember(path);
@@ -462,7 +462,7 @@ abstract public class AbstractCLaunchDelegate extends LaunchConfigurationDelegat
 				abort(LaunchMessages.AbstractCLaunchDelegate_Working_directory_does_not_exist,
 						new FileNotFoundException(
 								NLS.bind(LaunchMessages.AbstractCLaunchDelegate_WORKINGDIRECTORY_PATH_not_found,
-										path.toOSString())),
+										path.toString())),
 						ICDTLaunchConfigurationConstants.ERR_WORKING_DIRECTORY_DOES_NOT_EXIST);
 			}
 		}
@@ -835,7 +835,7 @@ abstract public class AbstractCLaunchDelegate extends LaunchConfigurationDelegat
 		Status status = new Status(IStatus.ERROR, getPluginID(),
 				ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_BINARY,
 				LaunchMessages.AbstractCLaunchDelegate_Program_is_not_a_recognized_executable + " " //$NON-NLS-1$
-						+ exePath.toOSString(),
+						+ exePath.toString(),
 				exception);
 		throw new CoreException(status);
 	}
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate2.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate2.java
index 8cc28c210d..ab820ef5ae 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate2.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/AbstractCLaunchDelegate2.java
@@ -650,7 +650,7 @@ public abstract class AbstractCLaunchDelegate2 extends LaunchConfigurationDelega
 		}
 
 		if (path.isAbsolute()) {
-			File dir = new File(path.toOSString());
+			File dir = new File(path.toString());
 			if (dir.isDirectory()) {
 				return dir;
 			}
@@ -662,8 +662,8 @@ public abstract class AbstractCLaunchDelegate2 extends LaunchConfigurationDelega
 		}
 
 		abort(LaunchMessages.AbstractCLaunchDelegate_Working_directory_does_not_exist,
-				new FileNotFoundException(NLS.bind(
-						LaunchMessages.AbstractCLaunchDelegate_WORKINGDIRECTORY_PATH_not_found, path.toOSString())),
+				new FileNotFoundException(NLS
+						.bind(LaunchMessages.AbstractCLaunchDelegate_WORKINGDIRECTORY_PATH_not_found, path.toString())),
 				ICDTLaunchConfigurationConstants.ERR_WORKING_DIRECTORY_DOES_NOT_EXIST);
 		return null;
 	}
@@ -698,7 +698,7 @@ public abstract class AbstractCLaunchDelegate2 extends LaunchConfigurationDelega
 		File executable = programPath.toFile();
 		if (!executable.exists() || !executable.isFile()) {
 			abort(LaunchMessages.AbstractCLaunchDelegate_Program_file_does_not_exist, new FileNotFoundException(
-					NLS.bind(LaunchMessages.AbstractCLaunchDelegate_PROGRAM_PATH_not_found, programPath.toOSString())),
+					NLS.bind(LaunchMessages.AbstractCLaunchDelegate_PROGRAM_PATH_not_found, programPath.toString())),
 					ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_EXIST);
 		}
 
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/LaunchUtils.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/LaunchUtils.java
index cbf5db8508..1d5c66fee2 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/LaunchUtils.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/LaunchUtils.java
@@ -159,11 +159,11 @@ public class LaunchUtils {
 		if (!executable.exists() || !executable.isFile()) {
 			throwException(Messages.LaunchUtils_program_file_does_not_exist,
 					new FileNotFoundException(
-							MessageFormat.format(Messages.LaunchUtils__0_not_found, programPath.toOSString())),
+							MessageFormat.format(Messages.LaunchUtils__0_not_found, programPath.toString())),
 					ICDTLaunchConfigurationConstants.ERR_PROGRAM_NOT_EXIST);
 		}
 
-		return programPath.toOSString();
+		return programPath.toString();
 	}
 
 	/**
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/LocalRunLaunchDelegate.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/LocalRunLaunchDelegate.java
index 62f8f3f9e5..b269512a66 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/LocalRunLaunchDelegate.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/LocalRunLaunchDelegate.java
@@ -101,7 +101,7 @@ public class LocalRunLaunchDelegate extends AbstractCLaunchDelegate2 {
 
 			String[] arguments = CommandLineUtil.argumentsToArray(args);
 			ArrayList<String> command = new ArrayList<>(1 + arguments.length);
-			command.add(exePath.toOSString());
+			command.add(exePath.toString());
 			command.addAll(Arrays.asList(arguments));
 			monitor.worked(2);
 
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/ProjectRenameChange.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/ProjectRenameChange.java
index b9c748f6e8..e218425394 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/ProjectRenameChange.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/refactoring/ProjectRenameChange.java
@@ -132,7 +132,7 @@ class ProjectRenameChange extends AbstractLaunchConfigChange {
 			pathProgName = pathProgName.removeLastSegments(1).append(newName);
 			if (progExtension != null)
 				pathProgName = pathProgName.addFileExtension(progExtension);
-			copy.setAttribute(ICDTLaunchConfigurationConstants.ATTR_PROGRAM_NAME, pathProgName.toOSString());
+			copy.setAttribute(ICDTLaunchConfigurationConstants.ATTR_PROGRAM_NAME, pathProgName.toString());
 		}
 
 		try {
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/WorkingDirectoryBlock.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/WorkingDirectoryBlock.java
index 1fceb6fc67..f37c80196e 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/WorkingDirectoryBlock.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/internal/ui/WorkingDirectoryBlock.java
@@ -230,7 +230,7 @@ public class WorkingDirectoryBlock extends CLaunchConfigurationTab {
 			if (config != null) {
 				ICProject cProject = CDebugUtils.getCProject(config);
 				if (cProject != null) {
-					fWorkingDirText.setText("${workspace_loc:" + cProject.getPath().makeRelative().toOSString() + "}"); //$NON-NLS-1$ //$NON-NLS-2$
+					fWorkingDirText.setText("${workspace_loc:" + cProject.getPath().makeRelative().toString() + "}"); //$NON-NLS-1$ //$NON-NLS-2$
 					return;
 				}
 			}
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CAbstractMainTab.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CAbstractMainTab.java
index 98ae3a3c20..76da27035e 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CAbstractMainTab.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CAbstractMainTab.java
@@ -188,7 +188,7 @@ public abstract class CAbstractMainTab extends CLaunchConfigurationTab {
 			// New project selected for the first time, set the program name default too.
 			IBinary[] bins = getBinaryFiles(project);
 			if (bins != null && bins.length == 1) {
-				fProgText.setText(bins[0].getResource().getProjectRelativePath().toOSString());
+				fProgText.setText(bins[0].getResource().getProjectRelativePath().toString());
 			}
 		}
 	}
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CMainTab2.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CMainTab2.java
index 44c90a15bd..8571c5a407 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CMainTab2.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CMainTab2.java
@@ -582,7 +582,7 @@ public class CMainTab2 extends CAbstractMainTab {
 
 		if (binary != null) {
 			String path;
-			path = binary.getResource().getProjectRelativePath().toOSString();
+			path = binary.getResource().getProjectRelativePath().toString();
 			config.setAttribute(ICDTLaunchConfigurationConstants.ATTR_PROGRAM_NAME, path);
 			if (!renamed) {
 				String name = binary.getElementName();
diff --git a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java
index d1e5557547..fc90639f61 100644
--- a/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java
+++ b/launch/org.eclipse.cdt.launch/src/org/eclipse/cdt/launch/ui/CommonTabLite.java
@@ -243,7 +243,7 @@ public class CommonTabLite extends AbstractLaunchConfigurationTab {
 				for (int i = 0; i < res.length; i++) {
 					proj = res[i].getProject();
 					if (proj != null && proj.isAccessible()) {
-						return proj.getFullPath().toOSString();
+						return proj.getFullPath().toString();
 					}
 				}
 			}
@@ -274,7 +274,7 @@ public class CommonTabLite extends AbstractLaunchConfigurationTab {
 		Object[] results = dialog.getResult();
 		if ((results != null) && (results.length > 0) && (results[0] instanceof IPath)) {
 			IPath path = (IPath) results[0];
-			String containerName = path.toOSString();
+			String containerName = path.toString();
 			fSharedLocationText.setText(containerName);
 		}
 	}
@@ -302,7 +302,7 @@ public class CommonTabLite extends AbstractLaunchConfigurationTab {
 			if (file != null) {
 				IContainer parent = file.getParent();
 				if (parent != null) {
-					containerName = parent.getFullPath().toOSString();
+					containerName = parent.getFullPath().toString();
 				}
 			}
 			fSharedLocationText.setText(containerName);
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java
index 4a0aec2207..03af008e37 100644
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java
+++ b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java
@@ -324,7 +324,7 @@ public class LlvmEnvironmentVariableSupplier implements IConfigurationEnvironmen
 		// get mingw bin path
 		IPath mingwBinPath = getBinDir();
 		if (mingwBinPath != null) {
-			StringBuilder sB = new StringBuilder(mingwBinPath.toOSString());
+			StringBuilder sB = new StringBuilder(mingwBinPath.toString());
 			// drop bin
 			if (sB.length() >= 3) {
 				sB.delete(sB.length() - 3, sB.length());
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java
index 6cbde1e50d..d57e0ad09d 100644
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java
+++ b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java
@@ -171,7 +171,7 @@ public class LlvmToolOptionPathUtil {
 			IConfiguration[] configs;
 			String projectPath = null;
 			for (IProject proj : projects) {
-				projectPath = proj.getLocation().toOSString();
+				projectPath = proj.getLocation().toString();
 				if (projectPath != null) {
 					//only apply to C++ projects
 					if (FileUtil.containsCppFile(new File(projectPath))) {
diff --git a/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/RemotePath.java b/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/RemotePath.java
index ce63b9bde3..1ee3d917bd 100644
--- a/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/RemotePath.java
+++ b/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/RemotePath.java
@@ -1089,7 +1089,7 @@ public class RemotePath implements IPath, Cloneable {
 	 */
 	@Override
 	public File toFile() {
-		return new File(toOSString());
+		return new File(toString());
 	}
 
 	/* (Intentionally not included in javadoc)
diff --git a/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/services/local/LocalProcessService.java b/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/services/local/LocalProcessService.java
index 7dac4f81b5..325b8767f5 100644
--- a/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/services/local/LocalProcessService.java
+++ b/remote/org.eclipse.remote.core/src/org/eclipse/remote/internal/core/services/local/LocalProcessService.java
@@ -61,7 +61,7 @@ public class LocalProcessService implements IRemoteProcessService {
 			if (workingDirectory == null) {
 				workingDirectory = System.getProperty("user.dir"); //$NON-NLS-1$
 				if (workingDirectory == null) {
-					workingDirectory = Path.ROOT.toOSString();
+					workingDirectory = Path.ROOT.toString();
 				}
 			}
 		}
diff --git a/terminal/plugins/org.eclipse.tm.terminal.connector.local/src/org/eclipse/tm/terminal/connector/local/launcher/LocalLauncherDelegate.java b/terminal/plugins/org.eclipse.tm.terminal.connector.local/src/org/eclipse/tm/terminal/connector/local/launcher/LocalLauncherDelegate.java
index a5c775b06b..3e69ee9f13 100644
--- a/terminal/plugins/org.eclipse.tm.terminal.connector.local/src/org/eclipse/tm/terminal/connector/local/launcher/LocalLauncherDelegate.java
+++ b/terminal/plugins/org.eclipse.tm.terminal.connector.local/src/org/eclipse/tm/terminal/connector/local/launcher/LocalLauncherDelegate.java
@@ -132,7 +132,7 @@ public class LocalLauncherDelegate extends AbstractLauncherDelegate {
 							&& org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot()
 									.getLocation() != null) {
 						cwd = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getLocation()
-								.toOSString();
+								.toString();
 					}
 				}
 			} else {
@@ -143,7 +143,7 @@ public class LocalLauncherDelegate extends AbstractLauncherDelegate {
 
 					IPath p = new Path(resolved);
 					if (p.toFile().canRead() && p.toFile().isDirectory()) {
-						cwd = p.toOSString();
+						cwd = p.toString();
 					}
 				} catch (CoreException ex) {
 					if (Platform.inDebugMode()) {
@@ -378,7 +378,7 @@ public class LocalLauncherDelegate extends AbstractLauncherDelegate {
 					&& org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot() != null
 					&& org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getLocation() != null) {
 				envpList.add("ECLIPSE_WORKSPACE=" + org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot() //$NON-NLS-1$
-						.getLocation().toOSString());
+						.getLocation().toString());
 			}
 		}
 
diff --git a/terminal/plugins/org.eclipse.tm.terminal.connector.process/src/org/eclipse/tm/terminal/connector/process/ProcessSettingsPage.java b/terminal/plugins/org.eclipse.tm.terminal.connector.process/src/org/eclipse/tm/terminal/connector/process/ProcessSettingsPage.java
index 3560c2021b..1ecaa3d2ae 100644
--- a/terminal/plugins/org.eclipse.tm.terminal.connector.process/src/org/eclipse/tm/terminal/connector/process/ProcessSettingsPage.java
+++ b/terminal/plugins/org.eclipse.tm.terminal.connector.process/src/org/eclipse/tm/terminal/connector/process/ProcessSettingsPage.java
@@ -154,7 +154,7 @@ public class ProcessSettingsPage extends AbstractSettingsPage {
 			Bundle bundle = Platform.getBundle("org.eclipse.core.resources"); //$NON-NLS-1$
 			if (bundle != null && bundle.getState() != Bundle.UNINSTALLED && bundle.getState() != Bundle.STOPPING) {
 				dialog.setFilterPath(
-						org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString());
+						org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());
 			}
 		}
 
diff --git a/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/local/showin/ExternalExecutablesDialog.java b/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/local/showin/ExternalExecutablesDialog.java
index 81f03e6a5e..52f1ab4027 100644
--- a/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/local/showin/ExternalExecutablesDialog.java
+++ b/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/local/showin/ExternalExecutablesDialog.java
@@ -192,7 +192,7 @@ public class ExternalExecutablesDialog extends TrayDialog {
 					if (bundle != null && bundle.getState() != Bundle.UNINSTALLED
 							&& bundle.getState() != Bundle.STOPPING) {
 						workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getLocation()
-								.toOSString();
+								.toString();
 					}
 
 					String filterPath = last_filter_path != null ? last_filter_path : workspace;
@@ -268,7 +268,7 @@ public class ExternalExecutablesDialog extends TrayDialog {
 					if (bundle != null && bundle.getState() != Bundle.UNINSTALLED
 							&& bundle.getState() != Bundle.STOPPING) {
 						workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().getLocation()
-								.toOSString();
+								.toString();
 					}
 
 					String filterPath = last_filter_icon != null ? last_filter_icon : workspace;
diff --git a/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/preferences/PreferencePage.java b/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/preferences/PreferencePage.java
index ff85cec8e7..4905c15114 100644
--- a/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/preferences/PreferencePage.java
+++ b/terminal/plugins/org.eclipse.tm.terminal.view.ui/src/org/eclipse/tm/terminal/view/ui/preferences/PreferencePage.java
@@ -156,17 +156,17 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 						IPath p = new Path(text);
 
 						if (p.toFile().isFile() || !p.toFile().exists()) {
-							dialog.setFilterPath(p.removeLastSegments(1).toOSString());
+							dialog.setFilterPath(p.removeLastSegments(1).toString());
 							dialog.setFileName(p.lastSegment());
 						} else if (p.toFile().isDirectory()) {
-							dialog.setFilterPath(p.toOSString());
+							dialog.setFilterPath(p.toString());
 						}
 					}
 
 					String selected = dialog.open();
 					if (selected != null) {
 						IPath sp = new Path(selected);
-						command.setText(sp.toOSString());
+						command.setText(sp.toString());
 					}
 				}
 			});
@@ -174,7 +174,7 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 			String cmd = UIPlugin.getScopedPreferences()
 					.getString(IPreferenceKeys.PREF_LOCAL_TERMINAL_DEFAULT_SHELL_UNIX);
 			if (cmd != null && !"".equals(cmd)) { //$NON-NLS-1$
-				command.setText(new Path(cmd).toOSString());
+				command.setText(new Path(cmd).toString());
 			}
 
 			Composite argsPanel = new Composite(group, SWT.NONE);
@@ -291,11 +291,11 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 				// Determine the filter path
 				String text = workingDir.getText();
 				if (Messages.PreferencePage_workingDir_userhome_label.equals(text)) {
-					dialog.setFilterPath(uh.toOSString());
+					dialog.setFilterPath(uh.toString());
 				} else if (Messages.PreferencePage_workingDir_eclipsehome_label.equals(text)) {
-					dialog.setFilterPath(eh.toOSString());
+					dialog.setFilterPath(eh.toString());
 				} else if (Messages.PreferencePage_workingDir_eclipsews_label.equals(text)) {
-					dialog.setFilterPath(ew.toOSString());
+					dialog.setFilterPath(ew.toString());
 				} else if (text != null && !"".equals(text.trim())) { //$NON-NLS-1$
 					try {
 						// Resolve possible dynamic variables
@@ -320,7 +320,7 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 					} else if (ew.equals(sp)) {
 						workingDir.select(2);
 					} else {
-						workingDir.setText(sp.toOSString());
+						workingDir.setText(sp.toString());
 					}
 				}
 			}
@@ -363,7 +363,7 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 				|| "${workspace_loc}".equals(initialCwd)) { //$NON-NLS-1$
 			workingDir.select(2);
 		} else {
-			workingDir.setText(new Path(initialCwd).toOSString());
+			workingDir.setText(new Path(initialCwd).toString());
 		}
 
 		NoteCompositeHelper.createNoteComposite(group.getFont(), group, Messages.PreferencePage_workingDir_note_label,
@@ -617,7 +617,7 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 				|| "${workspace_loc}".equals(initialCwd)) { //$NON-NLS-1$
 			workingDir.select(2);
 		} else {
-			workingDir.setText(new Path(initialCwd).toOSString());
+			workingDir.setText(new Path(initialCwd).toString());
 		}
 
 		executables.clear();
@@ -635,7 +635,7 @@ public class PreferencePage extends org.eclipse.jface.preference.PreferencePage
 			String text = command.getText();
 			IPath p = new Path(text.trim());
 			UIPlugin.getScopedPreferences().putString(IPreferenceKeys.PREF_LOCAL_TERMINAL_DEFAULT_SHELL_UNIX,
-					p.toFile().isFile() && p.toFile().canRead() && p.toFile().canExecute() ? p.toOSString() : null);
+					p.toFile().isFile() && p.toFile().canRead() && p.toFile().canExecute() ? p.toString() : null);
 
 			text = arguments.getText();
 			UIPlugin.getScopedPreferences().putString(IPreferenceKeys.PREF_LOCAL_TERMINAL_DEFAULT_SHELL_UNIX_ARGS,
diff --git a/windows/org.eclipse.cdt.msw.build.tests/src/org/eclipse/cdt/internal/msw/build/tests/MSVCBuildCommandParserTests.java b/windows/org.eclipse.cdt.msw.build.tests/src/org/eclipse/cdt/internal/msw/build/tests/MSVCBuildCommandParserTests.java
index 87e86fed4b..5b4a163593 100644
--- a/windows/org.eclipse.cdt.msw.build.tests/src/org/eclipse/cdt/internal/msw/build/tests/MSVCBuildCommandParserTests.java
+++ b/windows/org.eclipse.cdt.msw.build.tests/src/org/eclipse/cdt/internal/msw/build/tests/MSVCBuildCommandParserTests.java
@@ -452,7 +452,7 @@ public class MSVCBuildCommandParserTests {
 
 		// parse line
 		parser.startup(cfgDescription, null);
-		parser.processLine("cl " + "/IC:\\path0 " + "/I. " + '"' + file.getLocation().toOSString() + '"');
+		parser.processLine("cl " + "/IC:\\path0 " + "/I. " + '"' + file.getLocation().toString() + '"');
 		parser.shutdown();
 
 		// check entries
@@ -483,7 +483,7 @@ public class MSVCBuildCommandParserTests {
 		// parse line
 		parser.startup(cfgDescription, null);
 		parser.processLine("cl /IC:\\path0 \"file with spaces 1.cpp\"");
-		parser.processLine("cl /IC:\\path0 \"" + file2.getLocation().toOSString() + "\"");
+		parser.processLine("cl /IC:\\path0 \"" + file2.getLocation().toString() + "\"");
 		parser.shutdown();
 
 		// check populated entries
-- 
2.42.1

