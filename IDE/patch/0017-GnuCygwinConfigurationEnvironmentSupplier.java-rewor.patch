From 8a03c598428e5ed441be73e9d368506de0f2361f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=BE=90=E6=8C=81=E6=81=92=20Xu=20Chiheng?=
 <chiheng.xu@gmail.com>
Date: Mon, 8 Apr 2024 08:33:54 +0800
Subject: [PATCH 17/37] GnuCygwinConfigurationEnvironmentSupplier.java : rework

---
 ...ygwinConfigurationEnvironmentSupplier.java | 74 +++++--------------
 1 file changed, 18 insertions(+), 56 deletions(-)

diff --git a/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java b/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java
index 37fda4e164..ad9a8d184c 100644
--- a/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java
+++ b/build/org.eclipse.cdt.managedbuilder.gnu.ui/src/org/eclipse/cdt/managedbuilder/gnu/cygwin/GnuCygwinConfigurationEnvironmentSupplier.java
@@ -14,88 +14,50 @@
  *******************************************************************************/
 package org.eclipse.cdt.managedbuilder.gnu.cygwin;
 
-import org.eclipse.cdt.core.CCorePlugin;
-import org.eclipse.cdt.core.envvar.IEnvironmentVariable;
-import org.eclipse.cdt.core.settings.model.ICConfigurationDescription;
-import org.eclipse.cdt.internal.core.Cygwin;
+import org.eclipse.cdt.core.Cygwin;
 import org.eclipse.cdt.managedbuilder.core.IConfiguration;
 import org.eclipse.cdt.managedbuilder.envvar.IBuildEnvironmentVariable;
 import org.eclipse.cdt.managedbuilder.envvar.IConfigurationEnvironmentVariableSupplier;
 import org.eclipse.cdt.managedbuilder.envvar.IEnvironmentVariableProvider;
 import org.eclipse.cdt.managedbuilder.internal.envvar.BuildEnvVar;
-import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
 
 /**
  * @noextend This class is not intended to be subclassed by clients.
  */
+@SuppressWarnings("restriction")
 public class GnuCygwinConfigurationEnvironmentSupplier implements IConfigurationEnvironmentVariableSupplier {
 	private static final String ENV_PATH = "PATH"; //$NON-NLS-1$
-	private static final String ENV_LANG = "LANG"; //$NON-NLS-1$
-	private static final String ENV_LC_ALL = "LC_ALL"; //$NON-NLS-1$
-	private static final String ENV_LC_MESSAGES = "LC_MESSAGES"; //$NON-NLS-1$
-
-	private static final String PROPERTY_OSNAME = "os.name"; //$NON-NLS-1$
-	private static final String BACKSLASH = java.io.File.separator;
 
+	@SuppressWarnings("nls")
 	@Override
 	public IBuildEnvironmentVariable getVariable(String variableName, IConfiguration configuration,
 			IEnvironmentVariableProvider provider) {
 		if (variableName == null) {
 			return null;
 		}
-
-		if (!System.getProperty(PROPERTY_OSNAME).toLowerCase().startsWith("windows ")) { //$NON-NLS-1$
+		if (!Platform.getOS().equals(Platform.OS_WIN32) || !org.eclipse.cdt.internal.core.Cygwin.isAvailable()) {
 			return null;
 		}
-
-		if (variableName.equalsIgnoreCase(ENV_PATH)) {
-			@SuppressWarnings("nls")
-			String path = "${" + Cygwin.ENV_CYGWIN_HOME + "}" + BACKSLASH + "bin";
-			return new BuildEnvVar(ENV_PATH, path, IBuildEnvironmentVariable.ENVVAR_PREPEND);
-
-		} else if (variableName.equals(Cygwin.ENV_CYGWIN_HOME)) {
-			IEnvironmentVariable varCygwinHome = CCorePlugin.getDefault().getBuildEnvironmentManager()
-					.getVariable(Cygwin.ENV_CYGWIN_HOME, (ICConfigurationDescription) null, false);
-			if (varCygwinHome == null) {
-				// Contribute if the variable does not already come from workspace environment
-				String home = Cygwin.getCygwinHome();
-				if (home == null) {
-					// If the variable is not defined still show it in the environment variables list as a hint to user
-					home = ""; //$NON-NLS-1$
-				}
-				return new BuildEnvVar(Cygwin.ENV_CYGWIN_HOME, new Path(home).toString());
-			}
+		switch (variableName) {
+		case Cygwin.ENV_CYGWIN_HOME:
+			String home = org.eclipse.cdt.internal.core.Cygwin.getCygwinHome();
+			return new BuildEnvVar(variableName, home, IBuildEnvironmentVariable.ENVVAR_REPLACE);
+		case ENV_PATH:
+			String path = org.eclipse.cdt.internal.core.Cygwin.getCygwinHome() + "/bin";
+			return new BuildEnvVar(variableName, path, IBuildEnvironmentVariable.ENVVAR_PREPEND);
+		default:
 			return null;
-
-		} else if (variableName.equalsIgnoreCase(ENV_LANG)) {
-			// Workaround for not being able to select encoding for CDT console -> change codeset to Latin1
-			String langValue = System.getenv(ENV_LANG);
-			if (langValue == null || langValue.length() == 0) {
-				langValue = System.getenv(ENV_LC_ALL);
-			}
-			if (langValue == null || langValue.length() == 0) {
-				langValue = System.getenv(ENV_LC_MESSAGES);
-			}
-			if (langValue != null && langValue.length() > 0) {
-				// langValue is [language[_territory][.codeset][@modifier]], i.e. "en_US.UTF-8@dict"
-				// we replace codeset with Latin1 as CDT console garbles UTF
-				// and ignore modifier which is not used by LANG
-				langValue = langValue.replaceFirst("([^.@]*)(\\..*)?(@.*)?", "$1.ISO-8859-1"); //$NON-NLS-1$ //$NON-NLS-2$
-			} else {
-				langValue = "C.ISO-8859-1"; //$NON-NLS-1$
-			}
-			return new BuildEnvVar(ENV_LANG, langValue);
 		}
-		return null;
 	}
 
 	@Override
 	public IBuildEnvironmentVariable[] getVariables(IConfiguration configuration,
 			IEnvironmentVariableProvider provider) {
-		IBuildEnvironmentVariable varHome = getVariable(Cygwin.ENV_CYGWIN_HOME, configuration, provider);
-		IBuildEnvironmentVariable varLang = getVariable(ENV_LANG, configuration, provider);
-		IBuildEnvironmentVariable varPath = getVariable(ENV_PATH, configuration, provider);
-
-		return new IBuildEnvironmentVariable[] { varHome, varLang, varPath };
+		//@formatter:off
+		return new IBuildEnvironmentVariable[] {
+			getVariable(Cygwin.ENV_CYGWIN_HOME, configuration, provider),
+			getVariable(ENV_PATH, configuration, provider),
+		};
 	}
 }
-- 
2.42.1

