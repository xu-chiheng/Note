diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GdbDebugServicesFactory.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GdbDebugServicesFactory.java
index 20072bceb2..7eba1d1838 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GdbDebugServicesFactory.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GdbDebugServicesFactory.java
@@ -26,7 +26,11 @@
  *******************************************************************************/
 package org.eclipse.cdt.dsf.gdb.service;
 
+import java.util.Map;
+import java.util.TreeMap;
+
 import org.eclipse.cdt.debug.core.CDebugCorePlugin;
+import org.eclipse.cdt.debug.core.ICDTLaunchConfigurationConstants;
 import org.eclipse.cdt.dsf.debug.service.AbstractDsfDebugServicesFactory;
 import org.eclipse.cdt.dsf.debug.service.IBreakpoints;
 import org.eclipse.cdt.dsf.debug.service.IDisassembly;
@@ -46,6 +50,7 @@ import org.eclipse.cdt.dsf.gdb.internal.service.IGDBFocusSynchronizer;
 import org.eclipse.cdt.dsf.gdb.launching.GdbLaunch;
 import org.eclipse.cdt.dsf.gdb.launching.LaunchUtils;
 import org.eclipse.cdt.dsf.gdb.service.command.CommandFactory_6_8;
+import org.eclipse.cdt.dsf.gdb.service.command.CommandFactory_Cygwin;
 import org.eclipse.cdt.dsf.gdb.service.command.GDBControl;
 import org.eclipse.cdt.dsf.gdb.service.command.GDBControl_7_0;
 import org.eclipse.cdt.dsf.gdb.service.command.GDBControl_7_12;
@@ -64,8 +69,13 @@ import org.eclipse.cdt.dsf.mi.service.MIStack;
 import org.eclipse.cdt.dsf.mi.service.command.CommandFactory;
 import org.eclipse.cdt.dsf.service.DsfSession;
 import org.eclipse.cdt.dsf.service.IDsfService;
+import org.eclipse.cdt.internal.core.Cygwin;
+import org.eclipse.cdt.utils.spawner.ProcessFactory;
+import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
+import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunch;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.osgi.util.NLS;
@@ -215,7 +225,46 @@ public class GdbDebugServicesFactory extends AbstractDsfDebugServicesFactory {
 		return new MIBreakpoints(session);
 	}
 
+	private static boolean isCygwin(ILaunchConfiguration config) {
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			String[] envp = null;
+			try {
+				envp = DebugPlugin.getDefault().getLaunchManager().getEnvironment(config);
+			} catch (CoreException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+			TreeMap<String, String> envMap = ProcessFactory.envpToEnvMap(envp);
+			if (envMap.containsKey(Cygwin.ENV_CYGWIN_HOME)) {
+				return true;
+			}
+		}
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			Map<String, Object> attrs = null;
+			try {
+				attrs = config.getAttributes();
+			} catch (CoreException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			String key = ICDTLaunchConfigurationConstants.ATTR_PROJECT_BUILD_CONFIG_ID;
+			if (attrs != null && attrs.containsKey(key)) {
+				Object value = attrs.get(key);
+				String valueString = value.toString();
+				if (valueString.startsWith("cdt.managedbuild.config.gnu.cygwin.")) { //$NON-NLS-1$
+					return true;
+				}
+			}
+		}
+		return false;
+	}
+
 	protected ICommandControl createCommandControl(DsfSession session, ILaunchConfiguration config) {
+		if (isCygwin(config)) {
+			return new GDBControl_7_12(session, config, new CommandFactory_Cygwin());
+		}
+
 		if (compareVersionWith(GDB_7_12_VERSION) >= 0) {
 			return new GDBControl_7_12(session, config, new CommandFactory_6_8());
 		}
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/CommandFactory_Cygwin.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/CommandFactory_Cygwin.java
new file mode 100644
index 0000000000..8dc49fbf41
--- /dev/null
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/command/CommandFactory_Cygwin.java
@@ -0,0 +1,42 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.dsf.gdb.service.command;
+
+import org.eclipse.cdt.dsf.datamodel.IDMContext;
+import org.eclipse.cdt.dsf.debug.service.command.ICommand;
+import org.eclipse.cdt.dsf.debug.service.command.ICommandControlService.ICommandControlDMContext;
+import org.eclipse.cdt.dsf.mi.service.IMIContainerDMContext;
+import org.eclipse.cdt.dsf.mi.service.command.commands.cygwin.CygwinMIEnvironmentCD;
+import org.eclipse.cdt.dsf.mi.service.command.commands.cygwin.CygwinMIEnvironmentDirectory;
+import org.eclipse.cdt.dsf.mi.service.command.commands.cygwin.CygwinMIFileExecAndSymbols;
+import org.eclipse.cdt.dsf.mi.service.command.output.MIInfo;
+
+public class CommandFactory_Cygwin extends CommandFactory_6_8 {
+
+	@Override
+	public ICommand<MIInfo> createMIEnvironmentCD(ICommandControlDMContext ctx, String path) {
+		return new CygwinMIEnvironmentCD(ctx, path);
+	}
+
+	@Override
+	public ICommand<MIInfo> createMIEnvironmentDirectory(IDMContext ctx, String[] paths, boolean reset) {
+		return new CygwinMIEnvironmentDirectory(ctx, paths, reset);
+	}
+
+	@Override
+	public ICommand<MIInfo> createMIFileExecAndSymbols(IMIContainerDMContext dmc, String file) {
+		return new CygwinMIFileExecAndSymbols(dmc, file);
+	}
+
+	@Override
+	public ICommand<MIInfo> createMIFileExecAndSymbols(IMIContainerDMContext dmc) {
+		return new CygwinMIFileExecAndSymbols(dmc);
+	}
+}
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java
index ae8580abde..deed34ef93 100644
--- a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/MIStack.java
@@ -24,6 +24,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.eclipse.cdt.core.Cygwin;
 import org.eclipse.cdt.core.IAddress;
 import org.eclipse.cdt.dsf.concurrent.CountingRequestMonitor;
 import org.eclipse.cdt.dsf.concurrent.DataRequestMonitor;
@@ -64,6 +65,7 @@ import org.eclipse.cdt.dsf.service.DsfSession;
 import org.eclipse.cdt.utils.Addr32;
 import org.eclipse.cdt.utils.Addr64;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
 import org.osgi.framework.BundleContext;
 
@@ -383,8 +385,17 @@ public class MIStack extends AbstractDsfService implements IStack, ICachingServi
 		}
 
 		@Override
+		/**
+		 * @return the host source path of this frame, not the debugger source path
+		 */
 		public String getFile() {
-			return getMIFrame().getFile();
+			//translate debugger path to host source path
+			String debuggerPath = getMIFrame().getFile();
+			String sourcePath = debuggerPath;
+			if (Platform.getOS().equals(Platform.OS_WIN32)) {
+				sourcePath = Cygwin.pathToWindows(debuggerPath);
+			}
+			return sourcePath;
 		}
 
 		@Override
@@ -470,7 +481,7 @@ public class MIStack extends AbstractDsfService implements IStack, ICachingServi
 		fCommandFactory = getServicesTracker().getService(IMICommandControl.class).getCommandFactory();
 
 		getSession().addServiceEventListener(this, null);
-		register(new String[] { IStack.class.getName(), MIStack.class.getName() }, new Hashtable<String, String>());
+		register(new String[] { IStack.class.getName(), MIStack.class.getName() }, new Hashtable<>());
 		rm.done();
 	}
 
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIEnvironmentCD.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIEnvironmentCD.java
new file mode 100644
index 0000000000..48d234a30f
--- /dev/null
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIEnvironmentCD.java
@@ -0,0 +1,20 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.dsf.mi.service.command.commands.cygwin;
+
+import org.eclipse.cdt.core.Cygwin;
+import org.eclipse.cdt.dsf.debug.service.command.ICommandControlService.ICommandControlDMContext;
+import org.eclipse.cdt.dsf.mi.service.command.commands.MIEnvironmentCD;
+
+public class CygwinMIEnvironmentCD extends MIEnvironmentCD {
+	public CygwinMIEnvironmentCD(ICommandControlDMContext ctx, String path) {
+		super(ctx, Cygwin.pathToUnix(path));
+	}
+}
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIEnvironmentDirectory.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIEnvironmentDirectory.java
new file mode 100644
index 0000000000..c37321f1bc
--- /dev/null
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIEnvironmentDirectory.java
@@ -0,0 +1,30 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.dsf.mi.service.command.commands.cygwin;
+
+import org.eclipse.cdt.core.Cygwin;
+import org.eclipse.cdt.dsf.datamodel.IDMContext;
+import org.eclipse.cdt.dsf.mi.service.command.commands.MIEnvironmentDirectory;
+
+public class CygwinMIEnvironmentDirectory extends MIEnvironmentDirectory {
+	public CygwinMIEnvironmentDirectory(IDMContext ctx, String[] paths, boolean reset) {
+		super(ctx, convertPaths(paths), reset);
+	}
+
+	private static String[] convertPaths(String[] paths) {
+		String[] newPaths = new String[paths.length];
+		for (int i = 0; i < paths.length; i++) {
+			String path = paths[i];
+			String newPath = Cygwin.pathToUnix(path);
+			newPaths[i] = newPath;
+		}
+		return newPaths;
+	}
+}
diff --git a/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIFileExecAndSymbols.java b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIFileExecAndSymbols.java
new file mode 100644
index 0000000000..627294872d
--- /dev/null
+++ b/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/commands/cygwin/CygwinMIFileExecAndSymbols.java
@@ -0,0 +1,24 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.dsf.mi.service.command.commands.cygwin;
+
+import org.eclipse.cdt.core.Cygwin;
+import org.eclipse.cdt.dsf.mi.service.IMIContainerDMContext;
+import org.eclipse.cdt.dsf.mi.service.command.commands.MIFileExecAndSymbols;
+
+public class CygwinMIFileExecAndSymbols extends MIFileExecAndSymbols {
+	public CygwinMIFileExecAndSymbols(IMIContainerDMContext dmc) {
+		this(dmc, null);
+	}
+
+	public CygwinMIFileExecAndSymbols(IMIContainerDMContext dmc, String file) {
+		super(dmc, Cygwin.pathToUnix(file));
+	}
+}
