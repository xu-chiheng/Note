From 07e5bfd3357ed31b3f92dcc5a19af4f6dad482bb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=BE=90=E6=8C=81=E6=81=92=20Xu=20Chiheng?=
 <chiheng.xu@gmail.com>
Date: Wed, 10 Apr 2024 04:18:03 +0800
Subject: [PATCH 23/41] managedbuilder.llvm.ui : remove all Java files

---
 .../src/README.txt                            |   3 +
 .../makegen/LlvmDependencyCalculator2.java    |  42 -
 .../LlvmDependencyCalculator2Commands.java    |  59 --
 .../llvm/ui/LlvmBuildEnvironmentVariable.java |  83 --
 .../ui/LlvmEnvironmentVariableSupplier.java   | 450 --------
 .../llvm/ui/LlvmIsToolChainSupported.java     |  55 -
 .../llvm/ui/LlvmProjectNature.java            |  67 --
 .../managedbuilder/llvm/ui/LlvmUIPlugin.java  | 157 ---
 .../ui/preferences/IncludePathListEditor.java |  99 --
 .../ui/preferences/LibraryListEditor.java     | 100 --
 .../ui/preferences/LibraryPathListEditor.java | 103 --
 .../llvm/ui/preferences/LlvmListEditor.java   | 340 ------
 .../ui/preferences/LlvmPreferenceStore.java   | 326 ------
 .../llvm/ui/preferences/Messages.java         |  41 -
 .../ui/preferences/PreferenceConstants.java   |  28 -
 .../ui/preferences/PreferenceInitializer.java |  37 -
 .../llvm/ui/preferences/messages.properties   |  10 -
 .../managedbuilder/llvm/util/FileUtil.java    |  47 -
 .../llvm/util/FindStdLibPath.java             |  77 --
 .../llvm/util/LlvmToolOptionPathUtil.java     | 988 ------------------
 .../llvm/util/ProjectIndex.java               |  32 -
 .../managedbuilder/llvm/util/Separators.java  |  44 -
 22 files changed, 3 insertions(+), 3185 deletions(-)
 create mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/README.txt
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2Commands.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmBuildEnvironmentVariable.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmIsToolChainSupported.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmProjectNature.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmUIPlugin.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/IncludePathListEditor.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryListEditor.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryPathListEditor.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmListEditor.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmPreferenceStore.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/Messages.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceConstants.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceInitializer.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/messages.properties
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FileUtil.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/ProjectIndex.java
 delete mode 100644 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/Separators.java

diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/README.txt b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/README.txt
new file mode 100644
index 0000000000..b2c2e3ce0d
--- /dev/null
+++ b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/README.txt
@@ -0,0 +1,3 @@
+
+All Java files have been removed.
+But the "src" directory must be kept, otherwise, there are error at launching Eclipse Application.
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2.java
deleted file mode 100644
index 54f801d9d3..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.makegen;
-
-import org.eclipse.cdt.managedbuilder.core.IBuildObject;
-import org.eclipse.cdt.managedbuilder.core.ITool;
-import org.eclipse.cdt.managedbuilder.makegen.IManagedDependencyInfo;
-import org.eclipse.cdt.managedbuilder.makegen.gnu.DefaultGCCDependencyCalculator2;
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.runtime.IPath;
-
-public class LlvmDependencyCalculator2 extends DefaultGCCDependencyCalculator2 {
-
-	@Override
-	public IManagedDependencyInfo getDependencySourceInfo(IPath source, IResource resource, IBuildObject buildContext,
-			ITool tool, IPath topBuildDirectory) {
-		return new LlvmDependencyCalculator2Commands(source, resource, buildContext, tool, topBuildDirectory);
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.cdt.managedbuilder.makegen.IManagedDependencyGenerator2#getDependencySourceInfo(org.eclipse.core.runtime.IPath,
-	 * org.eclipse.cdt.managedbuilder.core.IBuildObject, org.eclipse.cdt.managedbuilder.core.ITool, org.eclipse.core.runtime.IPath)
-	 */
-	@Override
-	public IManagedDependencyInfo getDependencySourceInfo(IPath source, IBuildObject buildContext, ITool tool,
-			IPath topBuildDirectory) {
-		return new LlvmDependencyCalculator2Commands(source, buildContext, tool, topBuildDirectory);
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2Commands.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2Commands.java
deleted file mode 100644
index aa349ee11c..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/makegen/LlvmDependencyCalculator2Commands.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.makegen;
-
-import org.eclipse.cdt.managedbuilder.core.IBuildObject;
-import org.eclipse.cdt.managedbuilder.core.ITool;
-import org.eclipse.cdt.managedbuilder.makegen.gnu.DefaultGCCDependencyCalculator2Commands;
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.runtime.IPath;
-
-public class LlvmDependencyCalculator2Commands extends DefaultGCCDependencyCalculator2Commands {
-
-	/**
-	 * @param source IPath
-	 * @param resource IResource
-	 * @param buildContext IBuildObject
-	 * @param tool ITool
-	 * @param topBuildDirectory IPath
-	 */
-	public LlvmDependencyCalculator2Commands(IPath source, IResource resource, IBuildObject buildContext, ITool tool,
-			IPath topBuildDirectory) {
-		super(source, resource, buildContext, tool, topBuildDirectory);
-	}
-
-	/**
-	 * @param source IPath
-	 * @param buildContext IBuildObject
-	 * @param tool ITool
-	 * @param topBuildDirectory IPath
-	 */
-	public LlvmDependencyCalculator2Commands(IPath source, IBuildObject buildContext, ITool tool,
-			IPath topBuildDirectory) {
-		super(source, buildContext, tool, topBuildDirectory);
-	}
-
-	@Override
-	public String[] getDependencyCommandOptions() {
-		String[] options = new String[2];
-		// -MMD
-		options[0] = "-MMD"; //$NON-NLS-1$
-		// -MP
-		options[1] = "-MP"; //$NON-NLS-1$
-		// TODO: Check if -MF and/or -MT supported or needed with Clang
-		return options;
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmBuildEnvironmentVariable.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmBuildEnvironmentVariable.java
deleted file mode 100644
index a949b505ea..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmBuildEnvironmentVariable.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2015 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui;
-
-import org.eclipse.cdt.managedbuilder.envvar.IBuildEnvironmentVariable;
-
-/**
- * Implemented type that contains BuildEnvironmentalVariables.
- *
- */
-public class LlvmBuildEnvironmentVariable implements IBuildEnvironmentVariable {
-
-	private final String name;
-	private final String value;
-	private final int operation;
-
-	/**
-	 * Constructor.
-	 *
-	 * @param name Name for the environment variable
-	 * @param value Value for the environment variable
-	 * @param operation Operation of the environment variable
-	 */
-	public LlvmBuildEnvironmentVariable(String name, String value, int operation) {
-		super();
-		this.name = name;
-		this.value = value;
-		this.operation = operation;
-	}
-
-	/**
-	 * Get a delimiter.
-	 *
-	 * @return String delimiter
-	 */
-	@Override
-	public String getDelimiter() {
-		return ";"; //$NON-NLS-1$
-	}
-
-	/**
-	 * Get name of the llvm environment variable.
-	 *
-	 * @return name The name of the llvm environment variable
-	 */
-	@Override
-	public String getName() {
-		return this.name;
-	}
-
-	/**
-	 * Get operation of the llvm environment variable.
-	 *
-	 * @return operation The operation of the llvm environment variable
-	 */
-	@Override
-	public int getOperation() {
-		return this.operation;
-	}
-
-	/**
-	 * Get value of the llvm environment variable.
-	 *
-	 * @return value The value of the llvm environment variable.
-	 */
-	@Override
-	public String getValue() {
-		return this.value;
-	}
-
-}
\ No newline at end of file
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java
deleted file mode 100644
index 4a0aec2207..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmEnvironmentVariableSupplier.java
+++ /dev/null
@@ -1,450 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010, 2016 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *      Petri Tuononen - Initial implementation
- *      Marc-Andre Laperle (Ericsson)
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui;
-
-import java.io.File;
-import java.util.HashMap;
-
-import org.eclipse.cdt.internal.core.MinGW;
-import org.eclipse.cdt.managedbuilder.core.IConfiguration;
-import org.eclipse.cdt.managedbuilder.envvar.IBuildEnvironmentVariable;
-import org.eclipse.cdt.managedbuilder.envvar.IConfigurationEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.envvar.IEnvironmentVariableProvider;
-import org.eclipse.cdt.managedbuilder.gnu.cygwin.GnuCygwinConfigurationEnvironmentSupplier;
-import org.eclipse.cdt.managedbuilder.gnu.mingw.MingwEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.ui.preferences.LlvmPreferenceStore;
-import org.eclipse.cdt.managedbuilder.llvm.util.Separators;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-
-/**
- * Contains LLVM environment variables.
- *
- * @noextend This class is not intended to be subclassed by clients.
- */
-public class LlvmEnvironmentVariableSupplier implements IConfigurationEnvironmentVariableSupplier {
-	// toggle for preference changes
-	private static boolean preferencesChanged = true;
-	// LLVM environment variable data structure
-	private static HashMap<String, LlvmBuildEnvironmentVariable> llvmEnvironmentVariables = new HashMap<>(6);
-	// Environment variables for HashMap usage
-	private static final String ENV_VAR_NAME_LLVM_BIN = "LLVM_BIN_PATH"; //$NON-NLS-1$
-	private static final String ENV_VAR_NAME_LLVMINTERP = "LLVMINTERP"; //$NON-NLS-1$
-	private static final String ENV_VAR_NAME_PATH = "PATH"; //$NON-NLS-1$
-	private static final String ENV_VAR_NAME_INCLUDE_PATH = "INCLUDE_PATH"; //$NON-NLS-1$
-	private static final String ENV_VAR_NAME_LIBRARY_PATH = "LLVM_LIB_SEARCH_PATH"; //$NON-NLS-1$
-	private static final String ENV_VAR_NAME_LIBRARIES = "LIBRARIES"; //$NON-NLS-1$
-
-	/**
-	 * Initializes llvm environment variable paths from the system environment variables.
-	 */
-	public static void initializePaths() { //TODO: Is this actually called anywhere?
-		// get bin path
-		String binPath = getBinPath();
-		// set LLVM bin path environment variable
-		setLlvmEnvironmentVariableReplace(ENV_VAR_NAME_LLVM_BIN, binPath);
-		// if bin path exists
-		if (binPath != null && binPath.length() != 0) {
-			String pathStr = binPath;
-			// if OS is Windows (Windows specific settings)
-			if (System.getProperty("os.name").toLowerCase().indexOf("win") >= 0) { //$NON-NLS-1$ //$NON-NLS-2$
-				try {
-					// try to find mingw or cygwin path from PATH environment variable
-					IBuildEnvironmentVariable envPath = llvmEnvironmentVariables.get(ENV_VAR_NAME_PATH);
-					IBuildEnvironmentVariable mingwPath = null, cygwinPath = null;
-					// if path is empty
-					if (envPath == null) {
-						// try to find mingw path from MingwEnvironmentVariableSupplier
-						IConfigurationEnvironmentVariableSupplier mingwEnvironmentVariables = new MingwEnvironmentVariableSupplier();
-						mingwPath = mingwEnvironmentVariables.getVariable(ENV_VAR_NAME_PATH, null, null);
-						// try to find cygwin path from GnuCygwinConfigurationEnvironmentSupplier
-						IConfigurationEnvironmentVariableSupplier cygwinEnvironmentVariables = new GnuCygwinConfigurationEnvironmentSupplier();
-						cygwinPath = cygwinEnvironmentVariables.getVariable(ENV_VAR_NAME_PATH, null, null);
-
-					}
-					// if mingw found
-					if (mingwPath != null) {
-						//form full path
-						pathStr = pathStr + System.getProperty("path.separator") + mingwPath.getValue(); //$NON-NLS-1$
-					}
-					// if cygwin found
-					if (cygwinPath != null) {
-						//form full path
-						pathStr = pathStr + System.getProperty("path.separator") + cygwinPath.getValue(); //$NON-NLS-1$
-					}
-				} catch (Exception e) {
-					//TODO: Emit proper error message and enter it to Eclipse error log.
-					e.printStackTrace();
-				}
-			}
-			//initialize environment variable cache values
-			setLlvmEnvironmentVariable(ENV_VAR_NAME_PATH, pathStr);
-			setLlvmEnvironmentVariable(ENV_VAR_NAME_LLVMINTERP, binPath + Separators.getFileSeparator() + "lli"); //$NON-NLS-1$
-			setLlvmEnvironmentVariable(ENV_VAR_NAME_INCLUDE_PATH, getSysEnvPath(ENV_VAR_NAME_INCLUDE_PATH));
-			setLlvmEnvironmentVariable(ENV_VAR_NAME_LIBRARY_PATH, getSysEnvPath(ENV_VAR_NAME_LIBRARY_PATH));
-			setLlvmEnvironmentVariable(ENV_VAR_NAME_LIBRARIES, getSysEnvPath(ENV_VAR_NAME_LIBRARIES));
-			preferencesChanged = false;
-		}
-	}
-
-	/**
-	 * Returns LLVM bin path
-	 *
-	 * @return LLVM bin path
-	 */
-	public static String getBinPath() {
-		return findBinDir(ENV_VAR_NAME_LLVM_BIN, "bin"); //$NON-NLS-1$
-	}
-
-	/**
-	 * Returns LLVM include paths
-	 *
-	 * @return LLVM include paths
-	 */
-	public static String getIncludePath() {
-		return getLlvmEnvironmentVariable(ENV_VAR_NAME_INCLUDE_PATH).getValue();
-	}
-
-	/**
-	 * Returns LLVM library paths
-	 *
-	 * @return LLVM library paths
-	 */
-	public static String getLibraryPath() {
-		return getLlvmEnvironmentVariable(ENV_VAR_NAME_LIBRARY_PATH).getValue();
-	}
-
-	/**
-	 * Returns LLVM libraries
-	 *
-	 * @return LLVM libraries
-	 */
-	public static String getLibraries() {
-		return getLlvmEnvironmentVariable(ENV_VAR_NAME_LIBRARIES).getValue();
-	}
-
-	/**
-	 * Sets path to LLVM bin.
-	 *
-	 * @param path Path to LLVM bin location.
-	 */
-	public static void setBinPath(String path) {
-		setLlvmEnvironmentVariableReplace(ENV_VAR_NAME_LLVM_BIN, path);
-	}
-
-	/**
-	 * Appends a new include path.
-	 *
-	 * @param path Include path
-	 */
-	public static void addIncludePath(String path) {
-		String existingIncPaths = getIncludePath();
-		//add the include path only if it doesn't already exists
-		if (!existingIncPaths.contains(path)) {
-			appendLlvmEnvironmentVariable(ENV_VAR_NAME_INCLUDE_PATH, existingIncPaths, path);
-		}
-	}
-
-	/**
-	 * Appends a new library path.
-	 *
-	 * @param path Library path
-	 */
-	public static void addLibraryPath(String path) {
-		String existingLibPaths = getLibraryPath();
-		//add the library path only if it doesn't already exists
-		if (!existingLibPaths.contains(path)) {
-			appendLlvmEnvironmentVariable(ENV_VAR_NAME_LIBRARY_PATH, existingLibPaths, path);
-		}
-	}
-
-	/**
-	 * Appends a new library.
-	 *
-	 * @param lib Library file
-	 */
-	public static void addLibrary(String lib) {
-		String existingLibs = getLibraries();
-		//add the library only if it doesn't already exists
-		if (!existingLibs.contains(lib)) {
-			appendLlvmEnvironmentVariable(ENV_VAR_NAME_LIBRARIES, existingLibs, lib);
-		}
-	}
-
-	/**
-	 * This is to be called if some of the preference paths have changed.
-	 */
-	public static void notifyPreferenceChange() { //TODO: Change
-		preferencesChanged = true;
-	}
-
-	/**
-	 * Returns a specific path for given parameters.
-	 *
-	 * @param pathKey Path for specific location
-	 * @param subDirName Additional sub-path
-	 * @return bin path
-	 */
-	private static String findBinDir(String pathKey, String subDirName) {
-		String resultPath = null;
-		// If preferences haven't been changed, try to find the bin path from the LLVM environment
-		// variable map.
-		if (!preferencesChanged) { //TODO: Change
-			//get current path
-			LlvmBuildEnvironmentVariable earlierValue = llvmEnvironmentVariables.get(pathKey);
-			//if earlier LlvmBuildEnvironmentVariable exists
-			if (null != earlierValue) {
-				//return current path
-				return earlierValue.getValue();
-			}
-		} else {
-			// Try if the path is set in the LLVM plug-in preferences
-			String preferenceLocation = LlvmPreferenceStore.getBinPath();
-			// if preference exists
-			if (null != preferenceLocation) {
-				// remove white spaces from preference location
-				preferenceLocation = preferenceLocation.trim();
-				// if preference location is not empty
-				if (preferenceLocation.length() != 0) {
-					// get path for LLVM executable
-					resultPath = getDirIfLlvmFound(preferenceLocation, null);
-					// if LLVM executable path doesn't exist
-					if (null == resultPath) {
-						// If no luck check next with sub directory name appended
-						resultPath = getDirIfLlvmFound(preferenceLocation, subDirName);
-					}
-				}
-			}
-			if (null == resultPath) {
-				// If still no luck try all folders listed in PATH
-				String pathVariable = System.getenv(ENV_VAR_NAME_PATH);
-				// split paths to String array
-				String[] paths = pathVariable.split(Separators.getPathSeparator());
-				// check every path if LLVM executable is found
-				for (String pathStr : paths) {
-					resultPath = getDirIfLlvmFound(pathStr, null);
-					// stop loop if LLVM executable path is found
-					if (null != resultPath) {
-						break;
-					}
-				}
-			}
-			// return found path
-			return resultPath;
-		}
-		return null;
-	}
-
-	/**
-	 * Returns LLVM executable path.
-	 *
-	 * @param candidatePath Suggestion for LLVM executable path
-	 * @param subPath Additional sub-path for LLVM executable path
-	 * @return Full path for LLVM executable if valid, otherwise null
-	 */
-	private static String getDirIfLlvmFound(String candidatePath, String subPath) {
-		String llvmPath = candidatePath;
-		// If there is a trailing / or \, remove it
-		if (llvmPath.endsWith(Separators.getFileSeparator()) && llvmPath.length() > 1) {
-			llvmPath = llvmPath.substring(0, candidatePath.length() - 1);
-		}
-		// If subPath exists and is not empty -> append it to candidatePath.
-		if (null != subPath && !subPath.isEmpty()) {
-			// Form full path.
-			llvmPath = llvmPath + Separators.getFileSeparator() + subPath;
-		}
-		// Return a full path for LLVM executable if it's valid, otherwise null.
-		return getBinDirIfLlvm_ar(llvmPath);
-	}
-
-	/**
-	 * Returns the full path for llvm executable if the bin path given
-	 * as a parameter is found and executable exists in that path.
-	 *
-	 * @param binPathTemp User provided bin directory path
-	 * @return bin path where llvm-ar is located if executable exists
-	 */
-	private static String getBinDirIfLlvm_ar(String binPathTemp) {
-		//if given directory is found
-		if (new Path(binPathTemp).toFile().isDirectory()) {
-			String llvm_executable = "llvm-ar"; //$NON-NLS-1$
-			File arFileFullPath = null;
-			// If OS is Windows -> add .exe to the executable name.
-			if (System.getProperty("os.name").toLowerCase().indexOf("win") >= 0) { //$NON-NLS-1$//$NON-NLS-2$
-				llvm_executable = llvm_executable + ".exe"; //$NON-NLS-1$
-			}
-			// Form full executable path
-			arFileFullPath = new File(binPathTemp, llvm_executable);
-			// Check if file exists -> proper LLVM installation exists.
-			if (arFileFullPath.isFile()) {
-				// Return path where llvm-ar exists.
-				return binPathTemp;
-			}
-		}
-		return null;
-	}
-
-	/**
-	 * @return location of $MINGW_HOME/bin folder on the file-system.
-	 * @deprecated. Deprecated as of CDT 8.2. Note that MinGW root path in general may depend on configuration.
-	 *
-	 * If you use this do not cache results to ensure user preferences are accounted for.
-	 * Please rely on internal caching.
-	 */
-	@Deprecated
-	private static IPath getBinDir() {
-		IPath binDir = null;
-		String minGWHome = MinGW.getMinGWHome();
-		if (minGWHome != null) {
-			binDir = new Path(minGWHome).append("bin"); //$NON-NLS-1$
-		}
-		return binDir;
-	}
-
-	/**
-	 * Returns stdc++ library path located in MinGW installation.
-	 *
-	 * @return stdc++ library path for MinGW
-	 */
-	public static String getMinGWStdLib() {
-		// get mingw bin path
-		IPath mingwBinPath = getBinDir();
-		if (mingwBinPath != null) {
-			StringBuilder sB = new StringBuilder(mingwBinPath.toOSString());
-			// drop bin
-			if (sB.length() >= 3) {
-				sB.delete(sB.length() - 3, sB.length());
-				// append mingw lib subdir
-				sB.append("lib\\gcc\\mingw32\\"); //$NON-NLS-1$
-				// get all files in the directory
-				File f = new File(sB.toString());
-				if (f.isDirectory()) {
-					String[] list = f.list();
-					if (list.length > 0) {
-						// append the first dir
-						sB.append(list[0]);
-						return sB.toString();
-					}
-				}
-			}
-		}
-
-		return null;
-	}
-
-	/**
-	 *
-	 * Returns LLVM environment variable.
-	 *
-	 * @param envName Name of the environment variable
-	 */
-	public static LlvmBuildEnvironmentVariable getLlvmEnvironmentVariable(String envName) {
-		return llvmEnvironmentVariables.get(envName);
-	}
-
-	/**
-	 * Sets LLVM environment variable.
-	 *
-	 * @param name Name for the environment variable
-	 * @param path Path for the environment variable
-	 */
-	private static void setLlvmEnvironmentVariable(String name, String path) {
-		// append a new path in front of the the old path in HashMap that contains
-		// the specific LLVM environment variable
-		llvmEnvironmentVariables.put(name,
-				new LlvmBuildEnvironmentVariable(name, path, IBuildEnvironmentVariable.ENVVAR_APPEND));
-	}
-
-	/**
-	 * Sets LLVM environment variable by replacing the existing paths.
-	 *
-	 * @param name Name for the environment variable
-	 * @param path Path for the environment variable
-	 */
-	public static void setLlvmEnvironmentVariableReplace(String name, String path) {
-		// replace the old path in HashMap that contains the specific LLVM environment variable
-		llvmEnvironmentVariables.put(name,
-				new LlvmBuildEnvironmentVariable(name, path, IBuildEnvironmentVariable.ENVVAR_REPLACE));
-	}
-
-	/**
-	 * Appends a new LLVM environment variable to existing list.
-	 *
-	 * @param name Name of the preference
-	 * @param oldPath Old paths/preference values
-	 * @param path New path to be added to the environment variable
-	 */
-	public static void appendLlvmEnvironmentVariable(String name, String oldPath, String path) {
-		String newPath = null;
-		boolean ok = false;
-		// if oldPath exists
-		if (oldPath != null) {
-			//if the oldPath isn't empty
-			if (!oldPath.trim().isEmpty()) {
-				StringBuilder sB = new StringBuilder();
-				// append old path
-				sB.append(oldPath);
-				// append a path separator
-				sB.append(Separators.getPathSeparator());
-				// append the new path
-				sB.append(path);
-				// construct a new full path
-				newPath = sB.toString();
-				ok = true;
-			}
-		}
-		if (!ok) {
-			newPath = path;
-		}
-		// Set new path to the HashMap that contains the specific LLVM environment variable
-		// if newPath exists.
-		if (newPath != null) {
-			// if the newPath isn't empty
-			if (!newPath.trim().isEmpty()) {
-				// add new values to the LLVM environment variable
-				llvmEnvironmentVariables.put(name,
-						new LlvmBuildEnvironmentVariable(name, newPath, IBuildEnvironmentVariable.ENVVAR_APPEND));
-			}
-		}
-	}
-
-	/**
-	 * Returns a system environment variable path
-	 *
-	 * @param envName Environment variable name
-	 * @return system environment variable path
-	 */
-	private static String getSysEnvPath(String envName) {
-		String path = System.getenv(envName);
-		if (path != null) {
-			return path;
-		}
-		return ""; //$NON-NLS-1$
-	}
-
-	@Override
-	public IBuildEnvironmentVariable getVariable(String variableName, IConfiguration configuration,
-			IEnvironmentVariableProvider provider) {
-		return llvmEnvironmentVariables.get(variableName);
-	}
-
-	@Override
-	public IBuildEnvironmentVariable[] getVariables(IConfiguration configuration,
-			IEnvironmentVariableProvider provider) {
-		return llvmEnvironmentVariables.values().toArray(new IBuildEnvironmentVariable[0]);
-	}
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmIsToolChainSupported.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmIsToolChainSupported.java
deleted file mode 100644
index 464124e5c9..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmIsToolChainSupported.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2015 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui;
-
-import org.eclipse.cdt.managedbuilder.core.IManagedIsToolChainSupported;
-import org.eclipse.cdt.managedbuilder.core.IToolChain;
-import org.osgi.framework.Version;
-
-/**
- * Based on MingwIsToolChainSupported.
- *
- */
-public class LlvmIsToolChainSupported implements IManagedIsToolChainSupported {
-
-	private final boolean supported;
-
-	/**
-	 * Constructor.
-	 * LLVM Toolchain is supported if binary path for LLVM Tools can be found.
-	 */
-	public LlvmIsToolChainSupported() {
-		// Only supported if we can find the llvm tools.
-		this.supported = LlvmEnvironmentVariableSupplier.getBinPath() != null;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.cdt.managedbuilder.core.IManagedIsToolChainSupported#isSupported(org.eclipse.cdt.managedbuilder.core.IToolChain,
-	 * org.osgi.framework.Version, java.lang.String)
-	 */
-	/**
-	 * Return a boolean value that informs if the LLVM Toolchain is supported.
-	 */
-	@Override
-	public boolean isSupported(IToolChain toolChain,
-			/*
-			 * Version is supported from CDT 7.1.0.
-			 * Use org.osgi.framework.PluginVersionIdentifier with older CDT versions.
-			 */
-			Version version, String instance) {
-		return this.supported;
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmProjectNature.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmProjectNature.java
deleted file mode 100644
index 6d95f5144f..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmProjectNature.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2015 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui;
-
-import org.eclipse.core.resources.IProject;
-import org.eclipse.core.resources.IProjectNature;
-import org.eclipse.core.runtime.CoreException;
-
-/**
- * Implements project nature for LLVM projects.
- *
- */
-public class LlvmProjectNature implements IProjectNature {
-
-	private IProject project;
-
-	/**
-	 * Configure the project which have this project nature.
-	 */
-	@Override
-	public void configure() throws CoreException {
-		// Add nature-specific information
-		// for the project, such as adding a builder
-		// to a project's build spec.
-	}
-
-	/**
-	 * Deconfigure those projects which have this project nature.
-	 */
-	@Override
-	public void deconfigure() throws CoreException {
-		// Remove the nature-specific information.
-	}
-
-	/**
-	 * Return the project.
-	 *
-	 * @return IProject
-	 */
-	@Override
-	public IProject getProject() {
-		return this.project;
-	}
-
-	/**
-	 * Set the project.
-	 *
-	 * @param proj IProject
-	 */
-	@Override
-	public void setProject(IProject proj) {
-		this.project = proj;
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmUIPlugin.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmUIPlugin.java
deleted file mode 100644
index 9da2773ac6..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/LlvmUIPlugin.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui;
-
-import java.io.IOException;
-import java.util.MissingResourceException;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-
-import org.eclipse.core.runtime.FileLocator;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
-import org.osgi.framework.BundleContext;
-
-/**
- * The activator class controls the plug-in life cycle.
- * The main plugin class to be used in the desktop.
- *
- * @noextend This class is not intended to be subclassed by clients.
- */
-public class LlvmUIPlugin extends AbstractUIPlugin {
-
-	//The plug-in ID
-	public static final String PLUGIN_ID = "org.eclipse.cdt.managedbuilder.llvm.ui"; //$NON-NLS-1$
-
-	//The shared instance
-	private static LlvmUIPlugin plugin;
-
-	//Resource bundle
-	private ResourceBundle resourceBundle;
-
-	//Name for the properties file
-	private final static String PROPERTIES = "plugin.properties"; //$NON-NLS-1$
-
-	//Property Resource bundle
-	private PropertyResourceBundle properties;
-
-	/**
-	 * Constructor.
-	 */
-	public LlvmUIPlugin() {
-		super();
-		plugin = this;
-	}
-
-	@Override
-	public void start(BundleContext context) throws Exception {
-		super.start(context);
-		plugin = this;
-		//		LlvmEnvironmentVariableSupplier.initializePaths();
-	}
-
-	@Override
-	public void stop(BundleContext context) throws Exception {
-		super.stop(context);
-		plugin = null;
-		this.resourceBundle = null;
-	}
-
-	/**
-	 * Returns the shared instance
-	 *
-	 * @return the shared instance
-	 */
-	public static LlvmUIPlugin getDefault() {
-		return plugin;
-	}
-
-	/**
-	 * Returns the string from the plugin's resource bundle,
-	 * or 'key' if not found.
-	 */
-	public static String getResourceString(String key) {
-		ResourceBundle bundle = LlvmUIPlugin.getDefault().getResourceBundle();
-		try {
-			return (bundle != null) ? bundle.getString(key) : key;
-		} catch (MissingResourceException e) {
-			return key;
-		}
-	}
-
-	/**
-	 * Returns the plugin's resource bundle,
-	 */
-	public ResourceBundle getResourceBundle() {
-		try {
-			if (this.resourceBundle == null)
-				this.resourceBundle = ResourceBundle.getBundle(this.getClass().getName() + "Resources"); //$NON-NLS-1$
-		} catch (MissingResourceException x) {
-			this.resourceBundle = null;
-		}
-		return this.resourceBundle;
-	}
-
-	/**
-	 * Log error.
-	 *
-	 * @param e
-	 */
-	public void log(Throwable e) {
-		log(new Status(IStatus.ERROR, PLUGIN_ID, IStatus.ERROR, "Error", e)); //$NON-NLS-1$
-	}
-
-	/**
-	 * Log status.
-	 *
-	 * @param status
-	 */
-	public void log(IStatus status) {
-		getLog().log(status);
-	}
-
-	/**
-	 * Get plugin.properties
-	 *
-	 * @return PropertyResourceBundle
-	 */
-	public PropertyResourceBundle getProperties() {
-		if (this.properties == null) {
-			try {
-				this.properties = new PropertyResourceBundle(
-						FileLocator.openStream(this.getBundle(), new Path(PROPERTIES), false));
-			} catch (IOException e) {
-				//log error
-				e.getMessage();
-			}
-		}
-		return this.properties;
-	}
-
-	/**
-	 * Get String from the plugin.properties file
-	 *
-	 * @param var Variable name wanted as a String e.g. "ToolName.assembler.llvm"
-	 * @return String e.g. LLVM assembler
-	 */
-	public static String getPropertyString(String var) {
-		PropertyResourceBundle properties = LlvmUIPlugin.getDefault().getProperties();
-		return properties.getString(var);
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/IncludePathListEditor.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/IncludePathListEditor.java
deleted file mode 100644
index 5831b3af3a..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/IncludePathListEditor.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010, 2013 Nokia Siemens Networks Oyj, Finland and others.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.util.LlvmToolOptionPathUtil;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.DirectoryDialog;
-import org.eclipse.swt.widgets.List;
-
-/**
- * New implementation of LlvmListEditor.
- * Used to select an include path from the dialog.
- *
- */
-public class IncludePathListEditor extends LlvmListEditor {
-
-	/**
-	 * Constructor.
-	 *
-	 * @param name the name of the preference this field editor works on
-	 * @param labelText the label text of the field editor
-	 * @param parent the parent of the field editor's control
-	 */
-	IncludePathListEditor(String name, String labelText, Composite parent) {
-		super(name, labelText, parent);
-	}
-
-	@Override
-	/**
-	 * Functionality for New button.
-	 * Shows a browser dialog to select a directory and returns that directory path.
-	 */
-	protected String getNewInputObject() {
-		DirectoryDialog dlg = new DirectoryDialog(getShell());
-		dlg.setText(Messages.IncludePathListEditor_0);
-		dlg.setMessage(Messages.IncludePathListEditor_1);
-		String dir = dlg.open();
-		if (dir == null) {
-			return null;
-		}
-		//remove white spaces
-		dir = dir.trim();
-		if (dir.length() != 0) {
-			//get all existing items in the list
-			String[] existingItems = getList().getItems();
-			//check that the list doesn't already contain the added item
-			if (existingItems.length > 0) {
-				//return null if duplicate item found
-				for (String item : existingItems) {
-					if (item.equalsIgnoreCase(dir)) {
-						return null;
-					}
-				}
-			}
-			//add a new include path to LLVM preference store
-			LlvmPreferenceStore.appendIncludePath(dir);
-			//add a new include path to LLVM assembler's option
-			LlvmToolOptionPathUtil.addLlvmIncludePath(dir);
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-			return dir;
-		}
-		return null;
-	}
-
-	@Override
-	/**
-	 * Removes the path from the list as well as from the Tool's Option.
-	 */
-	protected void removePressed() {
-		List incList = getList();
-		setPresentsDefaultValue(false);
-		String[] selected = incList.getSelection();
-		for (String s : selected) {
-			//remove an include path from the LLVM preference store
-			LlvmPreferenceStore.removeIncludePath(s);
-			//remove an include path from the LLVM assembler's option
-			LlvmToolOptionPathUtil.removeLlvmIncludePath(s);
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-			incList.remove(s);
-			selectionChanged();
-		}
-	}
-
-}
\ No newline at end of file
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryListEditor.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryListEditor.java
deleted file mode 100644
index 9ef50c8c3c..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryListEditor.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.util.LlvmToolOptionPathUtil;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.FileDialog;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Text;
-
-/**
- * New implementation of LlvmListEditor.
- * Used to select a library file from the dialog.
- *
- */
-public class LibraryListEditor extends LlvmListEditor {
-
-	/**
-	 * Constructor.
-	 *
-	 * @param name
-	 * @param labelText
-	 * @param parent
-	 */
-	LibraryListEditor(String name, String labelText, Composite parent) {
-		super(name, labelText, parent);
-	}
-
-	@Override
-	/**
-	 * Functionality for New button.
-	 * Shows a browser dialog to select a file and returns that file.
-	 */
-	protected String getNewInputObject() {
-		FileDialog dlg = new FileDialog(getShell());
-		final Text text = new Text(getShell(), SWT.BORDER);
-		dlg.setFilterPath(text.getText());
-		dlg.setText(Messages.LibraryListEditor_0);
-		dlg.open();
-		String file = dlg.getFileName();
-		if (file == null) {
-			return null;
-		}
-		//remove white spaces
-		file = file.trim();
-		if (file.length() != 0) {
-			//get all existing items in the list
-			String[] existingItems = getList().getItems();
-			//return null if duplicate item found
-			for (String item : existingItems) {
-				if (item.equalsIgnoreCase(file)) {
-					return null;
-				}
-			}
-			//add a new library to LLVM preference store
-			LlvmPreferenceStore.appendLibrary(file);
-			//add a new library to LLVM linker's option
-			LlvmToolOptionPathUtil.addLlvmLib(file);
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-			return file;
-		}
-		return null;
-	}
-
-	@Override
-	/**
-	 * Removes the path from the list as well as from the Tool's Option.
-	 */
-	protected void removePressed() {
-		List libList = getList();
-		setPresentsDefaultValue(false);
-		String[] selected = libList.getSelection();
-		for (String s : selected) {
-			//remove a library from the LLVM preference store
-			LlvmPreferenceStore.removeLibrary(s);
-			//remove a library from LLVM linker's option
-			LlvmToolOptionPathUtil.removeLlvmLib(s);
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-			libList.remove(s);
-			selectionChanged();
-		}
-	}
-
-}
\ No newline at end of file
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryPathListEditor.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryPathListEditor.java
deleted file mode 100644
index c31851b390..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LibraryPathListEditor.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.util.LlvmToolOptionPathUtil;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.DirectoryDialog;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Text;
-
-/**
- * New implementation of LlvmListEditor.
- * Used to select a library path from the dialog.
- *
- */
-public class LibraryPathListEditor extends LlvmListEditor {
-
-	/**
-	 * Constructor.
-	 *
-	 * @param name the name of the preference this field editor works on
-	 * @param labelText the label text of the field editor
-	 * @param parent the parent of the field editor's control
-	 */
-	LibraryPathListEditor(String name, String labelText, Composite parent) {
-		super(name, labelText, parent);
-	}
-
-	@Override
-	/**
-	 * Functionality for New button.
-	 * Shows a browser dialog to select a directory and returns that directory path.
-	 */
-	protected String getNewInputObject() {
-		DirectoryDialog dlg = new DirectoryDialog(getShell());
-		final Text text = new Text(getShell(), SWT.BORDER);
-		dlg.setFilterPath(text.getText());
-		dlg.setText(Messages.LibraryPathListEditor_0);
-		dlg.setMessage(Messages.LibraryPathListEditor_1);
-		String dir = dlg.open();
-		if (dir == null) {
-			return null;
-		}
-		//remove white spaces
-		dir = dir.trim();
-		if (dir.length() != 0) {
-			//get all existing items in the list
-			String[] existingItems = getList().getItems();
-			//check that the list doesn't already contain the added item
-			if (existingItems.length > 0) {
-				//return null if duplicate item found
-				for (String item : existingItems) {
-					if (item.equalsIgnoreCase(dir)) {
-						return null;
-					}
-				}
-			}
-			//add a new library search path to LLVM preference store
-			LlvmPreferenceStore.appendLibraryPath(dir);
-			//add a new library path to LLVM linker's option
-			LlvmToolOptionPathUtil.addLlvmLibraryPath(dir);
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-			return dir;
-		}
-		return null;
-	}
-
-	@Override
-	/**
-	 * Removes the path from the list as well as from the Tool's Option.
-	 */
-	protected void removePressed() {
-		List libPathList = getList();
-		setPresentsDefaultValue(false);
-		String[] selected = libPathList.getSelection();
-		for (String s : selected) {
-			//remove a library path from the LLVM preference store
-			LlvmPreferenceStore.removeLibraryPath(s);
-			//remove a library path from LLVM linker's option
-			LlvmToolOptionPathUtil.removeLlvmLibraryPath(s);
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-			libPathList.remove(s);
-			selectionChanged();
-		}
-	}
-
-}
\ No newline at end of file
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmListEditor.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmListEditor.java
deleted file mode 100644
index 5882ebd520..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmListEditor.java
+++ /dev/null
@@ -1,340 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2015 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import java.util.regex.Pattern;
-
-import org.eclipse.cdt.managedbuilder.llvm.util.Separators;
-import org.eclipse.core.runtime.Assert;
-import org.eclipse.jface.dialogs.IDialogConstants;
-import org.eclipse.jface.preference.ListEditor;
-import org.eclipse.jface.resource.JFaceResources;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.events.SelectionListener;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.swt.widgets.Widget;
-
-/**
- * An abstract list editor that manages a list of input values.
- * The editor displays a list containing the values, buttons for adding and removing
- * values, and Up and Down buttons to adjust the order of elements in the list.
- *
- */
-public abstract class LlvmListEditor extends ListEditor {
-
-	/**
-	 * The list widget; <code>null</code> if none
-	 * (before creation or after disposal).
-	 */
-	List list;
-
-	/**
-	 * The button box containing the Add, Remove, Up, and Down buttons;
-	 * <code>null</code> if none (before creation or after disposal).
-	 */
-	Composite buttonBox;
-
-	/**
-	 * The Add button.
-	 */
-	Button addButton;
-
-	/**
-	 * The Remove button.
-	 */
-	Button removeButton;
-
-	/**
-	 * The Up button.
-	 */
-	Button upButton;
-
-	/**
-	 * The Down button.
-	 */
-	Button downButton;
-
-	/**
-	 * The selection listener.
-	 */
-	private SelectionListener selectionListener;
-
-	/**
-	 * Creates a list field editor.
-	 *
-	 * @param name the name of the preference this field editor works on
-	 * @param labelText the label text of the field editor
-	 * @param parent the parent of the field editor's control
-	 */
-	protected LlvmListEditor(String name, String labelText, Composite parent) {
-		super(name, labelText, parent);
-	}
-
-	@Override
-	/**
-	 * Combines the given list of items into a single String.
-	 * This method is the converse of parseString.
-	 */
-	protected String createList(String[] items) {
-		StringBuilder stringBuilder = new StringBuilder();
-		for (String item : items) {
-			if (stringBuilder.length() > 0) {
-				stringBuilder.append(Separators.getPathSeparator());
-			}
-			stringBuilder.append(item);
-		}
-		return stringBuilder.toString();
-	}
-
-	@Override
-	/** Splits the given String into a list of Strings.
-	 * This method is the converse of createList.
-	 */
-	protected String[] parseString(String stringList) {
-		if (stringList != null && stringList.length() > 0) {
-			return stringList.split(Pattern.quote(Separators.getPathSeparator()));
-		}
-		return new String[0];
-	}
-
-	/**
-	 * Creates the Add, Remove, Up, and Down button in the given button box.
-	 *
-	 * @param box the box for the buttons
-	 */
-	private void createButtons(Composite box) {
-		this.addButton = createPushButton(box, "ListEditor.add");//$NON-NLS-1$
-		this.removeButton = createPushButton(box, "ListEditor.remove");//$NON-NLS-1$
-		this.upButton = createPushButton(box, "ListEditor.up");//$NON-NLS-1$
-		this.downButton = createPushButton(box, "ListEditor.down");//$NON-NLS-1$
-	}
-
-	/**
-	 * Helper method to create a push button.
-	 *
-	 * @param parent the parent control
-	 * @param key the resource name used to supply the button's label text
-	 * @return Button
-	 */
-	private Button createPushButton(Composite parent, String key) {
-		Button button = new Button(parent, SWT.PUSH);
-		button.setText(JFaceResources.getString(key));
-		button.setFont(parent.getFont());
-		GridData data = new GridData(GridData.FILL_HORIZONTAL);
-		int widthHint = convertHorizontalDLUsToPixels(button, IDialogConstants.BUTTON_WIDTH);
-		data.widthHint = Math.max(widthHint, button.computeSize(SWT.DEFAULT, SWT.DEFAULT, true).x);
-		button.setLayoutData(data);
-		button.addSelectionListener(getSelectionListener());
-		return button;
-	}
-
-	/**
-	 * Creates a selection listener.
-	 */
-	@Override
-	public void createSelectionListener() {
-		this.selectionListener = new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Widget widget = event.widget;
-				if (widget == LlvmListEditor.this.addButton) {
-					addPressed();
-				} else if (widget == LlvmListEditor.this.removeButton) {
-					removePressed();
-				} else if (widget == LlvmListEditor.this.upButton) {
-					upPressed();
-				} else if (widget == LlvmListEditor.this.downButton) {
-					downPressed();
-				} else if (widget == LlvmListEditor.this.list) {
-					selectionChanged();
-				}
-			}
-		};
-	}
-
-	/**
-	 * Returns this field editor's button box containing the Add, Remove,
-	 * Up, and Down button.
-	 *
-	 * @param parent the parent control
-	 * @return the button box
-	 */
-	@Override
-	public Composite getButtonBoxControl(Composite parent) {
-		if (this.buttonBox == null) {
-			this.buttonBox = new Composite(parent, SWT.NULL);
-			GridLayout layout = new GridLayout();
-			layout.marginWidth = 0;
-			this.buttonBox.setLayout(layout);
-			createButtons(this.buttonBox);
-			this.buttonBox.addDisposeListener(new DisposeListener() {
-				@Override
-				public void widgetDisposed(DisposeEvent event) {
-					LlvmListEditor.this.addButton = null;
-					LlvmListEditor.this.removeButton = null;
-					LlvmListEditor.this.upButton = null;
-					LlvmListEditor.this.downButton = null;
-					LlvmListEditor.this.buttonBox = null;
-				}
-			});
-
-		} else {
-			checkParent(this.buttonBox, parent);
-		}
-
-		selectionChanged();
-		return this.buttonBox;
-	}
-
-	/**
-	 * Returns this field editor's list control.
-	 *
-	 * @param parent the parent control
-	 * @return the list control
-	 */
-	@Override
-	public List getListControl(Composite parent) {
-		if (this.list == null) {
-			this.list = new List(parent, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
-			this.list.setFont(parent.getFont());
-			this.list.addSelectionListener(getSelectionListener());
-			this.list.addDisposeListener(new DisposeListener() {
-				@Override
-				public void widgetDisposed(DisposeEvent event) {
-					LlvmListEditor.this.list = null;
-				}
-			});
-		} else {
-			checkParent(this.list, parent);
-		}
-		return this.list;
-	}
-
-	/**
-	 * Returns this field editor's selection listener. The listener is created if nessessary.
-	 * @return  the selection listener
-	 */
-	private SelectionListener getSelectionListener() {
-		if (this.selectionListener == null) {
-			createSelectionListener();
-		}
-		return this.selectionListener;
-	}
-
-	/**
-	 * Invoked when the selection in the list has changed.
-	 *
-	 * <p>
-	 * The default implementation of this method utilizes the selection index
-	 * and the size of the list to toggle the enablement of the up, down and
-	 * remove buttons.
-	 * </p>
-	 *
-	 */
-	@Override
-	protected void selectionChanged() {
-		int index = this.list.getSelectionIndex();
-		int size = this.list.getItemCount();
-
-		this.removeButton.setEnabled(index >= 0);
-		this.upButton.setEnabled(size > 1 && index > 0);
-		this.downButton.setEnabled(size > 1 && index >= 0 && index < size - 1);
-	}
-
-	/**
-	 * Moves the currently selected item up or down.
-	 *
-	 * @param up <code>true</code> if the item should move up,
-	 *  and <code>false</code> if it should move down
-	 */
-	private void swap(boolean up) {
-		setPresentsDefaultValue(false);
-		int index = this.list.getSelectionIndex();
-		int target = up ? index - 1 : index + 1;
-
-		if (index >= 0) {
-			String[] selection = this.list.getSelection();
-			Assert.isTrue(selection.length == 1);
-			this.list.remove(index);
-			this.list.add(selection[0], target);
-			this.list.setSelection(target);
-		}
-		selectionChanged();
-	}
-
-	/**
-	 * Returns this field editor's shell.
-	 * <p>
-	 * This method is internal to the framework; subclasses should not call
-	 * this method.
-	 * </p>
-	 *
-	 * @return the shell
-	 */
-	@Override
-	protected Shell getShell() {
-		if (this.addButton == null) {
-			return null;
-		}
-		return this.addButton.getShell();
-	}
-
-	/**
-	 * Notifies that the Add button has been pressed.
-	 */
-	void addPressed() {
-		setPresentsDefaultValue(false);
-		String input = getNewInputObject();
-
-		if (input != null) {
-			int index = this.list.getSelectionIndex();
-			if (index >= 0) {
-				this.list.add(input, index + 1);
-			} else {
-				this.list.add(input, 0);
-			}
-			selectionChanged();
-		}
-	}
-
-	/**
-	 * Notifies that the Remove button has been pressed.
-	 */
-	protected abstract void removePressed();
-
-	/**
-	 * Notifies that the Up button has been pressed.
-	 */
-	void upPressed() {
-		swap(true);
-	}
-
-	/**
-	 * Notifies that the Down button has been pressed.
-	 */
-	void downPressed() {
-		swap(false);
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmPreferenceStore.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmPreferenceStore.java
deleted file mode 100644
index 82368a98c5..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/LlvmPreferenceStore.java
+++ /dev/null
@@ -1,326 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010, 2016 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmUIPlugin;
-import org.eclipse.cdt.managedbuilder.llvm.util.FindStdLibPath;
-import org.eclipse.cdt.managedbuilder.llvm.util.LlvmToolOptionPathUtil;
-import org.eclipse.cdt.managedbuilder.llvm.util.Separators;
-import org.eclipse.core.runtime.preferences.IEclipsePreferences;
-import org.eclipse.core.runtime.preferences.InstanceScope;
-
-/**
- * Class used to access the LLVM Preference store values.
- *
- * This class is not intended to be subclassed by clients.
- */
-public class LlvmPreferenceStore {
-
-	/**
-	 * Get the LLVM Preference store.
-	 *
-	 * @return LLVM Preference store.
-	 */
-	public static IEclipsePreferences getPreferenceStore() {
-		IEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(LlvmUIPlugin.PLUGIN_ID);
-		return prefs;
-	}
-
-	/**
-	 * Get a value from the LLVM Preference store.
-	 *
-	 * @param name the name of the preference
-	 * @return the string-valued preference
-	 */
-	public static String getPreferenceStoreValue(String name) {
-		return getPreferenceStore().get(name, ""); //$NON-NLS-1$
-	}
-
-	/**
-	 * Get the LLVM bin path value from the LLVM Preference store.
-	 *
-	 * @return the LLVM bin path value.
-	 */
-	public static String getBinPath() {
-		return getPreferenceStoreValue(PreferenceConstants.P_LLVM_PATH);
-	}
-
-	/**
-	 * Get the LLVM include path value from the LLVM Preference store.
-	 *
-	 * @return the LLVM include path value.
-	 */
-	public static String getIncludePath() {
-		return getPreferenceStoreValue(PreferenceConstants.P_LLVM_INCLUDE_PATH);
-	}
-
-	/**
-	 * Get the LLVM library path value from the LLVM Preference Store.
-	 *
-	 * @return the LLVM library path value.
-	 */
-	public static String getLibraryPath() {
-		return getPreferenceStoreValue(PreferenceConstants.P_LLVM_LIBRARY_PATH);
-	}
-
-	/**
-	 * Get the LLVM library from the LLVM Preference store.
-	 *
-	 * @return the LLVM library value.
-	 */
-	public static String getLibraries() {
-		return getPreferenceStoreValue(PreferenceConstants.P_LLVM_LIBRARIES);
-	}
-
-	/**
-	 * Get values from the LLVM Preference store as a String array.
-	 * Used to get Preference store values which consist of multiple paths
-	 * separated by a path separator.
-	 *
-	 * @param name the name of the preference
-	 * @return A String array containing all Preference store values
-	 */
-	public static String[] getPreferenceStoreValueAsArray(String name) {
-		return LlvmToolOptionPathUtil.stringToArray(name);
-	}
-
-	/**
-	 * Set LLVM Preference store value.
-	 *
-	 * @param name the name of the preference
-	 * @param value the string-valued preference
-	 */
-	public static void setPreferenceStoreValue(String name, String value) {
-		getPreferenceStore().put(name, value);
-	}
-
-	/**
-	 * Set LLVM bin path to the LLVM Preference store.
-	 *
-	 * @param path the path to the LLVM bin path.
-	 */
-	public static void setBinPath(String path) {
-		setPreferenceStoreValue(PreferenceConstants.P_LLVM_PATH, path);
-	}
-
-	/**
-	 * Set LLVM include path to the LLVM Preference store.
-	 *
-	 * @param path LLVM include path.
-	 */
-	public static void setIncludePath(String path) {
-		setPreferenceStoreValue(PreferenceConstants.P_LLVM_INCLUDE_PATH, path);
-	}
-
-	/**
-	 * Set LLVM library path to the LLVM Preference store.
-	 *
-	 * @param path LLVM library path.
-	 */
-	public static void setLibraryPath(String path) {
-		setPreferenceStoreValue(PreferenceConstants.P_LLVM_LIBRARY_PATH, path);
-	}
-
-	/**
-	 * Set LLVM library to the LLVM Preference store.
-	 *
-	 * @param lib LLVM library.
-	 */
-	public static void setLibrary(String lib) {
-		setPreferenceStoreValue(PreferenceConstants.P_LLVM_LIBRARIES, lib);
-	}
-
-	/**
-	 * Get existing paths from the Preference store.
-	 *
-	 * @param name the name of the preference
-	 * @return paths
-	 */
-	private static String getExistingPaths(String name) {
-		String paths = ""; //$NON-NLS-1$
-		if (name.equals(PreferenceConstants.P_LLVM_INCLUDE_PATH)) {
-			paths = getIncludePath();
-		} else if (name.equals(PreferenceConstants.P_LLVM_LIBRARY_PATH)) {
-			paths = getLibraryPath();
-		} else if (name.equals(PreferenceConstants.P_LLVM_LIBRARIES)) {
-			paths = getLibraries();
-		}
-		return paths;
-	}
-
-	/**
-	 * Append a new value to the Preference store if it doesn't already exists.
-	 *
-	 * @param name the name of the preference
-	 * @param value the string-valued preference
-	 */
-	public static void appendValue(String name, String value) {
-		StringBuilder sB = new StringBuilder();
-		String paths = null;
-		//get existing paths
-		paths = getExistingPaths(name);
-		//if values exist
-		if (paths.length() != 0) {
-			//if the value is reasonable
-			if (!value.equalsIgnoreCase("") && value.length() != 0) { //$NON-NLS-1$
-				//if the paths doesn't contain the new value
-				if (!paths.contains(value)) {
-					//append existing paths to the string buffer
-					sB.append(paths);
-					//add a path separator in the end if it doesn't exists
-					if (paths.charAt(paths.length() - 1) != Separators.getPathSeparator().charAt(0)) {
-						sB.append(Separators.getPathSeparator());
-					}
-					//append the new value to end of the list
-					sB.append(value);
-				}
-			}
-		} else { //no existing values
-			//if the value is reasonable
-			if (!value.equalsIgnoreCase("") && value.length() != 0) { //$NON-NLS-1$
-				//append a new path to the string buffer
-				sB.append(value);
-			}
-		}
-		String newValues = sB.toString();
-		if (newValues.length() != 0) {
-			//set the new preference store value
-			setPreferenceStoreValue(name, newValues);
-		}
-	}
-
-	/**
-	 * Append an include path to the LLVM Preference store.
-	 *
-	 * @param path the LLVM include path.
-	 */
-	public static void appendIncludePath(String path) {
-		appendValue(PreferenceConstants.P_LLVM_INCLUDE_PATH, path);
-	}
-
-	/**
-	 * Append a library path to the LLVM Preference store.
-	 *
-	 * @param path the LLVM library path.
-	 */
-	public static void appendLibraryPath(String path) {
-		appendValue(PreferenceConstants.P_LLVM_LIBRARY_PATH, path);
-	}
-
-	/**
-	 * Append a library to the LLVM Preference store.
-	 *
-	 * @param lib the LLVM library.
-	 */
-	public static void appendLibrary(String lib) {
-		appendValue(PreferenceConstants.P_LLVM_LIBRARIES, lib);
-	}
-
-	/**
-	 * Remove a value from the LLVM preference store.
-	 *
-	 * @param name Name of the preference
-	 * @param value Value to remove from the preference store
-	 */
-	public static void removeValue(String name, String value) {
-		StringBuilder sB = new StringBuilder();
-		String existingValues = null;
-		String newValue = null;
-		//get existing values
-		existingValues = getExistingPaths(name);
-		//if the String contains the value
-		if (existingValues.contains(value)) {
-			//if many values i.e. contains path separator
-			if (existingValues.contains(Separators.getPathSeparator())) {
-				//separate String of values to an array
-				String[] exValArray = existingValues.split(Separators.getPathSeparator());
-				//if more than one value
-				if (exValArray.length > 1) {
-					//remove the value from the array
-					exValArray = LlvmToolOptionPathUtil.removePathFromExistingPathList(exValArray, value);
-					//if the array isn't empty
-					if (exValArray.length > 0) {
-						//append all values to the StringBuilder excluding the removed one
-						for (String val : exValArray) {
-							//append a value
-							sB.append(val);
-							//append a path separator
-							sB.append(Separators.getPathSeparator());
-						}
-						//form a String
-						newValue = sB.toString();
-					}
-				} else { //only one value with a path separator at the end
-					newValue = ""; //$NON-NLS-1$
-				}
-
-			} else { //only value without a path separator at the end
-				newValue = ""; //$NON-NLS-1$
-			}
-			//set the new preference store value
-			setPreferenceStoreValue(name, newValue);
-		}
-	}
-
-	/**
-	 * Remove a include path from the LLVM preference store.
-	 *
-	 * @param path The include path to be removed from the LLVM preference store.
-	 */
-	public static void removeIncludePath(String path) {
-		removeValue(PreferenceConstants.P_LLVM_INCLUDE_PATH, path);
-	}
-
-	/**
-	 * Remove a library path from the LLVM preference store.
-	 *
-	 * @param path The library path to be removed from the LLVM preference store.
-	 */
-	public static void removeLibraryPath(String path) {
-		removeValue(PreferenceConstants.P_LLVM_LIBRARY_PATH, path);
-	}
-
-	/**
-	 * Remove a library from the LLVM preference store.
-	 *
-	 * @param lib The library to be removed from the LLVM preference store.
-	 */
-	public static void removeLibrary(String lib) {
-		removeValue(PreferenceConstants.P_LLVM_LIBRARIES, lib);
-	}
-
-	public static void addMinGWStdLib() {
-		String path = LlvmEnvironmentVariableSupplier.getMinGWStdLib();
-		if (path != null) {
-			//add to preference store
-			appendLibraryPath(path);
-			//			ProjectIndex.rebuiltIndex(proj);
-			appendLibrary("stdc++"); //$NON-NLS-1$
-		}
-	}
-
-	public static void addStdLibUnix() {
-		String path = FindStdLibPath.find();
-		String lib = "stdc++"; //$NON-NLS-1$
-		if (path != null) {
-			//add to preference store
-			appendLibraryPath(path);
-			//			ProjectIndex.rebuiltIndex(proj);
-			appendLibrary(lib);
-		}
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/Messages.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/Messages.java
deleted file mode 100644
index 9334b5e4ba..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/Messages.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import org.eclipse.osgi.util.NLS;
-
-public class Messages extends NLS {
-
-	private static final String BUNDLE_NAME = "org.eclipse.cdt.managedbuilder.llvm.ui.preferences.messages"; //$NON-NLS-1$
-	public static String IncludePathListEditor_0;
-	public static String IncludePathListEditor_1;
-	public static String LibraryListEditor_0;
-	public static String LibraryPathListEditor_0;
-	public static String LibraryPathListEditor_1;
-	public static String LlvmPreferencePage_0;
-	public static String LlvmPreferencePage_1;
-	public static String LlvmPreferencePage_2;
-	public static String LlvmPreferencePage_3;
-	public static String LlvmPreferencePage_4;
-
-	static {
-		// initialize resource bundle
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceConstants.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceConstants.java
deleted file mode 100644
index 465042146d..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceConstants.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-/**
- * Constant definitions for plug-in preferences
- *
- */
-public class PreferenceConstants {
-
-	public static final String P_LLVM_PATH = "LLVM installation folder"; //$NON-NLS-1$
-	public static final String P_LLVM_INCLUDE_PATH = "Include path used in LLVM compilations"; //$NON-NLS-1$
-	public static final String P_LLVM_LIBRARY_PATH = "Library path used in LLVM builds"; //$NON-NLS-1$
-	public static final String P_LLVM_LIBRARIES = "Libraries used in LLVM builds"; //$NON-NLS-1$
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceInitializer.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceInitializer.java
deleted file mode 100644
index 2e03309625..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/PreferenceInitializer.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Leo Hippelainen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.ui.preferences;
-
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmUIPlugin;
-import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
-import org.eclipse.core.runtime.preferences.DefaultScope;
-import org.eclipse.core.runtime.preferences.IEclipsePreferences;
-
-/**
- * Class used to initialize the default preference values.
- *
- */
-public class PreferenceInitializer extends AbstractPreferenceInitializer {
-
-	@Override
-	public void initializeDefaultPreferences() {
-		IEclipsePreferences store = DefaultScope.INSTANCE.getNode(LlvmUIPlugin.PLUGIN_ID);
-		store.put(PreferenceConstants.P_LLVM_PATH, ""); //$NON-NLS-1$
-		store.put(PreferenceConstants.P_LLVM_INCLUDE_PATH, ""); //$NON-NLS-1$
-		store.put(PreferenceConstants.P_LLVM_LIBRARY_PATH, ""); //$NON-NLS-1$
-		store.put(PreferenceConstants.P_LLVM_LIBRARIES, ""); //$NON-NLS-1$
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/messages.properties b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/messages.properties
deleted file mode 100644
index a58ce4812d..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/ui/preferences/messages.properties
+++ /dev/null
@@ -1,10 +0,0 @@
-IncludePathListEditor_0=Browse a directory path
-IncludePathListEditor_1=Select a directory
-LibraryListEditor_0=Browse a directory path
-LibraryPathListEditor_0=Browse a directory path
-LibraryPathListEditor_1=Select a directory
-LlvmPreferencePage_0=Preferences for LLVM tool chain.
-LlvmPreferencePage_1=LLVM &Installation folder:
-LlvmPreferencePage_2=Include directories
-LlvmPreferencePage_3=Libraries
-LlvmPreferencePage_4=Library search path directories
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FileUtil.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FileUtil.java
deleted file mode 100644
index 7d3453571f..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FileUtil.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2011-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.util;
-
-import java.io.File;
-
-public class FileUtil {
-
-	/**
-	 * Searches cpp and cc file types recursively and returns true if
-	 * the directory tree contains at least one instance of them.
-	 *
-	 * @param directory
-	 * @param filter
-	 * @return
-	 */
-	public static boolean containsCppFile(File directory) {
-		File[] entries = directory.listFiles();
-		String path = null;
-		for (File entry : entries) {
-			path = entry.getAbsolutePath();
-			if (path != null) {
-				if (path.contains(".cpp") || path.contains(".cc")) { //$NON-NLS-1$ //$NON-NLS-2$
-					return true;
-				}
-			}
-
-			if (entry.isDirectory()) {
-				containsCppFile(entry);
-			}
-		}
-		return false;
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java
deleted file mode 100644
index e2182feda2..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2011-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.util;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import org.eclipse.cdt.utils.spawner.ProcessFactory;
-
-/**
- * The purpose is to find a path where stdc++ library is located.
- * Currently the shell script is only for Linux.
- *
- * TODO: It might not be able to execute scripts therefore place the command into a variable.
- */
-public class FindStdLibPath {
-
-	private static final String WIN_SCRIPT = "scripts/find_path.bat"; //$NON-NLS-1$
-	private static final String STD_LIB = "libstdc++.a"; //$NON-NLS-1$
-	private static final String UNIX_SCRIPT = " echo `locate libstdc++.a | sort -r | head -1 | sed \"s/libstdc++.a$//\"` "; //$NON-NLS-1$
-	private static final String MAC_SCRIPT = " echo `locate libstdc++.dylib | sort -r | head -1 | sed \"s/libstdc++.dylib$//\"` "; //$NON-NLS-1$
-
-	/**
-	 * Find stdc++ library path.
-	 *
-	 * @return Stdc++ library path.
-	 */
-	public static String find() {
-		List<String> commandLine = new ArrayList<>();
-		String os = System.getProperty("os.name").toLowerCase(); //$NON-NLS-1$
-		if (os.indexOf("win") >= 0) { //$NON-NLS-1$
-			commandLine.add("cmd"); //$NON-NLS-1$
-			commandLine.add("/c"); //$NON-NLS-1$
-			commandLine.add(WIN_SCRIPT + " " + STD_LIB);
-		} else if (os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0) { //$NON-NLS-1$ //$NON-NLS-2$
-			commandLine.add("bash"); //$NON-NLS-1$
-			commandLine.add("-c"); //$NON-NLS-1$
-			commandLine.add(UNIX_SCRIPT);
-		} else if (os.indexOf("mac") >= 0) { //$NON-NLS-1$
-			commandLine.add("bash"); //$NON-NLS-1$
-			commandLine.add("-c"); //$NON-NLS-1$
-			commandLine.add(MAC_SCRIPT);
-		} else {
-			return null;
-		}
-		try {
-			String[] cmdarray = new String[commandLine.size()];
-			commandLine.toArray(cmdarray);
-			Process p = ProcessFactory.getFactory().exec(cmdarray, null/*envp*/);
-			String line;
-			BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
-			line = input.readLine();
-			input.close();
-			if (line != null) {
-				return line;
-			}
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-		return null;
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java
deleted file mode 100644
index d57e0ad09d..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/LlvmToolOptionPathUtil.java
+++ /dev/null
@@ -1,988 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010, 2016 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.util;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.eclipse.cdt.core.model.CoreModel;
-import org.eclipse.cdt.core.resources.RefreshScopeManager;
-import org.eclipse.cdt.core.settings.model.ICProjectDescription;
-import org.eclipse.cdt.managedbuilder.core.BuildException;
-import org.eclipse.cdt.managedbuilder.core.IConfiguration;
-import org.eclipse.cdt.managedbuilder.core.IManagedBuildInfo;
-import org.eclipse.cdt.managedbuilder.core.IManagedProject;
-import org.eclipse.cdt.managedbuilder.core.IOption;
-import org.eclipse.cdt.managedbuilder.core.ITool;
-import org.eclipse.cdt.managedbuilder.core.ManagedBuildManager;
-import org.eclipse.cdt.managedbuilder.envvar.IBuildEnvironmentVariable;
-import org.eclipse.cdt.managedbuilder.envvar.IConfigurationEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.gnu.mingw.MingwEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.ui.LlvmEnvironmentVariableSupplier;
-import org.eclipse.cdt.managedbuilder.llvm.ui.preferences.LlvmPreferenceStore;
-import org.eclipse.core.resources.IProject;
-import org.eclipse.core.resources.IWorkspace;
-import org.eclipse.core.resources.IWorkspaceRunnable;
-import org.eclipse.core.resources.ResourcesPlugin;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.NullProgressMonitor;
-
-/**
- * The main purpose of this class is to add include paths and libraries and library search paths
- * for LLVM compiler and linker Tools which are added in Preferences->LLVM to all projects
- * and build configurations that use LLVM ToolChain. Values added in Preferences->LLVM will
- * show in Project->Properties->C/C++ General->Paths and Symbols tabs.
- *
- */
-public class LlvmToolOptionPathUtil {
-
-	//tool input extensions
-	private static final String linkerInputType = "bc"; //$NON-NLS-1$
-	private static final String[] inputTypes = { "cpp", "c" }; //$NON-NLS-1$ //$NON-NLS-2$
-	//tool option values
-	public static final int INCLUDE = 1;
-	public static final int LIB = 2;
-	public static final int LIB_PATH = 3;
-
-	/**
-	 * Adds new include path to LLVM front-end's Include path option for every project
-	 * in the workspace that uses LLVM Toolchain and for for every build configuration.
-	 *
-	 * @param includePath Include path for LLVM front-end's Include Option
-	 */
-	public static void addLlvmIncludePath(String includePath) {
-		addPathToToolOption(includePath, INCLUDE);
-	}
-
-	/**
-	 * Removes an include path from LLVM front-end's Include path option for every project
-	 * in the workspace that uses LLVM Toolchain and for for every build configuration.
-	 *
-	 * @param includePath Include path for LLVM front-end's Include Option
-	 */
-	public static void removeLlvmIncludePath(String includePath) {
-		removePathFromToolOption(includePath, INCLUDE);
-	}
-
-	/**
-	 * Adds a new Library to LLVM linker's Libraries Option for every project
-	 * in the workspace that use LLVM Toolchain and for for every build configuration.
-	 *
-	 * @param lib Library name for the LLVM linker's Libraries Option
-	 */
-	public static void addLlvmLib(String lib) {
-		addPathToToolOption(lib, LIB);
-	}
-
-	/**
-	 * Removes a Library to LLVM linker's Libraries Option for every project
-	 * in the workspace that use LLVM Toolchain and for for every build configuration.
-	 *
-	 * @param lib Library name for the LLVM linker's Libraries Option
-	 */
-	public static void removeLlvmLib(String lib) {
-		removePathFromToolOption(lib, LIB);
-	}
-
-	/**
-	 * Adds a new Library search path directory to LLVM linker's Library search path Option
-	 * for every project in the workspace that use LLVM Toolchain and for for every
-	 * build configuration.
-	 *
-	 * @param libDir Library search path directory for LLVM linker's Library search path Option
-	 */
-	public static void addLlvmLibraryPath(String libDir) {
-		addPathToToolOption(libDir, LIB_PATH);
-	}
-
-	/**
-	 * Removes a Library search path directory from LLVM linker's Library search path Option
-	 * for every project in the workspace that use LLVM Toolchain and for for every
-	 * build configuration.
-	 *
-	 * @param libDir Library search path directory for LLVM linker's Library search path Option
-	 */
-	public static void removeLlvmLibraryPath(String libDir) {
-		removePathFromToolOption(libDir, LIB_PATH);
-	}
-
-	/**
-	 * Adds a path to Tool option.
-	 *
-	 * @param path Path to add to Tool option
-	 * @param var Tool option's value
-	 */
-	private static void addPathToToolOption(String path, int var) {
-		//check if the given path exists
-		if (path.length() > 0 && (pathExists(path) || var == LIB)) {
-			boolean success = false;
-			//get all projects in the workspace
-			IProject[] projects = getProjectsInWorkspace();
-			IConfiguration[] configs;
-			for (IProject proj : projects) {
-
-				//get all build configurations of the IProject
-				configs = getAllBuildConfigs(proj);
-				//if build configurations found
-				if (configs.length > 0) {
-					for (IConfiguration cf : configs) {
-						//Add path for the Tool's option
-						if (addPathToSelectedToolOptionBuildConf(cf, path, var)) {
-							success = true;
-						} else {
-							success = false;
-						}
-					}
-					//if the path was added successfully
-					if (success) {
-						//save project build info
-						ManagedBuildManager.saveBuildInfo(proj, true);
-					}
-				}
-			}
-		}
-	}
-
-	/**
-	 * Adds a path to Tool option. Only for C++ projects.
-	 *
-	 * @param path Path to add to Tool option
-	 * @param var Tool option's value
-	 */
-	private static void addPathToToolOptionCppProjects(String path, int var) {
-		//check if the given path exists
-		if (path.length() > 0 && (pathExists(path) || var == LIB)) {
-			boolean success = false;
-			//get all projects in the workspace
-			IProject[] projects = getProjectsInWorkspace();
-			IConfiguration[] configs;
-			String projectPath = null;
-			for (IProject proj : projects) {
-				projectPath = proj.getLocation().toString();
-				if (projectPath != null) {
-					//only apply to C++ projects
-					if (FileUtil.containsCppFile(new File(projectPath))) {
-						//get all build configurations of the IProject
-						configs = getAllBuildConfigs(proj);
-						//if build configurations found
-						if (configs.length > 0) {
-							for (IConfiguration cf : configs) {
-								//Add path for the Tool's option
-								if (addPathToSelectedToolOptionBuildConf(cf, path, var)) {
-									success = true;
-								} else {
-									success = false;
-								}
-							}
-							//if the path was added successfully
-							if (success) {
-								//save project build info
-								ManagedBuildManager.saveBuildInfo(proj, true);
-								ICProjectDescription projectDescription = CoreModel.getDefault()
-										.getProjectDescription(proj);
-								try {
-									CoreModel.getDefault().setProjectDescription(proj, projectDescription);
-								} catch (CoreException e) {
-									e.printStackTrace();
-								}
-								//use refresh scope manager to refresh
-								RefreshScopeManager manager = RefreshScopeManager.getInstance();
-								IWorkspaceRunnable runnable = manager.getRefreshRunnable(proj);
-								try {
-									ResourcesPlugin.getWorkspace().run(runnable, null, IWorkspace.AVOID_UPDATE,
-											new NullProgressMonitor());
-								} catch (CoreException e) {
-									e.printStackTrace();
-								}
-								//rebuilt the project index
-								ProjectIndex.rebuiltIndex(proj);
-							}
-						}
-					}
-				}
-			}
-		}
-	}
-
-	/**
-	 * Removes a path from Tool option.
-	 *
-	 * @param path Path to remove from Tool option
-	 * @param var Tool option's value
-	 */
-	private static void removePathFromToolOption(String path, int var) {
-		//check if the given path exists
-		if (path.length() > 0 && pathExists(path) || var == LIB) {
-			boolean success = false;
-			//get all projects in the workspace
-			IProject[] projects = getProjectsInWorkspace();
-			IConfiguration[] configs;
-			for (IProject proj : projects) {
-				//get all build configurations of the IProject
-				configs = getAllBuildConfigs(proj);
-				//if build configurations found
-				if (configs.length > 0) {
-					for (IConfiguration cf : configs) {
-						//remove a path from the Tool's option
-						if (removePathFromSelectedToolOptionBuildConf(cf, path, var)) {
-							success = true;
-						} else {
-							success = false;
-						}
-					}
-					//if the path was removed successfully
-					if (success) {
-						//save project build info
-						ManagedBuildManager.saveBuildInfo(proj, true);
-					}
-				}
-			}
-		}
-	}
-
-	/**
-	 * Add a path to specific build configuration's Tool option.
-	 *
-	 * @param cf Build configuration
-	 * @param path Path or file name to add
-	 * @param var Value of the option type
-	 * @return boolean True if path was added successfully
-	 */
-	private static boolean addPathToSelectedToolOptionBuildConf(IConfiguration cf, String path, int var) {
-		switch (var) {
-		case INCLUDE:
-			return addLlvmIncludePathToToolOption(cf, path);
-		case LIB:
-			return addLlvmLibToToolOption(cf, path);
-		case LIB_PATH:
-			return addLlvmLibSearchPathToToolOption(cf, path);
-		default:
-			return false;
-		}
-	}
-
-	/**
-	 * Removes a path from specific build configuration's Tool option.
-	 *
-	 * @param cf Build configuration
-	 * @param path Path or file name to remove
-	 * @param var Value of the option type
-	 * @return boolean True if path was removed successfully
-	 */
-	private static boolean removePathFromSelectedToolOptionBuildConf(IConfiguration cf, String path, int var) {
-		switch (var) {
-		case INCLUDE:
-			return removeLlvmIncludePathFromToolOption(cf, path);
-		case LIB:
-			return removeLlvmLibFromToolOption(cf, path);
-		case LIB_PATH:
-			return removeLlvmLibSearchPathFromToolOption(cf, path);
-		default:
-			return false;
-		}
-	}
-
-	/**
-	 * Returns all projects in the workspace.
-	 *
-	 * @return IProject[]
-	 */
-	public static IProject[] getProjectsInWorkspace() {
-		//get workspace
-		IWorkspace root = ResourcesPlugin.getWorkspace();
-		//get all projects in the workspace
-		return root.getRoot().getProjects();
-	}
-
-	/**
-	 * Returns all build configurations of the project.
-	 *
-	 * @param proj IProject Project
-	 * @return IConfiguration[] Build configurations
-	 */
-	private static IConfiguration[] getAllBuildConfigs(IProject proj) {
-		IConfiguration[] configurations = new IConfiguration[] {};
-		IManagedBuildInfo info = null;
-		//try to get Managed build info
-		try {
-			info = ManagedBuildManager.getBuildInfo(proj); //null if doesn't exists
-		} catch (Exception e) { //if not a managed build project
-			//print error
-			e.printStackTrace();
-			return configurations;
-		}
-		//info can be null for projects without build info. For example, when creating a project
-		//from Import > C/C++ Executable
-		if (info == null) {
-			return configurations;
-		}
-		//get ManagedProject associated with build info
-		IManagedProject mProj = info.getManagedProject();
-
-		//get all build configurations of the project
-		configurations = mProj.getConfigurations();
-		return configurations;
-	}
-
-	/**
-	 * Adds an include path to LLVM front-end's include path option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param newIncludePath Include path to be added to LLVM front-end's Include path option
-	 */
-	private static boolean addLlvmIncludePathToToolOption(IConfiguration cf, String newIncludePath) {
-		//get LLVM front-end
-		ITool llvmFrontEnd = getLlvmFrontEnd(cf);
-		//If the LLVM front-end is found from the given build configuration
-		if (llvmFrontEnd != null) {
-			//get LLVM front-end Include paths option.
-			IOption llvmFrontEndIncPathOption = getLlvmFrontEndIncludePathOption(cf);
-			//add a new include path to front-end's Include paths option.
-			boolean val = addIncludePathToToolOption(cf, llvmFrontEnd, llvmFrontEndIncPathOption, newIncludePath);
-			return val;
-		}
-		return false;
-	}
-
-	/**
-	 * Removes an include path from LLVM front-end's include path option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param removeIncludePath Include path to be removed from LLVM front-end's Include path option
-	 */
-	private static boolean removeLlvmIncludePathFromToolOption(IConfiguration cf, String removeIncludePath) {
-		//get LLVM front-end
-		ITool llvmFrontEnd = getLlvmFrontEnd(cf);
-		//If the LLVM front-end is found from the given build configuration
-		if (llvmFrontEnd != null) {
-			//get LLVM front-end Include paths option.
-			IOption llvmFrontEndIncPathOption = getLlvmFrontEndIncludePathOption(cf);
-			//remove an include path from front-end's Include paths option.
-			removeIncludePathFromToolOption(cf, llvmFrontEnd, llvmFrontEndIncPathOption, removeIncludePath);
-			return true;
-		}
-		return false;
-	}
-
-	/**
-	 * Adds a Library to LLVM linker's Libraries Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param lib Library name
-	 * @return boolean Returns true if Library Option was added successfully for the LLVM Linker.
-	 */
-	private static boolean addLlvmLibToToolOption(IConfiguration cf, String lib) {
-		//get LLVM linker
-		ITool llvmLinker = getLlvmLinker(cf);
-		//If the LLVM linker is found from the given build configuration
-		if (llvmLinker != null) {
-			//get LLVM Linker Libraries option
-			IOption librariesOption = getLlvmLinkerLibrariesOption(cf);
-			//add library to LLVM linker's Libraries Option type
-			boolean val = addLibraryToToolOption(cf, llvmLinker, librariesOption, lib);
-			return val;
-		}
-		//adding the library failed
-		return false;
-	}
-
-	/**
-	 * Removes a Library from LLVM linker's Libraries Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param removeLib Library name
-	 * @return boolean Returns true if Library Option was removed successfully from the LLVM Linker.
-	 */
-	private static boolean removeLlvmLibFromToolOption(IConfiguration cf, String removeLib) {
-		//get LLVM linker
-		ITool llvmLinker = getLlvmLinker(cf);
-		//If the LLVM linker is found from the given build configuration
-		if (llvmLinker != null) {
-			//get LLVM Linker Libraries option
-			IOption librariesOption = getLlvmLinkerLibrariesOption(cf);
-			//remove a library from LLVM linker's Libraries Option type
-			removeLibraryFromToolOption(cf, llvmLinker, librariesOption, removeLib);
-			return true;
-		}
-		//removing the library failed
-		return false;
-	}
-
-	/**
-	 * Adds a Library search path to LLVM linker's Library search path Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param libDir Library search path
-	 * @return boolean Returns true if Library search path Option was added successfully for the LLVM Linker.
-	 */
-	private static boolean addLlvmLibSearchPathToToolOption(IConfiguration cf, String libDir) {
-		//get LLVM linker
-		ITool llvmLinker = getLlvmLinker(cf);
-		//If the LLVM linker is found from the given build configuration
-		if (llvmLinker != null) {
-			//get LLVM Linker Library search path option
-			IOption libDirOption = getLlvmLinkerLibrarySearchPathOption(cf);
-			//add library search path to LLVM linker's Library Search Path Option type
-			boolean val = addLibrarySearchPathToToolOption(cf, llvmLinker, libDirOption, libDir);
-			return val;
-		}
-		//adding library failed
-		return false;
-	}
-
-	/**
-	 * Removes a Library search path from LLVM linker's Library search path Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param removeLibDir Library search path
-	 * @return boolean Returns true if Library search path Option was removed successfully from the LLVM Linker.
-	 */
-	private static boolean removeLlvmLibSearchPathFromToolOption(IConfiguration cf, String removeLibDir) {
-		//get LLVM linker
-		ITool llvmLinker = getLlvmLinker(cf);
-		//If the LLVM linker is found from the given build configuration
-		if (llvmLinker != null) {
-			//get LLVM Linker Library search path option
-			IOption libDirOption = getLlvmLinkerLibrarySearchPathOption(cf);
-			//remove a library search path from LLVM linker's Library Search Path Option type
-			removeLibrarySearchPathFromToolOption(cf, llvmLinker, libDirOption, removeLibDir);
-			return true;
-		}
-		//removing the library search path failed
-		return false;
-	}
-
-	/**
-	 * Adds include path for given Build configuration's Tool's Include path Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param newIncludePath Include path to be added to Tool's Include path option
-	 */
-	private static boolean addIncludePathToToolOption(IConfiguration cf, ITool cfTool, IOption option,
-			String newIncludePath) {
-		try {
-			//add path only if it does not exists
-			String[] incPaths = option.getIncludePaths();
-			for (String inc : incPaths) {
-				if (inc.equalsIgnoreCase(newIncludePath)) {
-					return false;
-				}
-			}
-			//add a new include path to linker's Include paths option.
-			addInputToToolOption(cf, cfTool, option, newIncludePath, incPaths);
-		} catch (BuildException e) {
-			//show error
-			e.printStackTrace();
-		}
-		return true;
-	}
-
-	/**
-	 * Removes an include path from given Build configuration's Tool's Include path Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param removeIncludePath Include path to be removed from Tool's Include path option
-	 */
-	private static void removeIncludePathFromToolOption(IConfiguration cf, ITool cfTool, IOption option,
-			String removeIncludePath) {
-		try {
-			//remove an include path from linker's Include paths option.
-			removeInputFromToolOption(cf, cfTool, option, removeIncludePath, option.getIncludePaths());
-		} catch (BuildException e) {
-			//show error
-			e.printStackTrace();
-		}
-	}
-
-	/**
-	 * Adds new Library for the Linker's Libraries Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param newLibrary Library
-	 */
-	private static boolean addLibraryToToolOption(IConfiguration cf, ITool cfTool, IOption option, String newLibrary) {
-		try {
-			if (option != null) {
-				//add library only if it does not exists
-				String[] libraries = option.getLibraries();
-				for (String lib : libraries) {
-					if (lib.equalsIgnoreCase(newLibrary)) {
-						return false;
-					}
-				}
-				//add a new library to linker's Libraries option.
-				addInputToToolOption(cf, cfTool, option, newLibrary, libraries);
-			}
-		} catch (BuildException e) {
-			//show error
-			e.printStackTrace();
-		}
-		return true;
-	}
-
-	/**
-	 * Removes a new Library from the Linker's Libraries Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param removeLibrary Library
-	 */
-	private static void removeLibraryFromToolOption(IConfiguration cf, ITool cfTool, IOption option,
-			String removeLibrary) {
-		try {
-			//remove a library from linker's Libraries option.
-			removeInputFromToolOption(cf, cfTool, option, removeLibrary, option.getLibraries());
-		} catch (BuildException e) {
-			//show error
-			e.printStackTrace();
-		}
-	}
-
-	//Works only if Eclipse Bugzilla Bug 321040 fix is applied
-	/**
-	 * Adds new Library search path for the Linker's Library search path Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param newLibraryPath Library search path
-	 */
-	private static boolean addLibrarySearchPathToToolOption(IConfiguration cf, ITool cfTool, IOption option,
-			String newLibraryPath) {
-		try {
-			if (option != null) {
-				//add path only if it does not exists
-				String[] libPaths = option.getLibraryPaths();
-				for (String libPath : libPaths) {
-					if (libPath.equalsIgnoreCase(newLibraryPath)) {
-						return false;
-					}
-				}
-				//add a new library path to linker's Library search path option.
-				addInputToToolOption(cf, cfTool, option, newLibraryPath, libPaths);
-			}
-		} catch (BuildException e) {
-			//show error
-			e.printStackTrace();
-		}
-		return true;
-	}
-
-	/**
-	 * Removes a Library search path from the Linker's Library search path Option.
-	 * Since CDT 8.0 (Bugzilla Bug 321040)
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param removeSearchPath Library search path
-	 */
-	private static void removeLibrarySearchPathFromToolOption(IConfiguration cf, ITool cfTool, IOption option,
-			String removeSearchPath) {
-		try {
-			//remove a library path from linker's Library search path option.
-			removeInputFromToolOption(cf, cfTool, option, removeSearchPath, option.getLibraryPaths());
-		} catch (BuildException e) {
-			//show error
-			e.printStackTrace();
-		}
-	}
-
-	/**
-	 * Adds a new value to specific Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param newValue New value to be added to the Option type
-	 * @param existingValues Existing Option type values
-	 */
-	private static void addInputToToolOption(IConfiguration cf, ITool cfTool, IOption option, String newValue,
-			String[] existingValues) {
-		//if Option type is found
-		if (option != null) {
-			//append new value with existing values
-			String[] newValues = addNewPathToExistingPathList(existingValues, newValue);
-			//set new values array for the option for the given build configuration
-			ManagedBuildManager.setOption(cf, cfTool, option, newValues);
-		} else {
-			//log error
-		}
-	}
-
-	/**
-	 * Removes a value from a specific Option.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param cfTool ITool Tool
-	 * @param option Tool Option type
-	 * @param removeValue Value to be removed from the Option type
-	 * @param existingValues Existing Option type values
-	 */
-	private static void removeInputFromToolOption(IConfiguration cf, ITool cfTool, IOption option, String removeValue,
-			String[] existingValues) {
-		//if Option type is found
-		if (option != null) {
-			//check that list has values
-			if (existingValues.length > 0) {
-				//remove value from existing values
-				String[] newValues = removePathFromExistingPathList(existingValues, removeValue);
-				//set new values array for the option for the given build configuration
-				ManagedBuildManager.setOption(cf, cfTool, option, newValues);
-			}
-		} else {
-			//log error
-		}
-	}
-
-	/**
-	 * Return LLVM front-end according to the input type.
-	 * @param cf IConfiguration Build configuration
-	 * @return ITool LLVM front-end
-	 */
-	private static ITool getLlvmFrontEnd(IConfiguration cf) {
-		//get LLVM front-end according to the input type
-		for (int i = 0; i < inputTypes.length; i++) {
-			ITool tool = getIToolByInputType(cf, inputTypes[i]);
-			if (tool != null) {
-				return tool;
-			}
-		}
-		return null;
-	}
-
-	/**
-	 * Returns LLVM linker.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @return ITool LLVM linker
-	 */
-	private static ITool getLlvmLinker(IConfiguration cf) {
-		//get LLVM linker
-		return getIToolByInputType(cf, linkerInputType);
-	}
-
-	/**
-	 * Returns ITool associated with the input extension.
-	 *
-	 * @param cf IConfiguration Build configuration
-	 * @param ext input extension associated with ITool
-	 * @return ITool Tool that matches input extension
-	 */
-	private static ITool getIToolByInputType(IConfiguration cf, String ext) {
-		//get ITool associated with the input extension
-		return cf.getToolFromInputExtension(ext);
-	}
-
-	/**
-	 * Returns LLVM front-end Include path Option type.
-	 *
-	 * @param cf IConfiguration Project build configuration
-	 * @return IOption Tool option type
-	 */
-	private static IOption getLlvmFrontEndIncludePathOption(IConfiguration cf) {
-		//get llvm front-end
-		ITool cfTool = getLlvmFrontEnd(cf);
-		//get option id for include paths
-		String includeOptionId = getOptionId(cfTool, IOption.INCLUDE_PATH);
-		return getIToolPathOption(cfTool, includeOptionId);
-	}
-
-	/**
-	 * Returns LLVM Linker Libraries Option type.
-	 *
-	 * @param cf IConfiguration Project build configuration
-	 * @return IOption Tool option type
-	 */
-	private static IOption getLlvmLinkerLibrariesOption(IConfiguration cf) {
-		//get llvm linker
-		ITool cfTool = getLlvmLinker(cf);
-		//get option id for libraries
-		String libOptionId = getOptionId(cfTool, IOption.LIBRARIES);
-		return getIToolPathOption(cfTool, libOptionId);
-	}
-
-	/**
-	 * Returns LLVM Linker Library search path Option type.
-	 *
-	 * @param cf IConfiguration Project build configuration
-	 * @return IOption Tool option type
-	 */
-	private static IOption getLlvmLinkerLibrarySearchPathOption(IConfiguration cf) {
-		//get ITool associated with the input extension
-		ITool cfTool = cf.getToolFromInputExtension(linkerInputType);
-		//get option id for library paths
-		String libDirOptionId = getOptionId(cfTool, IOption.LIBRARY_PATHS);
-		return getIToolPathOption(cfTool, libDirOptionId);
-	}
-
-	/**
-	 * Returns Tool's option id.
-	 *
-	 * @param cfTool ITool Tool
-	 * @param optionValueType Option's value type.
-	 * @return optionId Tool's option id.
-	 */
-	private static String getOptionId(ITool cfTool, int optionValueType) {
-		String optionId = null;
-		//get all Tool options.
-		IOption[] options = cfTool.getOptions();
-		for (IOption opt : options) {
-			try {
-				//try to match option value type
-				if (opt.getValueType() == optionValueType) {
-					//get option id
-					optionId = opt.getId();
-					break;
-				}
-			} catch (BuildException e) {
-				//log error
-			}
-		}
-		return optionId;
-	}
-
-	/**
-	 * Returns Tool's Option type by Id.
-	 *
-	 * @param cfTool ITool Tool
-	 * @param optionId String Tool option type id
-	 * @return IOption Tool option type
-	 */
-	private static IOption getIToolPathOption(ITool cfTool, String optionId) {
-		//get path option with specific id for the ITool
-		return cfTool.getOptionById(optionId);
-	}
-
-	/**
-	 * Adds one or more paths to the list of paths.
-	 *
-	 * @param existingPaths Existing list of paths to add to
-	 * @param newPath New path to add. May include multiple directories with a path delimiter java.io.File.pathSeparator
-	 * (usually semicolon (Win) or colon (Linux/Mac), OS specific)
-	 * @return String[] List that includes existing paths as well as new paths.
-	 */
-	public static String[] addNewPathToExistingPathList(String[] existingPaths, String newPath) {
-		String pathSep = java.io.File.pathSeparator; // semicolon for windows, colon for Linux/Mac
-		List<String> newPathList = new ArrayList<>();
-		String path;
-		//adds existing paths to new paths list
-		for (int i = 0; i < existingPaths.length; i++) {
-			path = existingPaths[i];
-			newPathList.add(path);
-		}
-		//separates new path if it has multiple paths separated by a path separator
-		String[] newPathArray = newPath.split(pathSep);
-		for (int i = 0; i < newPathArray.length; i++) {
-			path = newPathArray[i];
-			newPathList.add(path);
-		}
-		//creates a new list that includes all existing paths as well as new paths
-		String[] newArray = newPathList.toArray(new String[0]);
-		return newArray;
-	}
-
-	/**
-	 * Removes one path from the list of paths.
-	 *
-	 * @param existingPaths Existing list of paths to remove from
-	 * @param removePath Path to be removed.
-	 * @return String[] List that includes existing paths without the path that was removed.
-	 */
-	public static String[] removePathFromExistingPathList(String[] existingPaths, String removePath) {
-		List<String> newPathList = new ArrayList<>();
-		String path;
-		//adds existing paths to new paths list
-		for (int i = 0; i < existingPaths.length; i++) {
-			path = existingPaths[i];
-			newPathList.add(path);
-		}
-		newPathList.remove(removePath);
-		//creates a new list that includes all existing paths except the removed path
-		String[] newArray = newPathList.toArray(new String[0]);
-		return newArray;
-	}
-
-	/**
-	 * Split paths to a String array.
-	 *
-	 * @param str String of paths separated by a path separator.
-	 * @return String array containing multiple paths.
-	 */
-	public static String[] stringToArray(String str) {
-		return str.split(System.getProperty("path.separator")); //$NON-NLS-1$
-	}
-
-	/**
-	 * Append an array of Strings to a String separated by a path separator.
-	 *
-	 * @param array An array of Strings.
-	 * @return string which contains all indexes of
-	 * a String array separated by a path separator.
-	 */
-	public static String arrayToString(String[] array) {
-		StringBuilder sB = new StringBuilder();
-		//if array isn't empty and doesn't contain an empty String
-		if (array.length > 0 /*&& !array[0].isEmpty()*/) {
-			for (String i : array) {
-				sB.append(i);
-				sB.append(System.getProperty("path.separator")); //$NON-NLS-1$
-			}
-		}
-		return sB.toString();
-	}
-
-	/**
-	 * Checks if a file path exists.
-	 *
-	 * @return boolean True if the file exists.
-	 */
-	private static boolean pathExists(String path) {
-		//return true if path exists.
-		return new File(path).exists();
-	}
-
-	/**
-	 * Get all include paths in a String array.
-	 *
-	 * @return String[] A String array of include paths
-	 */
-	private static String[] getAllIncludePaths() {
-		//get all include paths
-		String includePathList = LlvmPreferenceStore.getIncludePath();
-		//split paths to String array
-		String[] incPaths = includePathList.split(Separators.getPathSeparator());
-		return incPaths;
-	}
-
-	/**
-	 * Get all libraries in a String array.
-	 *
-	 * @return String[] A String array of libraries
-	 */
-	private static String[] getAllLibraries() {
-		//get all libraries
-		String libList = LlvmPreferenceStore.getLibraries();
-		//split values to String array
-		String[] libs = libList.split(Separators.getPathSeparator());
-		return libs;
-	}
-
-	/**
-	 * Get all library paths in a String array.
-	 *
-	 * @return String[] A String array of library paths
-	 */
-	private static String[] getAllLibraryPaths() {
-		//get all library paths
-		String libPathList = LlvmPreferenceStore.getLibraryPath();
-		//split paths to String array
-		String[] libPaths = libPathList.split(Separators.getPathSeparator());
-		return libPaths;
-	}
-
-	/**
-	 * Add all include paths found in LLVM preference page to
-	 * every project's build configurations.
-	 */
-	public static void addAllIncludesToBuildConf() {
-		String[] includes = getAllIncludePaths();
-		for (String inc : includes) {
-			addLlvmIncludePath(inc);
-		}
-	}
-
-	/**
-	 * Add all libraries found in LLVM preference page to
-	 * every project's build configurations.
-	 */
-	public static void addAllLibsToBuildConf() {
-		String[] libs = getAllLibraries();
-		for (String lib : libs) {
-			//			if (!lib.equalsIgnoreCase("stdc++")) { //$NON-NLS-1$ //C++ specific
-			addLlvmLib(lib);
-			//			}
-		}
-	}
-
-	/**
-	 * Add all library paths found in LLVM preference page to
-	 * every project's build configurations.
-	 */
-	public static void addAllLibPathsToBuildConf() {
-		String[] libPaths = getAllLibraryPaths();
-		for (String libPath : libPaths) {
-			//			if (!libPath.equalsIgnoreCase(LlvmEnvironmentVariableSupplier.getMinGWStdLib())) { //C++ specific
-			addLlvmLibraryPath(libPath);
-			//			}
-		}
-	}
-
-	//temporary hack until scanner discovery works
-	public static void addMissingCppIncludesForMingw() {
-		//try to find mingw path from MingwEnvironmentVariableSupplier
-		IConfigurationEnvironmentVariableSupplier mingwEnvironmentVariables = new MingwEnvironmentVariableSupplier();
-		IBuildEnvironmentVariable mingwPath = mingwEnvironmentVariables.getVariable("PATH", null, null); //$NON-NLS-1$
-		//may contain multiple paths therefore must be separated
-		String[] mingwPaths = mingwPath.getValue().split(Separators.getPathSeparator());
-		//bin folder is appended so it must be removed
-		for (int i = 0; i < mingwPaths.length; i++) {
-			if (mingwPaths[i].contains("bin")) { //$NON-NLS-1$
-				mingwPaths[i] = mingwPaths[i].replace("bin", ""); //$NON-NLS-1$ //$NON-NLS-2$
-			}
-		}
-		//find the correct path
-		File f1 = null;
-		String rightPath = null;
-		findPath: for (int i = 0; i < mingwPaths.length; i++) {
-			f1 = new File(mingwPaths[i] + "lib/gcc/mingw32"); //$NON-NLS-1$
-			if (f1.exists()) {
-				rightPath = f1.getAbsolutePath();
-				break findPath;
-			}
-		}
-		if (rightPath != null && f1 != null) {
-			//get the first directory (mingw version)
-			f1 = f1.listFiles()[0];
-			//add three includes if they exist
-			File testFile = new File(f1.getAbsolutePath() + "/include/c++"); //$NON-NLS-1$
-			if (testFile.exists()) {
-				LlvmPreferenceStore.appendIncludePath(testFile.getAbsolutePath());
-				addPathToToolOptionCppProjects(testFile.getAbsolutePath(), INCLUDE);
-			}
-			testFile = new File(f1.getAbsolutePath() + "/include/c++/mingw32"); //$NON-NLS-1$
-			if (testFile.exists()) {
-				LlvmPreferenceStore.appendIncludePath(testFile.getAbsolutePath());
-				addPathToToolOptionCppProjects(testFile.getAbsolutePath(), INCLUDE);
-			}
-			testFile = new File(f1.getAbsolutePath() + "/include/c++/backward"); //$NON-NLS-1$
-			if (testFile.exists()) {
-				LlvmPreferenceStore.appendIncludePath(testFile.getAbsolutePath());
-				addPathToToolOptionCppProjects(testFile.getAbsolutePath(), INCLUDE);
-			}
-			//inform LLVM environment variable supplier that there has been a change
-			LlvmEnvironmentVariableSupplier.notifyPreferenceChange();
-		}
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/ProjectIndex.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/ProjectIndex.java
deleted file mode 100644
index 8e4f9c870c..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/ProjectIndex.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2011-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.util;
-
-import org.eclipse.cdt.core.CCorePlugin;
-import org.eclipse.cdt.core.model.CoreModel;
-import org.eclipse.cdt.core.model.ICProject;
-import org.eclipse.core.resources.IProject;
-
-public class ProjectIndex {
-
-	/**
-	 * Rebuilts the index of the selected project in the workspace.
-	 */
-	public static void rebuiltIndex(IProject proj) {
-		ICProject cproject = CoreModel.getDefault().getCModel().getCProject(proj.getName());
-		CCorePlugin.getIndexManager().reindex(cproject);
-	}
-
-}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/Separators.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/Separators.java
deleted file mode 100644
index e36744830f..0000000000
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/Separators.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010-2013 Nokia Siemens Networks Oyj, Finland.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *      Nokia Siemens Networks - initial implementation
- *      Petri Tuononen - Initial implementation
- *******************************************************************************/
-package org.eclipse.cdt.managedbuilder.llvm.util;
-
-/**
- * Provides different separators such as file and path separators.
- *
- */
-public class Separators {
-
-	private static final String pathSeparator = System.getProperty("path.separator"); //$NON-NLS-1$
-	private static final String fileSeparator = System.getProperty("file.separator"); //$NON-NLS-1$
-
-	/**
-	 * Get path separator.
-	 *
-	 * @return  path separator
-	 */
-	public static String getPathSeparator() {
-		return pathSeparator;
-	}
-
-	/**
-	 * Get file separator.
-	 *
-	 * @return  file separator
-	 */
-	public static String getFileSeparator() {
-		return fileSeparator;
-	}
-
-}
-- 
2.42.1

