From 80db8ae992dd8e3ea9057e6d5041c4a7c426b8d2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=BE=90=E6=8C=81=E6=81=92=20Xu=20Chiheng?=
 <chiheng.xu@gmail.com>
Date: Wed, 10 Apr 2024 04:18:03 +0800
Subject: [PATCH 43/43] rework cdt.core and cdt.ui

---
 .../core/model/BinaryFilePresentation.java    |  56 -----
 .../org/eclipse/cdt/core/model/IBinary.java   |   8 -
 .../org/eclipse/cdt/core/model/ICProject.java |   4 +
 .../model/IIncludeReferenceContainer.java     |  22 ++
 .../model/ILibraryReferenceContainer.java     |  22 ++
 .../cdt/internal/core/model/Binary.java       |  25 +-
 .../internal/core/model/BinaryContainer.java  |   2 +-
 .../cdt/internal/core/model/CContainer.java   |   2 +-
 .../cdt/internal/core/model/CProject.java     |  24 +-
 .../cdt/internal/core/model/CProjectInfo.java |  38 ++-
 .../internal/core/model/DeltaProcessor.java   |  53 +---
 .../core/model/IncludeReferenceContainer.java |  78 ++++++
 .../model/IncludeReferenceContainerInfo.java  |  30 +++
 .../core/model/LibraryReferenceContainer.java |  78 ++++++
 .../model/LibraryReferenceContainerInfo.java  |  30 +++
 .../indexer/TranslationUnitCollector.java     |   2 +
 .../core/CCorePluginResources.properties      |   2 +
 .../cdt/utils/coff/parser/PEParser64.java     |  10 +
 .../cdt/utils/debug/dwarf/DwarfReader.java    |  11 +-
 .../cdt/utils/elf/parser/ElfParser.java       |   9 +
 core/org.eclipse.cdt.ui/plugin.xml            |   1 -
 .../ui/BaseCElementContentProvider.java       |  67 +----
 .../eclipse/cdt/internal/ui/cview/CView.java  |  12 +
 .../ui/cview/CViewContentProvider.java        | 234 +++++-------------
 .../internal/ui/cview/CViewLabelProvider.java |  44 +---
 .../ui/cview/IncludeRefContainer.java         | 120 ---------
 .../ui/cview/IncludeReferenceProxy.java       | 107 --------
 .../ui/cview/LibraryRefContainer.java         | 106 --------
 .../ui/navigator/CNavigatorLabelProvider.java |  12 +
 .../ui/viewsupport/CElementLabelComposer.java |   5 +
 .../viewsupport/IncludeFolderDecorator.java   |  12 +-
 .../ChangeBuildConfigContribution.java        |  13 -
 .../cdt/ui/CElementContentProvider.java       |   8 +-
 .../org/eclipse/cdt/ui/CElementSorter.java    |  10 +-
 .../actions/ChangeBuildConfigActionBase.java  |  13 -
 .../cdt/ui/newui/ManageConfigSelector.java    |  13 -
 .../AbstractImportExecutableWizard.java       |  10 +-
 37 files changed, 458 insertions(+), 835 deletions(-)
 delete mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/BinaryFilePresentation.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java
 delete mode 100644 core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeRefContainer.java
 delete mode 100644 core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeReferenceProxy.java
 delete mode 100644 core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/LibraryRefContainer.java

diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/BinaryFilePresentation.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/BinaryFilePresentation.java
deleted file mode 100644
index 63b74a9564..0000000000
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/BinaryFilePresentation.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 Wind River Systems, Inc. and others.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *    Markus Schorn - initial API and implementation
- *******************************************************************************/
-package org.eclipse.cdt.core.model;
-
-import org.eclipse.cdt.core.IBinaryParser.IBinaryFile;
-
-/**
- * Allows to configure the presentation of binaries.
- *
- * <p> Clients may create subclasses. </p>
- * @since 4.0.1.
- */
-public abstract class BinaryFilePresentation {
-
-	final protected IBinaryFile fBinaryFile;
-
-	/**
-	 * Constructs the presentation object for a binary file.
-	 */
-	public BinaryFilePresentation(IBinaryFile binFile) {
-		fBinaryFile = binFile;
-	}
-
-	/**
-	 * Default implementation for showing binaries as part of the binary container.
-	 * It is used whenever a IBinaryFile is not adaptable to BinaryFilePresentation.
-	 */
-	public static boolean showInBinaryContainer(IBinaryFile bin) {
-		switch (bin.getType()) {
-		case IBinaryFile.EXECUTABLE:
-		case IBinaryFile.SHARED:
-			return true;
-		}
-		return false;
-	}
-
-	/**
-	 * Determines whether a binary is to be shown as part of the binary container.
-	 * The default implementation returns <code>true</code> for executables and
-	 * dynamic libraries.
-	 */
-	public boolean showInBinaryContainer() {
-		return showInBinaryContainer(fBinaryFile);
-	}
-}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinary.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinary.java
index feb502bb3b..43696c65d4 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinary.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IBinary.java
@@ -49,12 +49,4 @@ public interface IBinary extends ICElement, IParent, IOpenable {
 
 	public boolean isLittleEndian();
 
-	/**
-	 * Determines whether this binary is part of the binary container. The binary container collects
-	 * binaries from a project. This is typically used to presents the executables of a project under
-	 * a common node in the CView or ProjectNavigator.
-	 */
-	public boolean showInBinaryContainer();
-	//public IAddressFactory getAddressFactory();
-
 }
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java
index 2123e8e100..02e15f2e62 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java
@@ -55,6 +55,10 @@ public interface ICProject extends IParent, IOpenable, ICElement {
 	 */
 	IBinaryContainer getBinaryContainer() throws CModelException;
 
+	IIncludeReferenceContainer getIncludeReferenceContainer() throws CModelException;
+
+	ILibraryReferenceContainer getLibraryReferenceContainer() throws CModelException;
+
 	/**
 	 * Returns the source root folders of the project.
 	 *
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java
new file mode 100644
index 0000000000..a2321e88cc
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java
@@ -0,0 +1,22 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.core.model;
+
+/**
+ * Represents a container of all the IIncludeReference's found in the project
+ * while inspecting the project.
+ *
+ * @noextend This interface is not intended to be extended by clients.
+ * @noimplement This interface is not intended to be implemented by clients.
+ */
+public interface IIncludeReferenceContainer extends ICElement, IParent, IOpenable {
+
+	public IIncludeReference[] getIncludeReferences() throws CModelException;
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java
new file mode 100644
index 0000000000..bd037c9bda
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java
@@ -0,0 +1,22 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.core.model;
+
+/**
+ * Represents a container of all the ILibraryReference's found in the project
+ * while inspecting the project.
+ *
+ * @noextend This interface is not intended to be extended by clients.
+ * @noimplement This interface is not intended to be implemented by clients.
+ */
+public interface ILibraryReferenceContainer extends ICElement, IParent, IOpenable {
+
+	public ILibraryReference[] getLibraryReferences() throws CModelException;
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java
index 4bd564eeca..3916e05376 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java
@@ -20,6 +20,7 @@ import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -32,7 +33,6 @@ import org.eclipse.cdt.core.IBinaryParser.IBinaryShared;
 import org.eclipse.cdt.core.IBinaryParser.ISymbol;
 import org.eclipse.cdt.core.ISourceFinder;
 import org.eclipse.cdt.core.ISymbolReader;
-import org.eclipse.cdt.core.model.BinaryFilePresentation;
 import org.eclipse.cdt.core.model.CModelException;
 import org.eclipse.cdt.core.model.CoreModel;
 import org.eclipse.cdt.core.model.IBinary;
@@ -65,26 +65,15 @@ public class Binary extends Openable implements IBinary {
 	private long fLastModification;
 
 	private IBinaryObject binaryObject;
-	private boolean showInBinaryContainer;
 
 	public Binary(ICElement parent, IFile file, IBinaryObject bin) {
 		super(parent, file, ICElement.C_BINARY);
 		binaryObject = bin;
-		showInBinaryContainer = determineShowInBinaryContainer(bin);
-	}
-
-	private boolean determineShowInBinaryContainer(IBinaryObject bin) {
-		BinaryFilePresentation presentation = bin.getAdapter(BinaryFilePresentation.class);
-		if (presentation != null) {
-			return presentation.showInBinaryContainer();
-		}
-		return BinaryFilePresentation.showInBinaryContainer(bin);
 	}
 
 	public Binary(ICElement parent, IPath path, IBinaryObject bin) {
 		super(parent, path, ICElement.C_BINARY);
 		binaryObject = bin;
-		showInBinaryContainer = determineShowInBinaryContainer(bin);
 	}
 
 	@Override
@@ -316,10 +305,17 @@ public class Binary extends Openable implements IBinary {
 		}
 
 		if (sourceFiles != null && sourceFiles.length > 0) {
+			Arrays.sort(sourceFiles);
 			ISourceFinder srcFinder = getAdapter(ISourceFinder.class);
 			try {
 				for (String filename : sourceFiles) {
 
+					//filter out non-existent files
+					IPath path = Path.fromOSString(filename);
+					if (!path.toFile().exists()) {
+						continue;
+					}
+
 					// Find the file locally
 					if (srcFinder != null) {
 						String localPath = srcFinder.toLocalPath(filename);
@@ -528,11 +524,6 @@ public class Binary extends Openable implements IBinary {
 		super.closing(info);
 	}
 
-	@Override
-	public boolean showInBinaryContainer() {
-		return showInBinaryContainer;
-	}
-
 	@Override
 	public ICElement getHandleFromMemento(String token, MementoTokenizer memento) {
 		return null;
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryContainer.java
index f4f14abba0..2113b21ee7 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryContainer.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/BinaryContainer.java
@@ -49,7 +49,7 @@ public class BinaryContainer extends Openable implements IBinaryContainer {
 		for (ICElement element : e) {
 			if (element instanceof IBinary) {
 				IBinary bin = (IBinary) element;
-				if (bin.showInBinaryContainer()) {
+				if (true) {
 					list.add(bin);
 				}
 			}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CContainer.java
index d2eb704fd4..43954cd49a 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CContainer.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CContainer.java
@@ -225,7 +225,7 @@ public class CContainer extends Openable implements ICContainer {
 					} else {
 						final Binary binElement = new Binary(this, file, (IBinaryObject) bin);
 						celement = binElement;
-						if (binElement.showInBinaryContainer()) {
+						if (true) {
 							BinaryContainer vbin = (BinaryContainer) cproject.getBinaryContainer();
 							vbin.addChild(celement);
 						}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java
index 102c888304..774fb35a09 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java
@@ -41,8 +41,10 @@ import org.eclipse.cdt.core.model.ICModelStatusConstants;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IIncludeEntry;
 import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
 import org.eclipse.cdt.core.model.ILibraryEntry;
 import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IOutputEntry;
 import org.eclipse.cdt.core.model.IPathEntry;
 import org.eclipse.cdt.core.model.ISourceEntry;
@@ -84,6 +86,16 @@ public class CProject extends Openable implements ICProject {
 		return ((CProjectInfo) getElementInfo()).getArchiveContainer();
 	}
 
+	@Override
+	public IIncludeReferenceContainer getIncludeReferenceContainer() throws CModelException {
+		return ((CProjectInfo) getElementInfo()).getIncludeReferenceContainer();
+	}
+
+	@Override
+	public ILibraryReferenceContainer getLibraryReferenceContainer() throws CModelException {
+		return ((CProjectInfo) getElementInfo()).getLibraryReferenceContainer();
+	}
+
 	@Override
 	public IProject getProject() {
 		return getUnderlyingResource().getProject();
@@ -165,9 +177,6 @@ public class CProject extends Openable implements ICProject {
 	public IIncludeReference[] getIncludeReferences() throws CModelException {
 		CProjectInfo pinfo = (CProjectInfo) CModelManager.getDefault().peekAtInfo(this);
 		IIncludeReference[] incRefs = null;
-		if (pinfo != null) {
-			incRefs = pinfo.incReferences;
-		}
 		if (incRefs == null) {
 			IPathEntry[] entries = getResolvedPathEntries();
 			ArrayList<IncludeReference> list = new ArrayList<>(entries.length);
@@ -178,9 +187,6 @@ public class CProject extends Openable implements ICProject {
 				}
 			}
 			incRefs = list.toArray(new IIncludeReference[list.size()]);
-			if (pinfo != null) {
-				pinfo.incReferences = incRefs;
-			}
 		}
 		return incRefs;
 	}
@@ -189,9 +195,6 @@ public class CProject extends Openable implements ICProject {
 	public ILibraryReference[] getLibraryReferences() throws CModelException {
 		CProjectInfo pinfo = (CProjectInfo) CModelManager.getDefault().peekAtInfo(this);
 		ILibraryReference[] libRefs = null;
-		if (pinfo != null) {
-			libRefs = pinfo.libReferences;
-		}
 
 		if (libRefs == null) {
 			BinaryParserConfig[] binConfigs = CModelManager.getDefault().getBinaryParser(getProject());
@@ -207,9 +210,6 @@ public class CProject extends Openable implements ICProject {
 				}
 			}
 			libRefs = list.toArray(new ILibraryReference[list.size()]);
-			if (pinfo != null) {
-				pinfo.libReferences = libRefs;
-			}
 		}
 		return libRefs;
 	}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java
index 81e121da42..636c6f10e7 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java
@@ -23,7 +23,9 @@ import org.eclipse.cdt.core.model.IArchiveContainer;
 import org.eclipse.cdt.core.model.IBinaryContainer;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
 import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IOutputEntry;
 import org.eclipse.cdt.core.model.ISourceRoot;
 import org.eclipse.core.resources.IContainer;
@@ -39,8 +41,8 @@ class CProjectInfo extends OpenableInfo {
 
 	BinaryContainer vBin;
 	ArchiveContainer vLib;
-	ILibraryReference[] libReferences;
-	IIncludeReference[] incReferences;
+	IIncludeReferenceContainer includeReferenceContainer;
+	ILibraryReferenceContainer libraryReferenceContainer;
 	ISourceRoot[] sourceRoots;
 	IOutputEntry[] outputEntries;
 
@@ -68,6 +70,20 @@ class CProjectInfo extends OpenableInfo {
 		return vLib;
 	}
 
+	synchronized public IIncludeReferenceContainer getIncludeReferenceContainer() {
+		if (includeReferenceContainer == null) {
+			includeReferenceContainer = new IncludeReferenceContainer((CProject) getElement());
+		}
+		return includeReferenceContainer;
+	}
+
+	synchronized public ILibraryReferenceContainer getLibraryReferenceContainer() {
+		if (libraryReferenceContainer == null) {
+			libraryReferenceContainer = new LibraryReferenceContainer((CProject) getElement());
+		}
+		return libraryReferenceContainer;
+	}
+
 	public Object[] getNonCResources(IResource res) {
 		if (nonCResources != null)
 			return nonCResources;
@@ -137,24 +153,6 @@ class CProjectInfo extends OpenableInfo {
 	 * Reset the source roots and other caches
 	 */
 	public void resetCaches() {
-		if (libReferences != null) {
-			for (ILibraryReference libReference : libReferences) {
-				try {
-					((CElement) libReference).close();
-				} catch (CModelException e) {
-					//
-				}
-			}
-		}
-		if (incReferences != null) {
-			for (IIncludeReference incReference : incReferences) {
-				try {
-					((CElement) incReference).close();
-				} catch (CModelException e) {
-					//
-				}
-			}
-		}
 		sourceRoots = null;
 		outputEntries = null;
 		setNonCResources(null);
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeltaProcessor.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeltaProcessor.java
index 118f9d8033..0468cdbe68 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeltaProcessor.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/DeltaProcessor.java
@@ -89,57 +89,6 @@ final class DeltaProcessor {
 
 		ICElement celement = manager.create(resource, null);
 
-		// BUG 36424:
-		// The Binary may only be visible in the BinaryContainers
-		try {
-			if (celement == null && resource.getType() == IResource.FILE) {
-				ICElement[] children;
-				ICProject cproj = manager.create(resource.getProject());
-				if (cproj != null && cproj.isOpen()) {
-					IBinaryContainer bin = cproj.getBinaryContainer();
-					if (bin.isOpen()) {
-						children = ((CElement) bin).getElementInfo().getChildren();
-						for (ICElement element : children) {
-							IResource res = element.getResource();
-							if (resource.equals(res)) {
-								celement = element;
-								break;
-							}
-						}
-					}
-				}
-			}
-			// BUG 36424:
-			// The Archive may only be visible in the ArchiveContainers
-			if (celement == null && resource.getType() == IResource.FILE) {
-				ICElement[] children;
-				ICProject cproj = manager.create(resource.getProject());
-				if (cproj != null && cproj.isOpen()) {
-					IArchiveContainer ar = cproj.getArchiveContainer();
-					if (ar.isOpen()) {
-						children = ((CElement) ar).getElementInfo().getChildren();
-						for (ICElement element : children) {
-							IResource res = element.getResource();
-							if (resource.equals(res)) {
-								celement = element;
-								break;
-							}
-						}
-					}
-				}
-			}
-			//  It is not a C resource if the parent is a Binary/ArchiveContainer
-			// But we have to release too.
-			if (celement != null && resource.getType() == IResource.FILE) {
-				ICElement parent = celement.getParent();
-				if (parent instanceof IArchiveContainer || parent instanceof IBinaryContainer) {
-					releaseCElement(celement);
-					celement = null;
-				}
-			}
-		} catch (CModelException e) {
-			return null;
-		}
 		return celement;
 	}
 
@@ -585,7 +534,7 @@ final class DeltaProcessor {
 				} else if (element instanceof ICProject) {
 					return ((ICProject) element).isOpen();
 				} else if (element instanceof IBinary) {
-					if (((IBinary) element).showInBinaryContainer()) {
+					if (true) {
 						ICProject cProject = element.getCProject();
 						IBinaryContainer bin = cProject.getBinaryContainer();
 						fCurrentDelta.changed(bin, ICElementDelta.F_CONTENT);
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java
new file mode 100644
index 0000000000..9ed86bf734
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java
@@ -0,0 +1,78 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.internal.core.model;
+
+import java.util.Map;
+
+import org.eclipse.cdt.core.CCorePlugin;
+import org.eclipse.cdt.core.model.CModelException;
+import org.eclipse.cdt.core.model.ICElement;
+import org.eclipse.cdt.core.model.ICProject;
+import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
+import org.eclipse.cdt.internal.core.util.MementoTokenizer;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.IProgressMonitor;
+
+public class IncludeReferenceContainer extends Openable implements IIncludeReferenceContainer {
+
+	public IncludeReferenceContainer(CProject cProject) {
+		super(cProject, null, CCorePlugin.getResourceString("CoreModel.IncludeReferenceContainer.Includes"), //$NON-NLS-1$
+				ICElement.C_VCONTAINER);
+	}
+
+	@Override
+	public IIncludeReference[] getIncludeReferences() throws CModelException {
+		return ((ICProject) getParent()).getIncludeReferences();
+	}
+
+	@Override
+	public CElementInfo getElementInfo(IProgressMonitor monitor) throws CModelException {
+		CModelManager manager = CModelManager.getDefault();
+		synchronized (manager) {
+			CElementInfo info = (CElementInfo) manager.getInfo(this);
+			if (info != null) {
+				return info;
+			}
+			info = createElementInfo();
+			openWhenClosed(info, monitor);
+			return info;
+		}
+	}
+
+	@Override
+	public CElementInfo createElementInfo() {
+		return new IncludeReferenceContainerInfo(this);
+	}
+
+	@Override
+	protected boolean buildStructure(OpenableInfo info, IProgressMonitor pm, Map<ICElement, CElementInfo> newElements,
+			IResource underlyingResource) throws CModelException {
+		return true;
+	}
+
+	@Override
+	public ICElement getHandleFromMemento(String token, MementoTokenizer memento) {
+		return null;
+	}
+
+	@Override
+	public String getHandleMemento() {
+		return null;
+	}
+
+	@Override
+	protected char getHandleMementoDelimiter() {
+		Assert.isTrue(false, "Should not be called"); //$NON-NLS-1$
+		return 0;
+	}
+
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java
new file mode 100644
index 0000000000..1d8f1fb9e1
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java
@@ -0,0 +1,30 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+
+package org.eclipse.cdt.internal.core.model;
+
+import org.eclipse.cdt.core.model.ICElement;
+
+/**
+ */
+public class IncludeReferenceContainerInfo extends OpenableInfo {
+
+	/**
+	 * Constructs a new C Model Info
+	 */
+	protected IncludeReferenceContainerInfo(CElement element) {
+		super(element);
+	}
+
+	@Override
+	protected void addChild(ICElement child) {
+		addChildIfAbsent(child);
+	}
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java
new file mode 100644
index 0000000000..8858c607c3
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java
@@ -0,0 +1,78 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.internal.core.model;
+
+import java.util.Map;
+
+import org.eclipse.cdt.core.CCorePlugin;
+import org.eclipse.cdt.core.model.CModelException;
+import org.eclipse.cdt.core.model.ICElement;
+import org.eclipse.cdt.core.model.ICProject;
+import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
+import org.eclipse.cdt.internal.core.util.MementoTokenizer;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.IProgressMonitor;
+
+public class LibraryReferenceContainer extends Openable implements ILibraryReferenceContainer {
+
+	public LibraryReferenceContainer(CProject cProject) {
+		super(cProject, null, CCorePlugin.getResourceString("CoreModel.LibraryReferenceContainer.Libraries"), //$NON-NLS-1$
+				ICElement.C_VCONTAINER);
+	}
+
+	@Override
+	public ILibraryReference[] getLibraryReferences() throws CModelException {
+		return ((ICProject) getParent()).getLibraryReferences();
+	}
+
+	@Override
+	public CElementInfo getElementInfo(IProgressMonitor monitor) throws CModelException {
+		CModelManager manager = CModelManager.getDefault();
+		synchronized (manager) {
+			CElementInfo info = (CElementInfo) manager.getInfo(this);
+			if (info != null) {
+				return info;
+			}
+			info = createElementInfo();
+			openWhenClosed(info, monitor);
+			return info;
+		}
+	}
+
+	@Override
+	public CElementInfo createElementInfo() {
+		return new LibraryReferenceContainerInfo(this);
+	}
+
+	@Override
+	protected boolean buildStructure(OpenableInfo info, IProgressMonitor pm, Map<ICElement, CElementInfo> newElements,
+			IResource underlyingResource) throws CModelException {
+		return true;
+	}
+
+	@Override
+	public ICElement getHandleFromMemento(String token, MementoTokenizer memento) {
+		return null;
+	}
+
+	@Override
+	public String getHandleMemento() {
+		return null;
+	}
+
+	@Override
+	protected char getHandleMementoDelimiter() {
+		Assert.isTrue(false, "Should not be called"); //$NON-NLS-1$
+		return 0;
+	}
+
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java
new file mode 100644
index 0000000000..9eb70bd1e3
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java
@@ -0,0 +1,30 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+
+package org.eclipse.cdt.internal.core.model;
+
+import org.eclipse.cdt.core.model.ICElement;
+
+/**
+ */
+public class LibraryReferenceContainerInfo extends OpenableInfo {
+
+	/**
+	 * Constructs a new C Model Info
+	 */
+	protected LibraryReferenceContainerInfo(CElement element) {
+		super(element);
+	}
+
+	@Override
+	protected void addChild(ICElement child) {
+		addChildIfAbsent(child);
+	}
+}
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java
index 43d41175ea..d88045b6ee 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java
@@ -49,6 +49,8 @@ final public class TranslationUnitCollector implements ICElementVisitor {
 			return false;
 		case ICElement.C_CCONTAINER:
 		case ICElement.C_PROJECT:
+		//For imported C/C++ executable
+		case ICElement.C_BINARY:
 			return true;
 		}
 		return false;
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties
index 1553b17174..57b60facea 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties
@@ -22,6 +22,8 @@ CoreModel.CModelBuilder.Parser_Construction_Failure=Parser/Scanner construction
 CoreModel.CModelBuilder.Parse_Failure=Parse failure
 CoreModel.ArchiveContainer.Archives=Archives
 CoreModel.BinaryContainer.Binaries=Binaries
+CoreModel.IncludeReferenceContainer.Includes=Includes
+CoreModel.LibraryReferenceContainer.Libraries=Libraries
 CoreModel.CModelStatus.Error_in_CPlugin=Error in C Plugin
 CoreModel.NullBinaryParser.Not_binary_file=not a binary file
 CoreModel.NullBinaryParser.Null_Format=Null Format
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
index 56ecb87174..409c8908f6 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
@@ -95,6 +95,16 @@ public class PEParser64 extends AbstractCExtension implements IBinaryParser {
 
 	@Override
 	public boolean isBinary(byte[] array, IPath path) {
+		String baseName = path.lastSegment();
+		if (baseName.endsWith(".o") //$NON-NLS-1$
+				|| baseName.endsWith(".obj") //$NON-NLS-1$
+				|| baseName.endsWith(".a") //$NON-NLS-1$
+				|| baseName.endsWith(".lib") //$NON-NLS-1$
+				|| baseName.endsWith(".exe") //$NON-NLS-1$
+				|| baseName.endsWith(".dll") //$NON-NLS-1$
+				) {
+			return true;
+		}
 		boolean isBin = PE64.isExeHeader(array) || AR.isARHeader(array);
 		// It maybe an object file try the known machine types.
 		if (!isBin && array.length > 1) {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
index 24c4e7c6c0..c4f8a622f6 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
@@ -28,8 +28,10 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.TreeSet;
 
 import org.eclipse.cdt.core.CCorePlugin;
+import org.eclipse.cdt.core.Cygwin;
 import org.eclipse.cdt.core.ICompileOptionsFinder;
 import org.eclipse.cdt.core.ISymbolReader;
 import org.eclipse.cdt.utils.coff.Coff64.SectionHeader;
@@ -40,6 +42,7 @@ import org.eclipse.cdt.utils.elf.Elf.Section;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
 
 /**
  * Light-weight parser of Dwarf2 data which is intended for getting only
@@ -54,7 +57,8 @@ public class DwarfReader extends Dwarf implements ISymbolReader, ICompileOptions
 
 	final static String[] DWARF_ALT_SectionsToParse = { DWARF_DEBUG_STR, DWARF_DEBUG_MACRO };
 
-	private final Collection<String> m_fileCollection = new HashSet<>();
+	// use TreeSet instead of HashSet to make the collection sorted by file names
+	private final Collection<String> m_fileCollection = new TreeSet<>();
 	private final Map<Long, String> m_stmtFileMap = new HashMap<>();
 	private final Map<String, ArrayList<String>> m_compileOptionsMap = new HashMap<>();
 	private String[] m_fileNames = null;
@@ -695,6 +699,11 @@ public class DwarfReader extends Dwarf implements ISymbolReader, ICompileOptions
 		// This convert the path to canonical path (but not necessarily absolute, which
 		// is different from java.io.File.getCanonicalPath()).
 		fullName = pa.toString();
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			if (fullName.startsWith("/")) { //$NON-NLS-1$
+				fullName = Cygwin.pathToWindows(fullName);
+			}
+		}
 
 		if (!m_fileCollection.contains(fullName))
 			m_fileCollection.add(fullName);
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
index c6c594303e..9e8f7fd6c6 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
@@ -98,6 +98,15 @@ public class ElfParser extends AbstractCExtension implements IBinaryParser {
 
 	@Override
 	public boolean isBinary(byte[] array, IPath path) {
+		String baseName = path.lastSegment();
+		if (baseName.endsWith(".o") //$NON-NLS-1$
+				|| baseName.endsWith(".obj") //$NON-NLS-1$
+				|| baseName.endsWith(".a") //$NON-NLS-1$
+				|| baseName.endsWith(".lib") //$NON-NLS-1$
+				|| baseName.endsWith(".so") //$NON-NLS-1$
+				) {
+			return true;
+		}
 		return Elf.isElfHeader(array) || AR.isARHeader(array);
 	}
 
diff --git a/core/org.eclipse.cdt.ui/plugin.xml b/core/org.eclipse.cdt.ui/plugin.xml
index dbd37475e3..11ea8fe698 100644
--- a/core/org.eclipse.cdt.ui/plugin.xml
+++ b/core/org.eclipse.cdt.ui/plugin.xml
@@ -4471,7 +4471,6 @@
          <description>%includeFolderDecorator.description</description>
          <enablement>
             <or>
-               <objectClass name="org.eclipse.cdt.internal.ui.cview.IncludeReferenceProxy" />
                <objectClass name="org.eclipse.cdt.core.model.IIncludeReference" />
             </or>
          </enablement>
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java
index c088f2bfec..9ab73a02b0 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java
@@ -367,7 +367,7 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 		return internalGetParent(element);
 	}
 
-	public Object internalGetParent(Object element) {
+	protected Object internalGetParent(Object element) {
 		if (element instanceof IResource) {
 			IResource parent = ((IResource) element).getParent();
 			if (parent != null && parent.isAccessible()) {
@@ -726,14 +726,6 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 	}
 
 	private Object[] filterNonCResources(Object[] objects, ICProject cproject) throws CModelException {
-		ICElement[] binaries = null;
-		ICElement[] archives = null;
-		try {
-			binaries = getBinaries(cproject);
-			archives = getArchives(cproject);
-		} catch (CModelException e) {
-			archives = binaries = ICElement.EMPTY_ARRAY;
-		}
 		ISourceRoot[] roots = null;
 		try {
 			roots = cproject.getSourceRoots();
@@ -767,24 +759,7 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 						o = root;
 				}
 			} else if (o instanceof IFile) {
-				boolean found = false;
-				for (ICElement binarie : binaries) {
-					IResource res = binarie.getResource();
-					if (o.equals(res)) {
-						o = binarie;
-						found = true;
-						break;
-					}
-				}
-				if (!found) {
-					for (ICElement archive : archives) {
-						IResource res = archive.getResource();
-						if (o.equals(res)) {
-							o = archive;
-							break;
-						}
-					}
-				}
+
 			}
 			nonCResources.add(o);
 		}
@@ -812,44 +787,6 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 		return true;
 	}
 
-	protected IBinary[] getBinaries(ICProject cproject) throws CModelException {
-		IBinaryContainer container = cproject.getBinaryContainer();
-		return getBinaries(container);
-	}
-
-	protected IBinary[] getBinaries(IBinaryContainer container) throws CModelException {
-		ICElement[] celements = container.getChildren();
-		ArrayList<IBinary> list = new ArrayList<>(celements.length);
-		for (ICElement celement : celements) {
-			if (celement instanceof IBinary) {
-				IBinary bin = (IBinary) celement;
-				list.add(bin);
-			}
-		}
-		IBinary[] bins = new IBinary[list.size()];
-		list.toArray(bins);
-		return bins;
-	}
-
-	protected IArchive[] getArchives(ICProject cproject) throws CModelException {
-		IArchiveContainer container = cproject.getArchiveContainer();
-		return getArchives(container);
-	}
-
-	protected IArchive[] getArchives(IArchiveContainer container) throws CModelException {
-		ICElement[] celements = container.getChildren();
-		ArrayList<IArchive> list = new ArrayList<>(celements.length);
-		for (ICElement celement : celements) {
-			if (celement instanceof IArchive) {
-				IArchive ar = (IArchive) celement;
-				list.add(ar);
-			}
-		}
-		IArchive[] ars = new IArchive[list.size()];
-		list.toArray(ars);
-		return ars;
-	}
-
 	/**
 	 * Note: This method is for internal use only. Clients should not call this method.
 	 */
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java
index 494dc73431..0c4219f508 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CView.java
@@ -27,6 +27,8 @@ import org.eclipse.cdt.core.model.IBinaryModule;
 import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICModel;
 import org.eclipse.cdt.core.model.ICProject;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IParent;
 import org.eclipse.cdt.core.model.ISourceReference;
 import org.eclipse.cdt.core.model.ITranslationUnit;
@@ -701,6 +703,16 @@ public class CView extends ViewPart
 						if (cproj != null) {
 							return cproj.getPath() + CViewMessages.CView_archives;
 						}
+					} else if (celement instanceof IIncludeReferenceContainer) {
+						ICProject cproj = celement.getCProject();
+						if (cproj != null) {
+							return cproj.getPath() + CViewMessages.IncludeRefContainer_Includes;
+						}
+					} else if (celement instanceof ILibraryReferenceContainer) {
+						ICProject cproj = celement.getCProject();
+						if (cproj != null) {
+							return cproj.getPath() + CViewMessages.LibraryRefContainer_Libraries;
+						}
 					} else if (celement instanceof IBinaryModule) {
 						IBinary bin = ((IBinaryModule) celement).getBinary();
 						return bin.getPath() + ":" + celement.getElementName(); //$NON-NLS-1$
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java
index 0e58a5bf1c..c4fcee24e0 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java
@@ -14,8 +14,6 @@
 
 package org.eclipse.cdt.internal.ui.cview;
 
-import java.util.ArrayList;
-
 import org.eclipse.cdt.core.model.CModelException;
 import org.eclipse.cdt.core.model.IArchive;
 import org.eclipse.cdt.core.model.IArchiveContainer;
@@ -24,33 +22,25 @@ import org.eclipse.cdt.core.model.IBinaryContainer;
 import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
 import org.eclipse.cdt.core.model.ILibraryReference;
-import org.eclipse.cdt.internal.ui.util.RemoteTreeContentManager;
-import org.eclipse.cdt.internal.ui.util.RemoteTreeViewer;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.ui.CElementContentProvider;
 import org.eclipse.core.resources.IContainer;
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.jface.viewers.TreeViewer;
-import org.eclipse.jface.viewers.Viewer;
 import org.eclipse.ui.IWorkbenchPartSite;
 
 /**
  * CViewContentProvider
  */
 public class CViewContentProvider extends CElementContentProvider {
-	private RemoteTreeContentManager fManager;
-
 	public CViewContentProvider() {
 		super();
 	}
 
-	/**
-	 *
-	 */
 	public CViewContentProvider(TreeViewer viewer, IWorkbenchPartSite site) {
 		super();
-		fManager = createContentManager(viewer, site);
 	}
 
 	/**
@@ -60,14 +50,6 @@ public class CViewContentProvider extends CElementContentProvider {
 	public CViewContentProvider(TreeViewer viewer, IWorkbenchPartSite site, boolean provideMembers,
 			boolean provideWorkingCopy) {
 		super(provideMembers, provideWorkingCopy);
-		fManager = createContentManager(viewer, site);
-	}
-
-	protected RemoteTreeContentManager createContentManager(TreeViewer viewer, IWorkbenchPartSite site) {
-		if (site == null) {
-			return new RemoteTreeContentManager(this, (RemoteTreeViewer) viewer, null);
-		}
-		return new RemoteTreeContentManager(this, (RemoteTreeViewer) viewer, site);
 	}
 
 	/* (non-Javadoc)
@@ -75,30 +57,32 @@ public class CViewContentProvider extends CElementContentProvider {
 	 */
 	@Override
 	public Object[] getChildren(Object element) {
-		Object[] objs = null;
-
-		if (fManager != null) {
-			// use the the deferred manager for some cases
-			if (element instanceof IBinary) {
-				// It takes sometimes to parse binaries deferred it
-				objs = fManager.getChildren(element);
-			} else if (element instanceof IArchive) {
-				// It takes sometimes to parse archives deferred it
-				objs = fManager.getChildren(element);
-			}
-		}
-
-		if (objs == null) {
-			objs = super.getChildren(element);
-		}
+		Object[] objs = super.getChildren(element);
 		Object[] extras = null;
 		try {
 			if (element instanceof ICProject) {
-				extras = getProjectChildren((ICProject) element);
+				ICProject cproject = (ICProject) element;
+				IArchiveContainer archive = cproject.getArchiveContainer();
+				IBinaryContainer bin = cproject.getBinaryContainer();
+				ILibraryReferenceContainer libRefCont = cproject.getLibraryReferenceContainer();
+				IIncludeReferenceContainer incRefCont = cproject.getIncludeReferenceContainer();
+				extras = new Object[] { archive, bin, libRefCont, incRefCont };
 			} else if (element instanceof IBinaryContainer) {
-				extras = getExecutables((IBinaryContainer) element);
+				IBinaryContainer container = (IBinaryContainer) element;
+				IBinary[] celements = container.getBinaries();
+				extras = celements;
 			} else if (element instanceof IArchiveContainer) {
-				extras = getArchives((IArchiveContainer) element);
+				IArchiveContainer container = (IArchiveContainer) element;
+				IArchive[] celements = container.getArchives();
+				extras = celements;
+			} else if (element instanceof IIncludeReferenceContainer) {
+				IIncludeReferenceContainer container = (IIncludeReferenceContainer) element;
+				IIncludeReference[] celements = container.getIncludeReferences();
+				extras = celements;
+			} else if (element instanceof ILibraryReferenceContainer) {
+				ILibraryReferenceContainer container = (ILibraryReferenceContainer) element;
+				ILibraryReference[] celements = container.getLibraryReferences();
+				extras = celements;
 			} else if (element instanceof IIncludeReference) {
 				extras = getIncludeReferenceChildren((IIncludeReference) element);
 			}
@@ -115,6 +99,27 @@ public class CViewContentProvider extends CElementContentProvider {
 		return objs;
 	}
 
+	@Override
+	public boolean hasChildren(Object element) {
+		//@formatter:off
+		if (element instanceof ICProject
+			|| element instanceof IBinaryContainer
+			|| element instanceof IArchiveContainer
+			|| element instanceof IIncludeReferenceContainer
+			|| element instanceof ILibraryReferenceContainer
+			|| element instanceof IIncludeReference
+			|| element instanceof IBinary
+			|| element instanceof IArchive) {
+			return true;
+		}
+		return super.hasChildren(element);
+	}
+
+	@Override
+	public Object getParent(Object element) {
+		return super.getParent(element);
+	}
+
 	public Object[] getIncludeReferenceChildren(IIncludeReference ref) throws CModelException {
 		// We do not want to show children for Include paths that are inside the workspace.
 		// no need to that since they can access elsewhere and that simplifies the
@@ -129,146 +134,37 @@ public class CViewContentProvider extends CElementContentProvider {
 		return ref.getChildren();
 	}
 
-	private Object[] getProjectChildren(ICProject cproject) throws CModelException {
-		Object[] extras = null;
-		IArchiveContainer archive = cproject.getArchiveContainer();
-		if (getArchives(archive).length > 0) {
-			extras = new Object[] { archive };
-		}
-		IBinaryContainer bin = cproject.getBinaryContainer();
-		if (getExecutables(bin).length > 0) {
-			Object[] o = new Object[] { bin };
-			if (extras != null && extras.length > 0) {
-				extras = concatenate(extras, o);
-			} else {
-				extras = o;
-			}
-		}
-		LibraryRefContainer libRefCont = new LibraryRefContainer(cproject);
-		Object[] libRefs = libRefCont.getChildren(cproject);
-		if (libRefs != null && libRefs.length > 0) {
-			Object[] o = new Object[] { libRefCont };
-			if (extras != null && extras.length > 0) {
-				extras = concatenate(extras, o);
-			} else {
-				extras = o;
-			}
-		}
-
-		IncludeRefContainer incRefCont = new IncludeRefContainer(cproject);
-		Object[] incRefs = incRefCont.getChildren(cproject);
-		if (incRefs != null && incRefs.length > 0) {
-			Object[] o = new Object[] { incRefCont };
-			if (extras != null && extras.length > 0) {
-				extras = concatenate(extras, o);
-			} else {
-				extras = o;
-			}
-		}
-		return extras;
-	}
-
-	protected IBinary[] getExecutables(IBinaryContainer container) throws CModelException {
-		ICElement[] celements = container.getChildren();
-		ArrayList<IBinary> list = new ArrayList<>(celements.length);
-		for (int i = 0; i < celements.length; i++) {
-			if (celements[i] instanceof IBinary) {
-				IBinary bin = (IBinary) celements[i];
-				if (bin.showInBinaryContainer()) {
-					list.add(bin);
-				}
-			}
-		}
-		IBinary[] bins = new IBinary[list.size()];
-		list.toArray(bins);
-		return bins;
-	}
-
 	/* (non-Javadoc)
 	 * @see org.eclipse.cdt.internal.ui.BaseCElementContentProvider#internalGetParent(java.lang.Object)
 	 */
 	@Override
-	public Object internalGetParent(Object element) {
+	protected Object internalGetParent(Object element) {
 		// since we insert logical containers we have to fix
 		// up the parent for {IInclude,ILibrary}Reference so that they refer
 		// to the container and containers refere to the project
 		Object parent = super.internalGetParent(element);
-		if (element instanceof IncludeReferenceProxy) {
-			parent = ((IncludeReferenceProxy) element).getIncludeRefContainer();
-		} else if (element instanceof IncludeRefContainer) {
-			parent = ((IncludeRefContainer) element).getCProject();
-		} else if (element instanceof ILibraryReference) {
-			if (parent instanceof ICProject) {
-				parent = new LibraryRefContainer((ICProject) parent);
+		if (element instanceof ICElement) {
+			ICProject cproject = ((ICElement)element).getCProject();
+			if (element instanceof IIncludeReference) {
+				try {
+					parent = cproject.getIncludeReferenceContainer();
+				} catch (CModelException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			} else if (element instanceof ILibraryReference) {
+				try {
+					parent = cproject.getLibraryReferenceContainer();
+				} catch (CModelException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			} else if (element instanceof IIncludeReferenceContainer) {
+				parent = cproject.getCProject();
+			} else if (element instanceof ILibraryReferenceContainer) {
+				parent = cproject.getCProject();
 			}
-		} else if (element instanceof LibraryRefContainer) {
-			parent = ((LibraryRefContainer) element).getCProject();
 		}
 		return parent;
 	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.jface.viewers.ITreeContentProvider#hasChildren(java.lang.Object)
-	 */
-	@Override
-	public boolean hasChildren(Object element) {
-		if (fManager != null) {
-			if (element instanceof IBinary) {
-				return fManager.mayHaveChildren(element);
-			} else if (element instanceof IArchive) {
-				return fManager.mayHaveChildren(element);
-			}
-		}
-		if (element instanceof IBinaryContainer) {
-			try {
-				IBinaryContainer cont = (IBinaryContainer) element;
-				IBinary[] bins = getBinaries(cont);
-				return (bins != null) && bins.length > 0;
-			} catch (CModelException e) {
-				return false;
-			}
-		} else if (element instanceof IArchiveContainer) {
-			try {
-				IArchiveContainer cont = (IArchiveContainer) element;
-				IArchive[] ars = getArchives(cont);
-				return (ars != null) && ars.length > 0;
-			} catch (CModelException e) {
-				return false;
-			}
-		} else if (element instanceof IncludeReferenceProxy) {
-			IIncludeReference reference = ((IncludeReferenceProxy) element).getReference();
-			IContainer container = ResourcesPlugin.getWorkspace().getRoot()
-					.getContainerForLocation(reference.getPath());
-			if (container != null) {
-				// do not allow to navigate to workspace containers inside "Includes" node
-				return false;
-			}
-
-			return reference.hasChildren();
-		}
-		return super.hasChildren(element);
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
-	 */
-	@Override
-	public void dispose() {
-		if (fManager != null) {
-			fManager.cancel();
-		}
-		super.dispose();
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer, java.lang.Object, java.lang.Object)
-	 */
-	@Override
-	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
-		if (fManager != null) {
-			fManager.cancel();
-		}
-		super.inputChanged(viewer, oldInput, newInput);
-	}
-
 }
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewLabelProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewLabelProvider.java
index ab80af0e01..67c4d7a587 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewLabelProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewLabelProvider.java
@@ -45,29 +45,7 @@ public class CViewLabelProvider extends AppearanceAwareLabelProvider {
 
 	@Override
 	public String getText(Object element) {
-		if (element instanceof IncludeReferenceProxy) {
-			final IIncludeReference ref = ((IncludeReferenceProxy) element).getReference();
-			final IPath uriPathLocation = ref.getPath().makeAbsolute();
-			final IContainer[] containers = ResourcesPlugin.getWorkspace().getRoot()
-					.findContainersForLocationURI(URIUtil.toURI(uriPathLocation));
-			if (containers.length > 0) {
-				// bug 192707, prefer the project the reference belongs to.
-				final ICProject prj = ref.getCProject();
-				if (prj != null) {
-					for (int i = 0; i < containers.length; i++) {
-						final IContainer container = containers[i];
-						final IProject project = container.getProject();
-						// in case the path is empty, the container is the workspace root and project is null.
-						if (project != null && project.equals(prj.getProject())) {
-							return container.getFullPath().makeRelative().toString();
-						}
-					}
-				}
-				IPath p = containers[0].getFullPath();
-				p = (p.isRoot()) ? uriPathLocation : p.makeRelative();
-				return decorateText(p.toString(), element);
-			}
-		} else if (element instanceof IIncludeReference) {
+		if (element instanceof IIncludeReference) {
 			IIncludeReference ref = (IIncludeReference) element;
 			Object parent = ref.getParent();
 			if (parent instanceof IIncludeReference) {
@@ -103,25 +81,7 @@ public class CViewLabelProvider extends AppearanceAwareLabelProvider {
 	@Override
 	public Image getImage(Object element) {
 		String imageKey = null;
-		if (element instanceof IncludeReferenceProxy) {
-			IIncludeReference reference = ((IncludeReferenceProxy) element).getReference();
-			IPath path = reference.getPath();
-			ICProject cproject = reference.getCProject();
-			IProject project = (cproject != null) ? cproject.getProject() : null;
-			for (IContainer containerInclude : ResourcesPlugin.getWorkspace().getRoot()
-					.findContainersForLocationURI(URIUtil.toURI(path.makeAbsolute()))) {
-				IProject projectInclude = containerInclude.getProject();
-				boolean isProjectRelative = projectInclude != null && projectInclude.equals(project);
-				imageKey = LanguageSettingsImages.getImageKey(ICSettingEntry.INCLUDE_PATH,
-						ICSettingEntry.VALUE_WORKSPACE_PATH, isProjectRelative);
-				if (isProjectRelative) {
-					break;
-				}
-			}
-			if (imageKey == null) {
-				imageKey = CDTSharedImages.IMG_OBJS_INCLUDES_FOLDER;
-			}
-		} else if (element instanceof IIncludeReference) {
+		if (element instanceof IIncludeReference) {
 			imageKey = CDTSharedImages.IMG_OBJS_CFOLDER;
 		}
 
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeRefContainer.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeRefContainer.java
deleted file mode 100644
index df326c9d89..0000000000
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeRefContainer.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2002, 2015 QNX Software Systems and others.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- * QNX Software Systems - Initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.cdt.internal.ui.cview;
-
-import org.eclipse.cdt.core.model.CModelException;
-import org.eclipse.cdt.core.model.ICProject;
-import org.eclipse.cdt.core.model.IIncludeReference;
-import org.eclipse.cdt.ui.CDTSharedImages;
-import org.eclipse.cdt.ui.CElementGrouping;
-import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.ui.model.IWorkbenchAdapter;
-
-/**
- * IncludeRefContainer
- */
-public class IncludeRefContainer extends CElementGrouping {
-
-	ICProject fCProject;
-
-	/**
-	 *
-	 */
-	public IncludeRefContainer(ICProject cproject) {
-		super(INCLUDE_REF_CONTAINER);
-		fCProject = cproject;
-	}
-
-	@Override
-	@SuppressWarnings("unchecked")
-	public <T> T getAdapter(Class<T> adapter) {
-		if (adapter == IWorkbenchAdapter.class) {
-			return (T) this;
-		}
-		if (adapter == ICProject.class) {
-			return (T) fCProject;
-		}
-		return null;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getChildren(java.lang.Object)
-	 */
-	@Override
-	public Object[] getChildren(Object o) {
-		try {
-			IIncludeReference[] references = fCProject.getIncludeReferences();
-			IncludeReferenceProxy[] proxies = new IncludeReferenceProxy[references.length];
-			for (int i = 0; i < proxies.length; ++i) {
-				proxies[i] = new IncludeReferenceProxy(this, references[i]);
-			}
-			return proxies;
-		} catch (CModelException e) {
-		}
-		return NO_CHILDREN;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getImageDescriptor(java.lang.Object)
-	 */
-	@Override
-	public ImageDescriptor getImageDescriptor(Object object) {
-		return CDTSharedImages.getImageDescriptor(CDTSharedImages.IMG_OBJS_INCLUDES_CONTAINER);
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
-	 */
-	@Override
-	public String getLabel(Object o) {
-		return CViewMessages.IncludeRefContainer_Includes;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getParent(java.lang.Object)
-	 */
-	@Override
-	public Object getParent(Object o) {
-		return getCProject();
-	}
-
-	public ICProject getCProject() {
-		return fCProject;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (obj instanceof IncludeRefContainer) {
-			IncludeRefContainer other = (IncludeRefContainer) obj;
-			return fCProject.equals(other.getCProject());
-		}
-		return super.equals(obj);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		if (fCProject != null) {
-			return fCProject.hashCode();
-		}
-		return super.hashCode();
-	}
-
-}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeReferenceProxy.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeReferenceProxy.java
deleted file mode 100644
index c8bb32e9db..0000000000
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/IncludeReferenceProxy.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2000, 2010 QNX Software Systems and others.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *     QNX Software Systems - Initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.cdt.internal.ui.cview;
-
-import org.eclipse.cdt.core.model.CModelException;
-import org.eclipse.cdt.core.model.IIncludeReference;
-import org.eclipse.cdt.ui.CDTSharedImages;
-import org.eclipse.cdt.ui.CElementGrouping;
-import org.eclipse.jface.resource.ImageDescriptor;
-
-/**
- * @author User
- *
- * TODO To change the template for this generated type comment go to
- * Window - Preferences - Java - Code Style - Code Templates
- */
-public class IncludeReferenceProxy extends CElementGrouping {
-
-	IncludeRefContainer includeRefContainer;
-	IIncludeReference reference;
-
-	public IncludeReferenceProxy(IncludeRefContainer parent, IIncludeReference reference) {
-		super(0);
-		this.reference = reference;
-		this.includeRefContainer = parent;
-	}
-
-	public IIncludeReference getReference() {
-		return reference;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getChildren(java.lang.Object)
-	 */
-	@Override
-	public Object[] getChildren(Object object) {
-		try {
-			return reference.getChildren();
-		} catch (CModelException e) {
-			// We should log the error.
-		}
-		return NO_CHILDREN;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getImageDescriptor(java.lang.Object)
-	 */
-	@Override
-	public ImageDescriptor getImageDescriptor(Object object) {
-		return CDTSharedImages.getImageDescriptor(CDTSharedImages.IMG_OBJS_INCLUDES_FOLDER);
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getParent(java.lang.Object)
-	 */
-	@Override
-	public Object getParent(Object object) {
-		return getIncludeRefContainer();
-	}
-
-	public IncludeRefContainer getIncludeRefContainer() {
-		return includeRefContainer;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj) {
-			return true;
-		}
-		if (!(obj instanceof IncludeReferenceProxy)) {
-			return false;
-		}
-		IncludeReferenceProxy other = (IncludeReferenceProxy) obj;
-		return reference.equals(other.reference);
-	}
-
-	/*
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return reference.hashCode();
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return reference.toString();
-	}
-}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/LibraryRefContainer.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/LibraryRefContainer.java
deleted file mode 100644
index 2a79068500..0000000000
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/LibraryRefContainer.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2002, 2015 QNX Software Systems and others.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- * QNX Software Systems - Initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.cdt.internal.ui.cview;
-
-import java.util.ArrayList;
-
-import org.eclipse.cdt.core.model.CModelException;
-import org.eclipse.cdt.core.model.ICProject;
-import org.eclipse.cdt.core.model.ILibraryReference;
-import org.eclipse.cdt.ui.CDTSharedImages;
-import org.eclipse.cdt.ui.CElementGrouping;
-import org.eclipse.core.resources.IFile;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.ui.model.IWorkbenchAdapter;
-
-/**
- * VirtualGrouping
- */
-public class LibraryRefContainer extends CElementGrouping {
-
-	private Object[] EMPTY = new Object[0];
-	private ICProject fCProject;
-
-	/**
-	 *
-	 */
-	public LibraryRefContainer(ICProject cproject) {
-		super(LIBRARY_REF_CONTAINER);
-		fCProject = cproject;
-	}
-
-	@Override
-	@SuppressWarnings("unchecked")
-	public <T> T getAdapter(Class<T> adapter) {
-		if (adapter == IWorkbenchAdapter.class) {
-			return (T) this;
-		}
-		if (adapter == ICProject.class) {
-			return (T) fCProject;
-		}
-		return null;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getChildren(java.lang.Object)
-	 */
-	@Override
-	public Object[] getChildren(Object o) {
-		try {
-			ILibraryReference[] references = fCProject.getLibraryReferences();
-			ArrayList<ILibraryReference> list = new ArrayList<>(references.length);
-			for (ILibraryReference reference : references) {
-				IPath path = reference.getPath();
-				IFile file = reference.getCModel().getWorkspace().getRoot().getFileForLocation(path);
-				if (file == null || !file.isAccessible()) {
-					list.add(reference);
-				}
-			}
-			return list.toArray();
-		} catch (CModelException e) {
-		}
-		return EMPTY;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getImageDescriptor(java.lang.Object)
-	 */
-	@Override
-	public ImageDescriptor getImageDescriptor(Object object) {
-		return CDTSharedImages.getImageDescriptor(CDTSharedImages.IMG_OBJS_LIBRARY);
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
-	 */
-	@Override
-	public String getLabel(Object o) {
-		return CViewMessages.LibraryRefContainer_Libraries;
-	}
-
-	/* (non-Javadoc)
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getParent(java.lang.Object)
-	 */
-	@Override
-	public Object getParent(Object o) {
-		return getCProject();
-	}
-
-	public ICProject getCProject() {
-		return fCProject;
-	}
-
-}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorLabelProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorLabelProvider.java
index 34f85dbeb5..d7e5c38532 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorLabelProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/navigator/CNavigatorLabelProvider.java
@@ -19,6 +19,8 @@ import org.eclipse.cdt.core.model.IBinaryContainer;
 import org.eclipse.cdt.core.model.IBinaryModule;
 import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICProject;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.internal.ui.cview.CViewLabelProvider;
 import org.eclipse.cdt.internal.ui.cview.CViewMessages;
 import org.eclipse.cdt.internal.ui.viewsupport.AppearanceAwareLabelProvider;
@@ -94,6 +96,16 @@ public class CNavigatorLabelProvider extends CViewLabelProvider implements IComm
 					if (cproj != null) {
 						return cproj.getPath() + CViewMessages.CView_archives;
 					}
+				} else if (celement instanceof IIncludeReferenceContainer) {
+					ICProject cproj = celement.getCProject();
+					if (cproj != null) {
+						return cproj.getPath() + CViewMessages.IncludeRefContainer_Includes;
+					}
+				} else if (celement instanceof ILibraryReferenceContainer) {
+					ICProject cproj = celement.getCProject();
+					if (cproj != null) {
+						return cproj.getPath() + CViewMessages.LibraryRefContainer_Libraries;
+					}
 				} else if (celement instanceof IBinaryModule) {
 					IBinary bin = ((IBinaryModule) celement).getBinary();
 					return bin.getPath() + ":" + celement.getElementName(); //$NON-NLS-1$
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java
index 555d85ab0f..17c9b1af36 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java
@@ -38,6 +38,7 @@ import org.eclipse.cdt.core.model.ITypeDef;
 import org.eclipse.cdt.core.model.IVariableDeclaration;
 import org.eclipse.cdt.core.parser.ast.ASTAccessVisibility;
 import org.eclipse.cdt.internal.core.model.CoreModelMessages;
+import org.eclipse.cdt.internal.core.model.ExternalTranslationUnit;
 import org.eclipse.cdt.ui.CUIPlugin;
 import org.eclipse.cdt.ui.PreferenceConstants;
 import org.eclipse.core.resources.IProject;
@@ -886,6 +887,10 @@ public class CElementLabelComposer {
 				fBuffer.append(CElementLabels.CONCAT_STRING);
 				fBuffer.append(path.removeLastSegments(1).toString());
 			} else {
+				if (tu instanceof ExternalTranslationUnit) {
+					fBuffer.append(path.toString());
+					return;
+				}
 				fBuffer.append(path.lastSegment());
 			}
 		}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IncludeFolderDecorator.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IncludeFolderDecorator.java
index 4e0243dda0..b422de3c70 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IncludeFolderDecorator.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/IncludeFolderDecorator.java
@@ -14,7 +14,6 @@
 package org.eclipse.cdt.internal.ui.viewsupport;
 
 import org.eclipse.cdt.core.model.IIncludeReference;
-import org.eclipse.cdt.internal.ui.cview.IncludeReferenceProxy;
 import org.eclipse.cdt.ui.CDTSharedImages;
 import org.eclipse.core.resources.IContainer;
 import org.eclipse.core.resources.ResourcesPlugin;
@@ -35,16 +34,7 @@ public class IncludeFolderDecorator implements ILightweightLabelDecorator {
 	public void decorate(Object element, IDecoration decoration) {
 		boolean isAccesible = true;
 
-		if (element instanceof IncludeReferenceProxy) {
-			IIncludeReference reference = ((IncludeReferenceProxy) element).getReference();
-			IPath path = reference.getPath();
-			IContainer container = ResourcesPlugin.getWorkspace().getRoot().getContainerForLocation(path);
-			if (container != null) {
-				isAccesible = container.isAccessible();
-			} else {
-				isAccesible = path.toFile().exists();
-			}
-		} else if (element instanceof IIncludeReference) {
+		if (element instanceof IIncludeReference) {
 			IPath path = ((IIncludeReference) element).getPath();
 			isAccesible = path.toFile().exists();
 		}
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ChangeBuildConfigContribution.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ChangeBuildConfigContribution.java
index 0f6a572690..cc63ad4f25 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ChangeBuildConfigContribution.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/workingsets/ChangeBuildConfigContribution.java
@@ -27,8 +27,6 @@ import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.settings.model.ICConfigurationDescription;
 import org.eclipse.cdt.core.settings.model.ICProjectDescription;
-import org.eclipse.cdt.internal.ui.cview.IncludeRefContainer;
-import org.eclipse.cdt.internal.ui.cview.IncludeReferenceProxy;
 import org.eclipse.cdt.ui.CUIPlugin;
 import org.eclipse.cdt.ui.actions.ChangeConfigAction;
 import org.eclipse.core.resources.IProject;
@@ -221,17 +219,6 @@ public class ChangeBuildConfigContribution extends CompoundContributionItem {
 							project = cproject.getProject();
 					} else if (selItem instanceof IResource) {
 						project = ((IResource) selItem).getProject();
-					} else if (selItem instanceof IncludeRefContainer) {
-						ICProject fCProject = ((IncludeRefContainer) selItem).getCProject();
-						if (fCProject != null)
-							project = fCProject.getProject();
-					} else if (selItem instanceof IncludeReferenceProxy) {
-						IncludeRefContainer irc = ((IncludeReferenceProxy) selItem).getIncludeRefContainer();
-						if (irc != null) {
-							ICProject fCProject = irc.getCProject();
-							if (fCProject != null)
-								project = fCProject.getProject();
-						}
 					} else if (selItem instanceof IAdaptable) {
 						Object adapter = ((IAdaptable) selItem).getAdapter(IProject.class);
 						if (adapter != null && adapter instanceof IProject) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementContentProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementContentProvider.java
index 6e567e6df8..ee2f78f4c4 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementContentProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementContentProvider.java
@@ -29,6 +29,8 @@ import org.eclipse.cdt.core.model.ICElementDelta;
 import org.eclipse.cdt.core.model.ICModel;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IElementChangedListener;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IParent;
 import org.eclipse.cdt.core.model.ITranslationUnit;
 import org.eclipse.cdt.core.model.IWorkingCopy;
@@ -283,7 +285,7 @@ public class CElementContentProvider extends BaseCElementContentProvider
 		ICProject cproject = null;
 		if (cfile instanceof IBinary) {
 			IBinary bin = (IBinary) cfile;
-			if (bin.showInBinaryContainer()) {
+			if (true) {
 				cproject = bin.getCProject();
 				container = cproject.getBinaryContainer();
 			}
@@ -317,7 +319,9 @@ public class CElementContentProvider extends BaseCElementContentProvider
 
 		@Override
 		public void refresh() {
-			if (container instanceof IBinaryContainer || container instanceof IArchiveContainer) {
+			if (container instanceof IBinaryContainer || container instanceof IArchiveContainer
+					|| container instanceof IIncludeReferenceContainer
+					|| container instanceof ILibraryReferenceContainer) {
 				// Always refresh the project to properly show/hide container
 				fViewer.refresh(project);
 			} else if (container.hasChildren()) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementSorter.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementSorter.java
index 50e0e5a2b9..c4c81cb81c 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementSorter.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/CElementSorter.java
@@ -25,7 +25,9 @@ import org.eclipse.cdt.core.model.IArchiveContainer;
 import org.eclipse.cdt.core.model.IBinaryContainer;
 import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
 import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IMember;
 import org.eclipse.cdt.core.model.IMethodDeclaration;
 import org.eclipse.cdt.core.model.ISourceRoot;
@@ -159,6 +161,10 @@ public class CElementSorter extends ViewerSorter {
 					return BINARYCONTAINER;
 				} else if (element instanceof IArchiveContainer) {
 					return ARCHIVECONTAINER;
+				} else if (element instanceof IIncludeReferenceContainer) {
+					return INCLUDEREFCONTAINER;
+				} else if (element instanceof ILibraryReferenceContainer) {
+					return LIBRARYREFCONTAINER;
 				} else if (element instanceof ILibraryReference) {
 					return LIBRARYREFERENCES;
 				} else if (element instanceof IIncludeReference) {
@@ -238,10 +244,6 @@ public class CElementSorter extends ViewerSorter {
 				return TYPES;
 			case CElementGrouping.NAMESPACE_GROUPING:
 				return NAMESPACES;
-			case CElementGrouping.LIBRARY_REF_CONTAINER:
-				return LIBRARYREFCONTAINER;
-			case CElementGrouping.INCLUDE_REF_CONTAINER:
-				return INCLUDEREFCONTAINER;
 			}
 		}
 		return OTHERS;
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigActionBase.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigActionBase.java
index 3531632508..0843b8b6c6 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigActionBase.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/actions/ChangeBuildConfigActionBase.java
@@ -24,8 +24,6 @@ import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.settings.model.ICConfigurationDescription;
 import org.eclipse.cdt.core.settings.model.ICProjectDescription;
-import org.eclipse.cdt.internal.ui.cview.IncludeRefContainer;
-import org.eclipse.cdt.internal.ui.cview.IncludeReferenceProxy;
 import org.eclipse.cdt.ui.CUIPlugin;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
@@ -212,17 +210,6 @@ public class ChangeBuildConfigActionBase {
 							project = cproject.getProject();
 					} else if (selItem instanceof IResource) {
 						project = ((IResource) selItem).getProject();
-					} else if (selItem instanceof IncludeRefContainer) {
-						ICProject fCProject = ((IncludeRefContainer) selItem).getCProject();
-						if (fCProject != null)
-							project = fCProject.getProject();
-					} else if (selItem instanceof IncludeReferenceProxy) {
-						IncludeRefContainer irc = ((IncludeReferenceProxy) selItem).getIncludeRefContainer();
-						if (irc != null) {
-							ICProject fCProject = irc.getCProject();
-							if (fCProject != null)
-								project = fCProject.getProject();
-						}
 					} else if (selItem instanceof IAdaptable) {
 						Object adapter = ((IAdaptable) selItem).getAdapter(IProject.class);
 						if (adapter != null && adapter instanceof IProject) {
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigSelector.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigSelector.java
index fa50ec6c52..2d9f8b9008 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigSelector.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/ui/newui/ManageConfigSelector.java
@@ -19,8 +19,6 @@ import java.util.ArrayList;
 import org.eclipse.cdt.core.model.CoreModel;
 import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICProject;
-import org.eclipse.cdt.internal.ui.cview.IncludeRefContainer;
-import org.eclipse.cdt.internal.ui.cview.IncludeReferenceProxy;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
@@ -88,17 +86,6 @@ public class ManageConfigSelector {
 				} else if (ob instanceof IResource) { // for other views
 					prj = ((IResource) ob).getProject();
 					/* get project from Include folder elements */
-				} else if (ob instanceof IncludeRefContainer) {
-					ICProject fCProject = ((IncludeRefContainer) ob).getCProject();
-					if (fCProject != null)
-						prj = fCProject.getProject();
-				} else if (ob instanceof IncludeReferenceProxy) {
-					IncludeRefContainer irc = ((IncludeReferenceProxy) ob).getIncludeRefContainer();
-					if (irc != null) {
-						ICProject fCProject = irc.getCProject();
-						if (fCProject != null)
-							prj = fCProject.getProject();
-					}
 				}
 
 				if (prj == null || lst.contains(prj) || !CoreModel.getDefault().isNewStyleProject(prj))
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java
index 7aa49bf3cb..7f510e2eb8 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java
@@ -33,6 +33,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.debug.core.ILaunchConfigurationType;
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
@@ -252,7 +253,14 @@ public abstract class AbstractImportExecutableWizard extends Wizard implements I
 		String defaultBinaryParserId = CCorePlugin.getDefault().getPluginPreferences()
 				.getDefaultString(CCorePlugin.PREF_BINARY_PARSER);
 		if (defaultBinaryParserId == null || defaultBinaryParserId.length() == 0) {
-			defaultBinaryParserId = CCorePlugin.DEFAULT_BINARY_PARSER_UNIQ_ID;
+			if (Platform.getOS().equals(Platform.OS_WIN32)) {
+				// defaultBinaryParserId = "org.eclipse.cdt.core.GNU_PE64"; //$NON-NLS-1$
+				defaultBinaryParserId = "org.eclipse.cdt.core.Cygwin_PE64"; //$NON-NLS-1$
+			} else if (Platform.getOS().equals(Platform.OS_LINUX)) {
+				defaultBinaryParserId = "org.eclipse.cdt.core.GNU_ELF"; //$NON-NLS-1$
+			} else {
+				defaultBinaryParserId = CCorePlugin.DEFAULT_BINARY_PARSER_UNIQ_ID;
+			}
 		}
 		return new String[] { defaultBinaryParserId };
 	}
-- 
2.42.1

