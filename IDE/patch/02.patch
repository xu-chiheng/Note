diff --git a/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/GCCToolChain.java b/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/GCCToolChain.java
index d4f5194f7e..d58a9fac76 100644
--- a/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/GCCToolChain.java
+++ b/build/org.eclipse.cdt.build.gcc.core/src/org/eclipse/cdt/build/gcc/core/GCCToolChain.java
@@ -22,6 +22,7 @@ import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
+import java.util.TreeMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -41,6 +42,7 @@ import org.eclipse.cdt.core.envvar.IEnvironmentVariable;
 import org.eclipse.cdt.core.model.ILanguage;
 import org.eclipse.cdt.core.parser.ExtendedScannerInfo;
 import org.eclipse.cdt.core.parser.IExtendedScannerInfo;
+import org.eclipse.cdt.utils.spawner.ProcessFactory;
 import org.eclipse.core.resources.IBuildConfiguration;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
@@ -471,10 +473,9 @@ public class GCCToolChain extends PlatformObject implements IToolChain {
 		Files.createDirectories(buildDirectory);
 
 		// Startup the command
-		ProcessBuilder processBuilder = new ProcessBuilder(commandLine).directory(buildDirectory.toFile());
-		CCorePlugin.getDefault().getBuildEnvironmentManager().setEnvironment(processBuilder.environment(), buildConfig,
-				true);
-		Process process = processBuilder.start();
+		String[] cmdarray = new String[commandLine.size()];
+		commandLine.toArray(cmdarray);
+		Process process = ProcessFactory.getFactory().exec(cmdarray, null/*envp*/, buildDirectory.toFile());
 
 		// Scan for the scanner info
 		Map<String, String> symbols = new HashMap<>();
@@ -756,21 +757,22 @@ public class GCCToolChain extends PlatformObject implements IToolChain {
 		}
 
 		public GCCInfo(String command, Map<String, String> env) throws IOException {
-			ProcessBuilder builder = new ProcessBuilder(new String[] { command, "-v" }).redirectErrorStream(true); //$NON-NLS-1$
+			String[] cmdarray = new String[] { command, "-v" };
+			TreeMap<String, String> envMap = ProcessFactory.getDefaultEnvMap();
 			if (env != null) {
-				Map<String, String> procEnv = builder.environment();
 				for (Entry<String, String> entry : env.entrySet()) {
 					if ("PATH".equals(entry.getKey())) { //$NON-NLS-1$
 						// prepend the path
-						String path = entry.getValue() + File.pathSeparator + procEnv.get("PATH"); //$NON-NLS-1$
-						procEnv.put("PATH", path); //$NON-NLS-1$
+						String path = entry.getValue() + File.pathSeparator + envMap.get("PATH"); //$NON-NLS-1$
+						envMap.put("PATH", path); //$NON-NLS-1$
 					} else {
 						// replace
-						procEnv.put(entry.getKey(), entry.getValue());
+						envMap.put(entry.getKey(), entry.getValue());
 					}
 				}
 			}
-			Process proc = builder.start();
+			Process proc = ProcessFactory.getFactory().exec2(cmdarray, envMap);
+
 			try (BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()))) {
 				for (String line = reader.readLine(); line != null; line = reader.readLine()) {
 					Matcher versionMatcher = versionPattern.matcher(line);
