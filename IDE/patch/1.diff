git_diff_branch...HEAD  # at /cygdrive/e/Note/IDE/cdt started
no ~commit-message.txt


current branch  : test0013
cat .git/branch : test0000
branch          : test0000


git diff test0000...HEAD
git diff test0000...test0013
git diff $(git merge-base test0000 test0013) test0013


git_diff test0000...HEAD  # at /cygdrive/e/Note/IDE/cdt started
 build/org.eclipse.cdt.managedbuilder.gnu.ui/plugin.xml                                                           | 47 ++++-------------------------------------------
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java                                        |  4 ++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java                       | 22 ++++++++++++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java                       | 22 ++++++++++++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java                                  |  8 ++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java                                | 12 ++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java                            | 18 ++++++++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java               | 78 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java           | 30 ++++++++++++++++++++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java               | 78 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java           | 30 ++++++++++++++++++++++++++++++
 core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java        |  2 ++
 core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties                      |  2 ++
 core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java                                | 10 ++++++++++
 core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java                               | 11 ++++++++++-
 core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java                                  |  9 +++++++++
 core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java                         | 62 ++++++++++++++++++++++++++++++++++++++++----------------------
 core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java                          | 39 ++++++++-------------------------------
 core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java                   |  5 +++++
 debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java | 10 +++++++++-
 llvm/org.eclipse.cdt.managedbuilder.llvm.ui/plugin.xml                                                           | 16 ++++------------
 21 files changed, 405 insertions(+), 110 deletions(-)
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java
 create mode 100644 core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java

diff --git a/build/org.eclipse.cdt.managedbuilder.gnu.ui/plugin.xml b/build/org.eclipse.cdt.managedbuilder.gnu.ui/plugin.xml
index 7dbe4a4610..d1405e9560 100644
--- a/build/org.eclipse.cdt.managedbuilder.gnu.ui/plugin.xml
+++ b/build/org.eclipse.cdt.managedbuilder.gnu.ui/plugin.xml
@@ -258,7 +258,6 @@
 		</tool>
 		<tool
 			natureFilter="both"
-			isAbstract="true"
 			name="%ToolName.archiver.gnu"
 			command="ar"
 			id="cdt.managedbuild.tool.gnu.archiver">
@@ -1329,7 +1328,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.gnu.linker.output.exe"
-				id="cdt.managedbuild.tool.gnu.c.linker.cygwin.output">
+				id="cdt.managedbuild.tool.gnu.c.linker.cygwin.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -1346,7 +1345,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.gnu.linker.output.exe"
-				id="cdt.managedbuild.tool.gnu.cpp.linker.cygwin.output">
+				id="cdt.managedbuild.tool.gnu.cpp.linker.cygwin.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -1363,7 +1362,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.gnu.linker.output.exe"
-				id="cdt.managedbuild.tool.gnu.c.linker.mingw.output">
+				id="cdt.managedbuild.tool.gnu.c.linker.mingw.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -1380,7 +1379,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.gnu.linker.output.exe"
-				id="cdt.managedbuild.tool.gnu.cpp.linker.mingw.output">
+				id="cdt.managedbuild.tool.gnu.cpp.linker.mingw.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -1411,7 +1410,6 @@
 			superClass="cdt.managedbuild.tool.gnu.cpp.compiler">
 		</tool>
 		<builder
-			isAbstract="true"
 			id="cdt.managedbuild.target.gnu.builder"
 			command="make"
 			arguments=""
@@ -1466,54 +1464,18 @@
 			<tool
 				id="cdt.managedbuild.tool.gnu.c.compiler.linux.base"
 				superClass="cdt.managedbuild.tool.gnu.c.compiler">
-				<option
-					category="gnu.compiler.category.other"
-					command="-pthread"
-					defaultValue="false"
-					id="gnu.c.compiler.option.pthread"
-					name="%Option.Pthread"
-					tip="%Option.PthreadCompilerTip"
-					valueType="boolean">
-				</option>
 			</tool>
 			<tool
 				id="cdt.managedbuild.tool.gnu.cpp.compiler.linux.base"
 				superClass="cdt.managedbuild.tool.gnu.cpp.compiler">
-				<option
-					category="gnu.compiler.category.other"
-					command="-pthread"
-					defaultValue="false"
-					id="gnu.cpp.compiler.option.pthread"
-					name="%Option.Pthread"
-					tip="%Option.PthreadCompilerTip"
-					valueType="boolean">
-				</option>
 			</tool>
 			<tool
 				id="cdt.managedbuild.tool.gnu.c.linker.linux.base"
 				superClass="cdt.managedbuild.tool.gnu.c.linker">
-				<option
-					category="gnu.link.category.general"
-					command="-pthread"
-					defaultValue="false"
-					id="gnu.c.link.option.pthread"
-					name="%Option.Pthread"
-					tip="%Option.PthreadLinkerTip"
-					valueType="boolean">
-				</option>
 			</tool>
 			<tool
 				id="cdt.managedbuild.tool.gnu.cpp.linker.linux.base"
 				superClass="cdt.managedbuild.tool.gnu.cpp.linker">
-				<option
-					category="gnu.link.category.general"
-					command="-pthread"
-					defaultValue="false"
-					id="gnu.cpp.link.option.pthread"
-					name="%Option.Pthread"
-					tip="%Option.PthreadLinkerTip"
-					valueType="boolean">
-				</option>
 			</tool>
 		</toolChain>
 		<toolChain
@@ -1579,7 +1541,6 @@
 			</targetPlatform>
 			<builder
 				id="cdt.managedbuild.tool.gnu.builder.mingw.base"
-				isAbstract="false"
 				isVariableCaseSensitive="false"
 				superClass="org.eclipse.cdt.build.core.internal.builder">
 			</builder>
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java
index 2123e8e100..02e15f2e62 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ICProject.java
@@ -55,6 +55,10 @@ public interface ICProject extends IParent, IOpenable, ICElement {
 	 */
 	IBinaryContainer getBinaryContainer() throws CModelException;
 
+	IIncludeReferenceContainer getIncludeReferenceContainer() throws CModelException;
+
+	ILibraryReferenceContainer getLibraryReferenceContainer() throws CModelException;
+
 	/**
 	 * Returns the source root folders of the project.
 	 *
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java
new file mode 100644
index 0000000000..a2321e88cc
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/IIncludeReferenceContainer.java
@@ -0,0 +1,22 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.core.model;
+
+/**
+ * Represents a container of all the IIncludeReference's found in the project
+ * while inspecting the project.
+ *
+ * @noextend This interface is not intended to be extended by clients.
+ * @noimplement This interface is not intended to be implemented by clients.
+ */
+public interface IIncludeReferenceContainer extends ICElement, IParent, IOpenable {
+
+	public IIncludeReference[] getIncludeReferences() throws CModelException;
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java
new file mode 100644
index 0000000000..bd037c9bda
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/core/model/ILibraryReferenceContainer.java
@@ -0,0 +1,22 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.core.model;
+
+/**
+ * Represents a container of all the ILibraryReference's found in the project
+ * while inspecting the project.
+ *
+ * @noextend This interface is not intended to be extended by clients.
+ * @noimplement This interface is not intended to be implemented by clients.
+ */
+public interface ILibraryReferenceContainer extends ICElement, IParent, IOpenable {
+
+	public ILibraryReference[] getLibraryReferences() throws CModelException;
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java
index 4bd564eeca..97db4d8fb1 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/Binary.java
@@ -20,6 +20,7 @@ import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -316,10 +317,17 @@ public class Binary extends Openable implements IBinary {
 		}
 
 		if (sourceFiles != null && sourceFiles.length > 0) {
+			Arrays.sort(sourceFiles);
 			ISourceFinder srcFinder = getAdapter(ISourceFinder.class);
 			try {
 				for (String filename : sourceFiles) {
 
+					//filter out non-existent files
+					IPath path = Path.fromOSString(filename);
+					if (!path.toFile().exists()) {
+						continue;
+					}
+
 					// Find the file locally
 					if (srcFinder != null) {
 						String localPath = srcFinder.toLocalPath(filename);
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java
index 102c888304..0c80521f0a 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProject.java
@@ -41,8 +41,10 @@ import org.eclipse.cdt.core.model.ICModelStatusConstants;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IIncludeEntry;
 import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
 import org.eclipse.cdt.core.model.ILibraryEntry;
 import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IOutputEntry;
 import org.eclipse.cdt.core.model.IPathEntry;
 import org.eclipse.cdt.core.model.ISourceEntry;
@@ -84,6 +86,16 @@ public class CProject extends Openable implements ICProject {
 		return ((CProjectInfo) getElementInfo()).getArchiveContainer();
 	}
 
+	@Override
+	public IIncludeReferenceContainer getIncludeReferenceContainer() throws CModelException {
+		return ((CProjectInfo) getElementInfo()).getIncludeReferenceContainer();
+	}
+
+	@Override
+	public ILibraryReferenceContainer getLibraryReferenceContainer() throws CModelException {
+		return ((CProjectInfo) getElementInfo()).getLibraryReferenceContainer();
+	}
+
 	@Override
 	public IProject getProject() {
 		return getUnderlyingResource().getProject();
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java
index 81e121da42..0a31562b72 100644
--- a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/CProjectInfo.java
@@ -23,7 +23,9 @@ import org.eclipse.cdt.core.model.IArchiveContainer;
 import org.eclipse.cdt.core.model.IBinaryContainer;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
 import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IOutputEntry;
 import org.eclipse.cdt.core.model.ISourceRoot;
 import org.eclipse.core.resources.IContainer;
@@ -39,6 +41,8 @@ class CProjectInfo extends OpenableInfo {
 
 	BinaryContainer vBin;
 	ArchiveContainer vLib;
+	IIncludeReferenceContainer includeReferenceContainer;
+	ILibraryReferenceContainer libraryReferenceContainer;
 	ILibraryReference[] libReferences;
 	IIncludeReference[] incReferences;
 	ISourceRoot[] sourceRoots;
@@ -68,6 +72,20 @@ class CProjectInfo extends OpenableInfo {
 		return vLib;
 	}
 
+	synchronized public IIncludeReferenceContainer getIncludeReferenceContainer() {
+		if (includeReferenceContainer == null) {
+			includeReferenceContainer = new IncludeReferenceContainer((CProject) getElement());
+		}
+		return includeReferenceContainer;
+	}
+
+	synchronized public ILibraryReferenceContainer getLibraryReferenceContainer() {
+		if (libraryReferenceContainer == null) {
+			libraryReferenceContainer = new LibraryReferenceContainer((CProject) getElement());
+		}
+		return libraryReferenceContainer;
+	}
+
 	public Object[] getNonCResources(IResource res) {
 		if (nonCResources != null)
 			return nonCResources;
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java
new file mode 100644
index 0000000000..9ed86bf734
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainer.java
@@ -0,0 +1,78 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.internal.core.model;
+
+import java.util.Map;
+
+import org.eclipse.cdt.core.CCorePlugin;
+import org.eclipse.cdt.core.model.CModelException;
+import org.eclipse.cdt.core.model.ICElement;
+import org.eclipse.cdt.core.model.ICProject;
+import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
+import org.eclipse.cdt.internal.core.util.MementoTokenizer;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.IProgressMonitor;
+
+public class IncludeReferenceContainer extends Openable implements IIncludeReferenceContainer {
+
+	public IncludeReferenceContainer(CProject cProject) {
+		super(cProject, null, CCorePlugin.getResourceString("CoreModel.IncludeReferenceContainer.Includes"), //$NON-NLS-1$
+				ICElement.C_VCONTAINER);
+	}
+
+	@Override
+	public IIncludeReference[] getIncludeReferences() throws CModelException {
+		return ((ICProject) getParent()).getIncludeReferences();
+	}
+
+	@Override
+	public CElementInfo getElementInfo(IProgressMonitor monitor) throws CModelException {
+		CModelManager manager = CModelManager.getDefault();
+		synchronized (manager) {
+			CElementInfo info = (CElementInfo) manager.getInfo(this);
+			if (info != null) {
+				return info;
+			}
+			info = createElementInfo();
+			openWhenClosed(info, monitor);
+			return info;
+		}
+	}
+
+	@Override
+	public CElementInfo createElementInfo() {
+		return new IncludeReferenceContainerInfo(this);
+	}
+
+	@Override
+	protected boolean buildStructure(OpenableInfo info, IProgressMonitor pm, Map<ICElement, CElementInfo> newElements,
+			IResource underlyingResource) throws CModelException {
+		return true;
+	}
+
+	@Override
+	public ICElement getHandleFromMemento(String token, MementoTokenizer memento) {
+		return null;
+	}
+
+	@Override
+	public String getHandleMemento() {
+		return null;
+	}
+
+	@Override
+	protected char getHandleMementoDelimiter() {
+		Assert.isTrue(false, "Should not be called"); //$NON-NLS-1$
+		return 0;
+	}
+
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java
new file mode 100644
index 0000000000..1d8f1fb9e1
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/IncludeReferenceContainerInfo.java
@@ -0,0 +1,30 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+
+package org.eclipse.cdt.internal.core.model;
+
+import org.eclipse.cdt.core.model.ICElement;
+
+/**
+ */
+public class IncludeReferenceContainerInfo extends OpenableInfo {
+
+	/**
+	 * Constructs a new C Model Info
+	 */
+	protected IncludeReferenceContainerInfo(CElement element) {
+		super(element);
+	}
+
+	@Override
+	protected void addChild(ICElement child) {
+		addChildIfAbsent(child);
+	}
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java
new file mode 100644
index 0000000000..8858c607c3
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainer.java
@@ -0,0 +1,78 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+package org.eclipse.cdt.internal.core.model;
+
+import java.util.Map;
+
+import org.eclipse.cdt.core.CCorePlugin;
+import org.eclipse.cdt.core.model.CModelException;
+import org.eclipse.cdt.core.model.ICElement;
+import org.eclipse.cdt.core.model.ICProject;
+import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
+import org.eclipse.cdt.internal.core.util.MementoTokenizer;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.IProgressMonitor;
+
+public class LibraryReferenceContainer extends Openable implements ILibraryReferenceContainer {
+
+	public LibraryReferenceContainer(CProject cProject) {
+		super(cProject, null, CCorePlugin.getResourceString("CoreModel.LibraryReferenceContainer.Libraries"), //$NON-NLS-1$
+				ICElement.C_VCONTAINER);
+	}
+
+	@Override
+	public ILibraryReference[] getLibraryReferences() throws CModelException {
+		return ((ICProject) getParent()).getLibraryReferences();
+	}
+
+	@Override
+	public CElementInfo getElementInfo(IProgressMonitor monitor) throws CModelException {
+		CModelManager manager = CModelManager.getDefault();
+		synchronized (manager) {
+			CElementInfo info = (CElementInfo) manager.getInfo(this);
+			if (info != null) {
+				return info;
+			}
+			info = createElementInfo();
+			openWhenClosed(info, monitor);
+			return info;
+		}
+	}
+
+	@Override
+	public CElementInfo createElementInfo() {
+		return new LibraryReferenceContainerInfo(this);
+	}
+
+	@Override
+	protected boolean buildStructure(OpenableInfo info, IProgressMonitor pm, Map<ICElement, CElementInfo> newElements,
+			IResource underlyingResource) throws CModelException {
+		return true;
+	}
+
+	@Override
+	public ICElement getHandleFromMemento(String token, MementoTokenizer memento) {
+		return null;
+	}
+
+	@Override
+	public String getHandleMemento() {
+		return null;
+	}
+
+	@Override
+	protected char getHandleMementoDelimiter() {
+		Assert.isTrue(false, "Should not be called"); //$NON-NLS-1$
+		return 0;
+	}
+
+}
diff --git a/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java
new file mode 100644
index 0000000000..9eb70bd1e3
--- /dev/null
+++ b/core/org.eclipse.cdt.core/model/org/eclipse/cdt/internal/core/model/LibraryReferenceContainerInfo.java
@@ -0,0 +1,30 @@
+/********************************************************************************
+ * Copyright (c) 2024 徐持恒 Xu Chiheng
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ ********************************************************************************/
+
+package org.eclipse.cdt.internal.core.model;
+
+import org.eclipse.cdt.core.model.ICElement;
+
+/**
+ */
+public class LibraryReferenceContainerInfo extends OpenableInfo {
+
+	/**
+	 * Constructs a new C Model Info
+	 */
+	protected LibraryReferenceContainerInfo(CElement element) {
+		super(element);
+	}
+
+	@Override
+	protected void addChild(ICElement child) {
+		addChildIfAbsent(child);
+	}
+}
diff --git a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java
index 43d41175ea..d88045b6ee 100644
--- a/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java
+++ b/core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/indexer/TranslationUnitCollector.java
@@ -49,6 +49,8 @@ final public class TranslationUnitCollector implements ICElementVisitor {
 			return false;
 		case ICElement.C_CCONTAINER:
 		case ICElement.C_PROJECT:
+		//For imported C/C++ executable
+		case ICElement.C_BINARY:
 			return true;
 		}
 		return false;
diff --git a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties
index 1553b17174..57b60facea 100644
--- a/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties
+++ b/core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/core/CCorePluginResources.properties
@@ -22,6 +22,8 @@ CoreModel.CModelBuilder.Parser_Construction_Failure=Parser/Scanner construction
 CoreModel.CModelBuilder.Parse_Failure=Parse failure
 CoreModel.ArchiveContainer.Archives=Archives
 CoreModel.BinaryContainer.Binaries=Binaries
+CoreModel.IncludeReferenceContainer.Includes=Includes
+CoreModel.LibraryReferenceContainer.Libraries=Libraries
 CoreModel.CModelStatus.Error_in_CPlugin=Error in C Plugin
 CoreModel.NullBinaryParser.Not_binary_file=not a binary file
 CoreModel.NullBinaryParser.Null_Format=Null Format
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
index 56ecb87174..409c8908f6 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/coff/parser/PEParser64.java
@@ -95,6 +95,16 @@ public class PEParser64 extends AbstractCExtension implements IBinaryParser {
 
 	@Override
 	public boolean isBinary(byte[] array, IPath path) {
+		String baseName = path.lastSegment();
+		if (baseName.endsWith(".o") //$NON-NLS-1$
+				|| baseName.endsWith(".obj") //$NON-NLS-1$
+				|| baseName.endsWith(".a") //$NON-NLS-1$
+				|| baseName.endsWith(".lib") //$NON-NLS-1$
+				|| baseName.endsWith(".exe") //$NON-NLS-1$
+				|| baseName.endsWith(".dll") //$NON-NLS-1$
+				) {
+			return true;
+		}
 		boolean isBin = PE64.isExeHeader(array) || AR.isARHeader(array);
 		// It maybe an object file try the known machine types.
 		if (!isBin && array.length > 1) {
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
index 24c4e7c6c0..c4f8a622f6 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/debug/dwarf/DwarfReader.java
@@ -28,8 +28,10 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.TreeSet;
 
 import org.eclipse.cdt.core.CCorePlugin;
+import org.eclipse.cdt.core.Cygwin;
 import org.eclipse.cdt.core.ICompileOptionsFinder;
 import org.eclipse.cdt.core.ISymbolReader;
 import org.eclipse.cdt.utils.coff.Coff64.SectionHeader;
@@ -40,6 +42,7 @@ import org.eclipse.cdt.utils.elf.Elf.Section;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
 
 /**
  * Light-weight parser of Dwarf2 data which is intended for getting only
@@ -54,7 +57,8 @@ public class DwarfReader extends Dwarf implements ISymbolReader, ICompileOptions
 
 	final static String[] DWARF_ALT_SectionsToParse = { DWARF_DEBUG_STR, DWARF_DEBUG_MACRO };
 
-	private final Collection<String> m_fileCollection = new HashSet<>();
+	// use TreeSet instead of HashSet to make the collection sorted by file names
+	private final Collection<String> m_fileCollection = new TreeSet<>();
 	private final Map<Long, String> m_stmtFileMap = new HashMap<>();
 	private final Map<String, ArrayList<String>> m_compileOptionsMap = new HashMap<>();
 	private String[] m_fileNames = null;
@@ -695,6 +699,11 @@ public class DwarfReader extends Dwarf implements ISymbolReader, ICompileOptions
 		// This convert the path to canonical path (but not necessarily absolute, which
 		// is different from java.io.File.getCanonicalPath()).
 		fullName = pa.toString();
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			if (fullName.startsWith("/")) { //$NON-NLS-1$
+				fullName = Cygwin.pathToWindows(fullName);
+			}
+		}
 
 		if (!m_fileCollection.contains(fullName))
 			m_fileCollection.add(fullName);
diff --git a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
index c6c594303e..9e8f7fd6c6 100644
--- a/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
+++ b/core/org.eclipse.cdt.core/utils/org/eclipse/cdt/utils/elf/parser/ElfParser.java
@@ -98,6 +98,15 @@ public class ElfParser extends AbstractCExtension implements IBinaryParser {
 
 	@Override
 	public boolean isBinary(byte[] array, IPath path) {
+		String baseName = path.lastSegment();
+		if (baseName.endsWith(".o") //$NON-NLS-1$
+				|| baseName.endsWith(".obj") //$NON-NLS-1$
+				|| baseName.endsWith(".a") //$NON-NLS-1$
+				|| baseName.endsWith(".lib") //$NON-NLS-1$
+				|| baseName.endsWith(".so") //$NON-NLS-1$
+				) {
+			return true;
+		}
 		return Elf.isElfHeader(array) || AR.isARHeader(array);
 	}
 
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java
index c088f2bfec..3893b15a08 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/BaseCElementContentProvider.java
@@ -37,6 +37,10 @@ import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICModel;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IInclude;
+import org.eclipse.cdt.core.model.IIncludeReference;
+import org.eclipse.cdt.core.model.IIncludeReferenceContainer;
+import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.core.model.IMacro;
 import org.eclipse.cdt.core.model.IMember;
 import org.eclipse.cdt.core.model.INamespace;
@@ -251,6 +255,15 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 	 */
 	@Override
 	public Object[] getChildren(Object element) {
+		if (element instanceof IBinary) {
+			try {
+				return ((IBinary) element).getChildren();
+			} catch (CModelException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+				return NO_CHILDREN;
+			}
+		}
 		if (!exists(element))
 			return NO_CHILDREN;
 
@@ -308,6 +321,9 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 	 */
 	@Override
 	public boolean hasChildren(Object element) {
+		if (element instanceof IBinary) {
+			return true;
+		}
 		if (fProvideMembers) {
 			// assume TUs and binary files are never empty
 			if (element instanceof IBinary || element instanceof ITranslationUnit || element instanceof IArchive) {
@@ -818,17 +834,8 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 	}
 
 	protected IBinary[] getBinaries(IBinaryContainer container) throws CModelException {
-		ICElement[] celements = container.getChildren();
-		ArrayList<IBinary> list = new ArrayList<>(celements.length);
-		for (ICElement celement : celements) {
-			if (celement instanceof IBinary) {
-				IBinary bin = (IBinary) celement;
-				list.add(bin);
-			}
-		}
-		IBinary[] bins = new IBinary[list.size()];
-		list.toArray(bins);
-		return bins;
+		IBinary[] celements = container.getBinaries();
+		return celements;
 	}
 
 	protected IArchive[] getArchives(ICProject cproject) throws CModelException {
@@ -837,17 +844,28 @@ public class BaseCElementContentProvider implements ITreeContentProvider {
 	}
 
 	protected IArchive[] getArchives(IArchiveContainer container) throws CModelException {
-		ICElement[] celements = container.getChildren();
-		ArrayList<IArchive> list = new ArrayList<>(celements.length);
-		for (ICElement celement : celements) {
-			if (celement instanceof IArchive) {
-				IArchive ar = (IArchive) celement;
-				list.add(ar);
-			}
-		}
-		IArchive[] ars = new IArchive[list.size()];
-		list.toArray(ars);
-		return ars;
+		IArchive[] celements = container.getArchives();
+		return celements;
+	}
+
+	protected IIncludeReference[] getIncludeReferences(ICProject cproject) throws CModelException {
+		IIncludeReferenceContainer container = cproject.getIncludeReferenceContainer();
+		return getIncludeReferences(container);
+	}
+
+	protected IIncludeReference[] getIncludeReferences(IIncludeReferenceContainer container) throws CModelException {
+		IIncludeReference[] celements = container.getIncludeReferences();
+		return celements;
+	}
+
+	protected ILibraryReference[] getLibraryReferences(ICProject cproject) throws CModelException {
+		ILibraryReferenceContainer container = cproject.getLibraryReferenceContainer();
+		return getLibraryReferences(container);
+	}
+
+	protected ILibraryReference[] getLibraryReferences(ILibraryReferenceContainer container) throws CModelException {
+		ILibraryReference[] celements = container.getLibraryReferences();
+		return celements;
 	}
 
 	/**
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java
index 0e58a5bf1c..dfd347be43 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/cview/CViewContentProvider.java
@@ -25,6 +25,7 @@ import org.eclipse.cdt.core.model.ICElement;
 import org.eclipse.cdt.core.model.ICProject;
 import org.eclipse.cdt.core.model.IIncludeReference;
 import org.eclipse.cdt.core.model.ILibraryReference;
+import org.eclipse.cdt.core.model.ILibraryReferenceContainer;
 import org.eclipse.cdt.internal.ui.util.RemoteTreeContentManager;
 import org.eclipse.cdt.internal.ui.util.RemoteTreeViewer;
 import org.eclipse.cdt.ui.CElementContentProvider;
@@ -99,6 +100,10 @@ public class CViewContentProvider extends CElementContentProvider {
 				extras = getExecutables((IBinaryContainer) element);
 			} else if (element instanceof IArchiveContainer) {
 				extras = getArchives((IArchiveContainer) element);
+			} else if (element instanceof ILibraryReferenceContainer) {
+				// extras = getArchives((ILibraryReferenceContainer) element);
+			} else if (element instanceof ILibraryReferenceContainer) {
+				// extras = getArchives((ILibraryReferenceContainer) element);
 			} else if (element instanceof IIncludeReference) {
 				extras = getIncludeReferenceChildren((IIncludeReference) element);
 			}
@@ -130,41 +135,13 @@ public class CViewContentProvider extends CElementContentProvider {
 	}
 
 	private Object[] getProjectChildren(ICProject cproject) throws CModelException {
-		Object[] extras = null;
 		IArchiveContainer archive = cproject.getArchiveContainer();
-		if (getArchives(archive).length > 0) {
-			extras = new Object[] { archive };
-		}
 		IBinaryContainer bin = cproject.getBinaryContainer();
-		if (getExecutables(bin).length > 0) {
-			Object[] o = new Object[] { bin };
-			if (extras != null && extras.length > 0) {
-				extras = concatenate(extras, o);
-			} else {
-				extras = o;
-			}
-		}
 		LibraryRefContainer libRefCont = new LibraryRefContainer(cproject);
-		Object[] libRefs = libRefCont.getChildren(cproject);
-		if (libRefs != null && libRefs.length > 0) {
-			Object[] o = new Object[] { libRefCont };
-			if (extras != null && extras.length > 0) {
-				extras = concatenate(extras, o);
-			} else {
-				extras = o;
-			}
-		}
-
 		IncludeRefContainer incRefCont = new IncludeRefContainer(cproject);
-		Object[] incRefs = incRefCont.getChildren(cproject);
-		if (incRefs != null && incRefs.length > 0) {
-			Object[] o = new Object[] { incRefCont };
-			if (extras != null && extras.length > 0) {
-				extras = concatenate(extras, o);
-			} else {
-				extras = o;
-			}
-		}
+		// ILibraryReferenceContainer libRefCont = cproject.getLibraryReferenceContainer();
+		// IIncludeReferenceContainer incRefCont = cproject.getIncludeReferenceContainer();
+		Object[] extras = new Object[] { archive, bin, libRefCont, incRefCont };
 		return extras;
 	}
 
diff --git a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java
index 555d85ab0f..17c9b1af36 100644
--- a/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java
+++ b/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/viewsupport/CElementLabelComposer.java
@@ -38,6 +38,7 @@ import org.eclipse.cdt.core.model.ITypeDef;
 import org.eclipse.cdt.core.model.IVariableDeclaration;
 import org.eclipse.cdt.core.parser.ast.ASTAccessVisibility;
 import org.eclipse.cdt.internal.core.model.CoreModelMessages;
+import org.eclipse.cdt.internal.core.model.ExternalTranslationUnit;
 import org.eclipse.cdt.ui.CUIPlugin;
 import org.eclipse.cdt.ui.PreferenceConstants;
 import org.eclipse.core.resources.IProject;
@@ -886,6 +887,10 @@ public class CElementLabelComposer {
 				fBuffer.append(CElementLabels.CONCAT_STRING);
 				fBuffer.append(path.removeLastSegments(1).toString());
 			} else {
+				if (tu instanceof ExternalTranslationUnit) {
+					fBuffer.append(path.toString());
+					return;
+				}
 				fBuffer.append(path.lastSegment());
 			}
 		}
diff --git a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java
index 7aa49bf3cb..7f510e2eb8 100644
--- a/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java
+++ b/debug/org.eclipse.cdt.debug.ui/src/org/eclipse/cdt/debug/ui/importexecutable/AbstractImportExecutableWizard.java
@@ -33,6 +33,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.debug.core.ILaunchConfigurationType;
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
@@ -252,7 +253,14 @@ public abstract class AbstractImportExecutableWizard extends Wizard implements I
 		String defaultBinaryParserId = CCorePlugin.getDefault().getPluginPreferences()
 				.getDefaultString(CCorePlugin.PREF_BINARY_PARSER);
 		if (defaultBinaryParserId == null || defaultBinaryParserId.length() == 0) {
-			defaultBinaryParserId = CCorePlugin.DEFAULT_BINARY_PARSER_UNIQ_ID;
+			if (Platform.getOS().equals(Platform.OS_WIN32)) {
+				// defaultBinaryParserId = "org.eclipse.cdt.core.GNU_PE64"; //$NON-NLS-1$
+				defaultBinaryParserId = "org.eclipse.cdt.core.Cygwin_PE64"; //$NON-NLS-1$
+			} else if (Platform.getOS().equals(Platform.OS_LINUX)) {
+				defaultBinaryParserId = "org.eclipse.cdt.core.GNU_ELF"; //$NON-NLS-1$
+			} else {
+				defaultBinaryParserId = CCorePlugin.DEFAULT_BINARY_PARSER_UNIQ_ID;
+			}
 		}
 		return new String[] { defaultBinaryParserId };
 	}
diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/plugin.xml b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/plugin.xml
index 727e400485..d9439df015 100644
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/plugin.xml
+++ b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/plugin.xml
@@ -154,7 +154,6 @@
 				command="-native"
 				defaultValue="false"
 				id="llvm.link.option.native"
-				isAbstract="false"
 				name="%Option.Posix.Linker.native"
 				resourceFilter="all"
 				tip="%option.tip.6"
@@ -165,7 +164,6 @@
 				command="-native-cbe"
 				defaultValue="false"
 				id="llvm.link.option.nativeCBackEnd"
-				isAbstract="false"
 				name="%Option.Posix.Linker.nativeCBackend"
 				resourceFilter="all"
 				tip="%option.tip.7"
@@ -260,7 +258,6 @@
 		<tool
 			command="llvm-ar"
 			id="cdt.managedbuild.tool.llvm.archiver"
-			isAbstract="true"
 			name="%ToolName.archiver.llvm"
 			natureFilter="both">
 			<supportedProperties>
@@ -298,7 +295,6 @@
 				category="llvm.lib.category.options"
 				command="d"
 				id="llvm.lib.option.delete"
-				isAbstract="false"
 				name="%Option.Posix.Archiver.delete"
 				resourceFilter="all"
 				tip="%option.tip.9"
@@ -308,7 +304,6 @@
 				category="llvm.lib.category.options"
 				command="t"
 				id="llvm.lib.option.print.contents"
-				isAbstract="false"
 				name="%Option.Posix.Archiver.print.contents"
 				resourceFilter="all"
 				valueType="boolean">
@@ -340,7 +335,6 @@
 			command="llvm-as"
 			errorParsers="org.eclipse.cdt.core.GASErrorParser"
 			id="cdt.managedbuild.tool.llvm.assembler"
-			isAbstract="true"
 			name="%ToolName.assembler.llvm"
 			natureFilter="both"
 			outputFlag="-o">
@@ -385,7 +379,6 @@
 		<tool
 			errorParsers="org.eclipse.cdt.core.GCCErrorParser"
 			id="cdt.managedbuild.tool.llvm.compiler"
-			isAbstract="true"
 			name="%ToolName.compiler.llvm"
 			outputFlag="-o">
 			<supportedProperties>
@@ -815,7 +808,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.llvm.linker.output.exe"
-				id="cdt.managedbuild.tool.llvm.c.linker.cygwin.output">
+				id="cdt.managedbuild.tool.llvm.c.linker.cygwin.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -832,7 +825,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.llvm.linker.output.exe"
-				id="cdt.managedbuild.tool.llvm.cpp.linker.cygwin.output">
+				id="cdt.managedbuild.tool.llvm.cpp.linker.cygwin.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -849,7 +842,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.llvm.linker.output.exe"
-				id="cdt.managedbuild.tool.llvm.c.linker.mingw.output">
+				id="cdt.managedbuild.tool.llvm.c.linker.mingw.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -866,7 +859,7 @@
 			<outputType
 				outputs="exe"
 				superClass="cdt.managedbuild.tool.llvm.linker.output.exe"
-				id="cdt.managedbuild.tool.llvm.cpp.linker.mingw.output">
+				id="cdt.managedbuild.tool.llvm.cpp.linker.mingw.output.exe">
 			</outputType>
 			<outputType
 				outputs="dll,dll.a"
@@ -885,7 +878,6 @@
 				archList="all"
 				binaryParser="org.eclipse.cdt.core.ELF"
 				id="cdt.managedbuild.target.llvm.platform.linux.base"
-				isAbstract="true"
 				name="%PlatformName.Dbg"
 				osList="linux,hpux,aix,qnx">
 			</targetPlatform>

real	0m0.501s
user	0m0.015s
sys	0m0.171s
git_diff test0000...HEAD  # at /cygdrive/e/Note/IDE/cdt finished

real	0m0.861s
user	0m0.045s
sys	0m0.246s
git_diff_branch...HEAD  # at /cygdrive/e/Note/IDE/cdt finished
