diff --git a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java
index 66e67582be..e0249f5fc6 100644
--- a/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java
+++ b/build/org.eclipse.cdt.autotools.ui.tests/src/org/eclipse/cdt/autotools/ui/tests/TestToolActions.java
@@ -60,7 +60,7 @@ public class TestToolActions extends AbstractTest {
 		IPath path = checkProject().getLocation();
 		// Verify configure does not exist initially
 		path = path.append("aclocal.m4");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -77,7 +77,7 @@ public class TestToolActions extends AbstractTest {
 				Pattern.DOTALL);
 		bot.waitUntil(consoleTextMatches(consoleView, p));
 		// Verify we still don't have an aclocal.m4 file yet
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertFalse(f.exists());
 		// Now lets run aclocal for our hello world project which hasn't had any
 		// autotool files generated yet.
@@ -93,7 +93,7 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
+			f = new File(path.toString());
 			if (f.exists()) {
 				break;
 			}
@@ -108,7 +108,7 @@ public class TestToolActions extends AbstractTest {
 		IPath path = checkProject().getLocation();
 		// Verify configure does not exist initially
 		path = path.append("configure");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -122,13 +122,13 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
+			f = new File(path.toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		// Verify we now have a configure script
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
 		// Now lets delete the configure file and run autoconf from the project
 		// explorer menu directly from the configure.ac file.
@@ -144,13 +144,13 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
+			f = new File(path.toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		// Verify we now have a configure script again
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
 
 		exitProjectFolder();
@@ -163,11 +163,11 @@ public class TestToolActions extends AbstractTest {
 		// Verify configure does not exist initially
 		IPath path2 = path.append("src/Makefile.in");
 		path = path.append("Makefile.in");
-		File f = new File(path.toOSString());
+		File f = new File(path.toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		File f2 = new File(path2.toOSString());
+		File f2 = new File(path2.toString());
 		if (f2.exists()) {
 			f2.delete();
 		}
@@ -183,9 +183,9 @@ public class TestToolActions extends AbstractTest {
 				Pattern.DOTALL);
 		bot.waitUntil(consoleTextMatches(consoleView, p));
 		// Verify we still don't have Makefile.in files yet
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(!f.exists());
-		f2 = new File(path2.toOSString());
+		f2 = new File(path2.toString());
 		assertTrue(!f2.exists());
 		// Now lets run automake for our hello world project which hasn't had
 		// any
@@ -207,17 +207,17 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 20 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.toOSString());
-			f2 = new File(path2.toOSString());
+			f = new File(path.toString());
+			f2 = new File(path2.toString());
 			if (f.exists() && f2.exists()) {
 				break;
 			}
 		}
 		assertTrue(f.exists() && f2.exists());
 		// Verify we now have Makefile.in files created
-		f = new File(path.toOSString());
+		f = new File(path.toString());
 		assertTrue(f.exists());
-		f2 = new File(path2.toOSString());
+		f2 = new File(path2.toString());
 		assertTrue(f2.exists());
 	}
 
@@ -260,23 +260,23 @@ public class TestToolActions extends AbstractTest {
 	public void t7canAccessAutoreconf() throws Exception {
 		IPath path = checkProject().getLocation();
 		// Remove a number of generated files
-		File f = new File(path.append("src/Makefile.in").toOSString());
+		File f = new File(path.append("src/Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("Makefile.in").toOSString());
+		f = new File(path.append("Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("configure").toOSString());
+		f = new File(path.append("configure").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.sub").toOSString());
+		f = new File(path.append("config.sub").toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -304,12 +304,12 @@ public class TestToolActions extends AbstractTest {
 		// Verify a number of generated files now exist
 		String[] fileList = { "Makefile.in", "src/Makefile.in", "configure", "config.sub" };
 		for (String name : fileList) {
-			f = new File(path.append(name).toOSString());
+			f = new File(path.append(name).toString());
 			assertTrue("Missing: " + name, f.exists());
 		}
 
 		String name = "config.status";
-		f = new File(path.append(name).toOSString());
+		f = new File(path.append(name).toString());
 		assertTrue("Mistakenly found: " + name, !f.exists()); // shouldn't have run configure
 	}
 
@@ -317,23 +317,23 @@ public class TestToolActions extends AbstractTest {
 	public void t8canReconfigureProject() {
 		IPath path = checkProject().getLocation();
 		// Remove a number of generated files
-		File f = new File(path.append("src/Makefile.in").toOSString());
+		File f = new File(path.append("src/Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("Makefile.in").toOSString());
+		f = new File(path.append("Makefile.in").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("configure").toOSString());
+		f = new File(path.append("configure").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		if (f.exists()) {
 			f.delete();
 		}
-		f = new File(path.append("config.sub").toOSString());
+		f = new File(path.append("config.sub").toString());
 		if (f.exists()) {
 			f.delete();
 		}
@@ -342,22 +342,22 @@ public class TestToolActions extends AbstractTest {
 		// sleep a bit and look for it...give up after 40 seconds
 		for (int i = 0; i < 40; ++i) {
 			bot.sleep(500);
-			f = new File(path.append("config.status").toOSString());
+			f = new File(path.append("config.status").toString());
 			if (f.exists()) {
 				break;
 			}
 		}
 		assertTrue(f.exists());
 		// Verify a number of generated files now exist
-		f = new File(path.append("src/Makefile.in").toOSString());
+		f = new File(path.append("src/Makefile.in").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("Makefile.in").toOSString());
+		f = new File(path.append("Makefile.in").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("configure").toOSString());
+		f = new File(path.append("configure").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("config.status").toOSString());
+		f = new File(path.append("config.status").toString());
 		assertTrue(f.exists());
-		f = new File(path.append("config.sub").toOSString());
+		f = new File(path.append("config.sub").toString());
 		assertTrue(f.exists());
 	}
 
