diff --git a/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/ProcessFactory.java b/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/ProcessFactory.java
index addd040267..c14773e16c 100644
--- a/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/ProcessFactory.java
+++ b/core/org.eclipse.cdt.core.native/src/org/eclipse/cdt/utils/spawner/ProcessFactory.java
@@ -52,55 +52,72 @@ public class ProcessFactory {
 		return cmdarray;
 	}
 
-	private static TreeMap<String, String> newEmptyEnvironment() {
-		TreeMap<String, String> environment;
+	private static TreeMap<String, String> newEmptyEnvMap() {
+		TreeMap<String, String> envMap;
 		if (Platform.getOS().equals(Platform.OS_WIN32)) {
-			environment = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+			envMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
 		} else {
-			environment = new TreeMap<>();
+			envMap = new TreeMap<>();
 		}
-		return environment;
+		return envMap;
 	}
 
-	private static TreeMap<String, String> getDefaultEnvironment() {
-		TreeMap<String, String> environment = newEmptyEnvironment();
+	public static TreeMap<String, String> getDefaultEnvMap() {
+		TreeMap<String, String> envMap = newEmptyEnvMap();
 		Map<String, String> env = new ProcessBuilder().environment();
-		environment.putAll(env);
-		return environment;
+		envMap.putAll(env);
+		return envMap;
 	}
 
 	private static TreeMap<String, String> envpToEnvMap(String[] envp) {
-		TreeMap<String, String> environment;
-		if (envp != null) {
-			environment = newEmptyEnvironment();
-			for (String envstring : envp) {
-				int eqlsign = envstring.indexOf('=');
-				if (eqlsign != -1) {
-					environment.put(envstring.substring(0, eqlsign), envstring.substring(eqlsign + 1));
-				} else {
-					// Silently ignore envstrings lacking the required `='.
-				}
+		if (envp == null) {
+			return getDefaultEnvMap();
+		}
+		TreeMap<String, String> envMap = newEmptyEnvMap();
+		for (String envstring : envp) {
+			int eqlsign = envstring.indexOf('=');
+			if (eqlsign != -1) {
+				String key = envstring.substring(0, eqlsign);
+				String value = envstring.substring(eqlsign + 1);
+				envMap.put(key, value);
+			} else {
+				// Silently ignore envstrings lacking the required `='.
 			}
-		} else {
-			environment = getDefaultEnvironment();
 		}
-		return environment;
+		return envMap;
 	}
 
-	private static void appendEnvMapComparison(StringBuilder sb, TreeMap<String, String> environmentA,
-			TreeMap<String, String> environmentB) {
-		TreeMap<String, String> environmentC = newEmptyEnvironment();
-		environmentC.putAll(environmentA);
-		environmentC.putAll(environmentB);
-		Iterator<Entry<String, String>> iterator = environmentC.entrySet().iterator();
+	private static String[] envMapToEnvp(TreeMap<String, String> envMap) {
+		if (envMap == null) {
+			envMap = getDefaultEnvMap();
+		}
+		String[] envp = new String[envMap.size()];
+		int index = 0;
+		Iterator<Entry<String, String>> iterator = envMap.entrySet().iterator();
+		while (iterator.hasNext()) {
+			Map.Entry<String, String> entry = iterator.next();
+			String key = entry.getKey();
+			String value = entry.getValue();
+			envp[index++] = key + "=" + value;
+		}
+
+		return envp;
+	}
+
+	private static void appendEnvMapComparison(StringBuilder sb, TreeMap<String, String> envMapA,
+			TreeMap<String, String> envMapB) {
+		TreeMap<String, String> envMapC = newEmptyEnvMap();
+		envMapC.putAll(envMapA);
+		envMapC.putAll(envMapB);
+		Iterator<Entry<String, String>> iterator = envMapC.entrySet().iterator();
 		while (iterator.hasNext()) {
 			Map.Entry<String, String> entry = iterator.next();
 			String key = entry.getKey();
 			String valueA, valueB;
-			if (environmentA.containsKey(key)) {
-				valueA = environmentA.get(key);
-				if (environmentB.containsKey(key)) {
-					valueB = environmentB.get(key);
+			if (envMapA.containsKey(key)) {
+				valueA = envMapA.get(key);
+				if (envMapB.containsKey(key)) {
+					valueB = envMapB.get(key);
 					int result = valueA.compareTo(valueB);
 					if (result == 0) {
 						// not changed
@@ -131,8 +148,8 @@ public class ProcessFactory {
 					sb.append('\n');
 				}
 			} else {
-				// environmentB contains the key
-				valueB = environmentB.get(key);
+				// envMapB contains the key
+				valueB = envMapB.get(key);
 				// added
 				sb.append('+');
 				sb.append(key);
@@ -176,6 +193,11 @@ public class ProcessFactory {
 			return this;
 		}
 
+		public Builder environment(TreeMap<String, String> envMap) {
+			this.envp = envMapToEnvp(envMap);
+			return this;
+		}
+
 		public Builder directory(File directory) {
 			this.dir = directory;
 			return this;
@@ -232,11 +254,11 @@ public class ProcessFactory {
 			sb.append("\n\n"); //$NON-NLS-1$
 
 			{
-				TreeMap<String, String> environmentA = getDefaultEnvironment();
-				TreeMap<String, String> environmentB = envpToEnvMap(envp);
+				TreeMap<String, String> envMapA = getDefaultEnvMap();
+				TreeMap<String, String> envMapB = envpToEnvMap(envp);
 
 				sb.append("environment :\n"); //$NON-NLS-1$
-				appendEnvMapComparison(sb, environmentA, environmentB);
+				appendEnvMapComparison(sb, envMapA, envMapB);
 				sb.append("\n\n"); //$NON-NLS-1$
 			}
 			if (use_pty) {
@@ -257,7 +279,7 @@ public class ProcessFactory {
 		public Process start() throws IOException {
 			// Uncomment the next line, set a breakpoint in the last line of debug() method,
 			// when the breakpoint is triggered, inspect the sb variable to see detailed info on what is being launched.
-			// debug();
+			debug();
 			Process p;
 			if (hasSpawner) {
 				if (use_pty) {
@@ -362,7 +384,7 @@ public class ProcessFactory {
 		return p;
 	}
 
-	public Process exec(String cmdarray[], String[] envp, File dir) throws IOException {
+	public Process exec(String[] cmdarray, String[] envp, File dir) throws IOException {
 		Process p = new Builder(cmdarray).environment(envp).directory(dir).start();
 		return p;
 	}
@@ -370,13 +392,13 @@ public class ProcessFactory {
 	/**
 	 * @since 6.2
 	 */
-	public Process exec(String cmdarray[], String[] envp, File dir, int gracefulExitTimeMs) throws IOException {
+	public Process exec(String[] cmdarray, String[] envp, File dir, int gracefulExitTimeMs) throws IOException {
 		Process p = new Builder(cmdarray).environment(envp).directory(dir).gracefulExitTimeMs(gracefulExitTimeMs)
 				.start();
 		return p;
 	}
 
-	public Process exec(String cmdarray[], String[] envp, File dir, PTY pty) throws IOException {
+	public Process exec(String[] cmdarray, String[] envp, File dir, PTY pty) throws IOException {
 		Process p = new Builder(cmdarray).environment(envp).directory(dir).pty(pty).start();
 		return p;
 	}
@@ -384,10 +406,48 @@ public class ProcessFactory {
 	/**
 	 * @since 6.2
 	 */
-	public Process exec(String cmdarray[], String[] envp, File dir, PTY pty, int gracefulExitTimeMs)
+	public Process exec(String[] cmdarray, String[] envp, File dir, PTY pty, int gracefulExitTimeMs)
 			throws IOException {
 		Process p = new Builder(cmdarray).environment(envp).directory(dir).pty(pty)
 				.gracefulExitTimeMs(gracefulExitTimeMs).start();
 		return p;
 	}
+
+	/**
+	 * newly added at 2024-04-04 by 徐持恒 Xu Chiheng
+	 */
+
+	public Process exec2(String[] cmdarray, TreeMap<String, String> envMap) throws IOException {
+		Process p = new Builder(cmdarray).environment(envMap).start();
+		return p;
+	}
+
+	public Process exec2(String[] cmdarray, TreeMap<String, String> envMap, int gracefulExitTimeMs) throws IOException {
+		Process p = new Builder(cmdarray).environment(envMap).gracefulExitTimeMs(gracefulExitTimeMs).start();
+		return p;
+	}
+
+	public Process exec2(String[] cmdarray, TreeMap<String, String> envMap, File dir) throws IOException {
+		Process p = new Builder(cmdarray).environment(envMap).directory(dir).start();
+		return p;
+	}
+
+	public Process exec2(String[] cmdarray, TreeMap<String, String> envMap, File dir, int gracefulExitTimeMs)
+			throws IOException {
+		Process p = new Builder(cmdarray).environment(envMap).directory(dir).gracefulExitTimeMs(gracefulExitTimeMs)
+				.start();
+		return p;
+	}
+
+	public Process exec2(String[] cmdarray, TreeMap<String, String> envMap, File dir, PTY pty) throws IOException {
+		Process p = new Builder(cmdarray).environment(envMap).directory(dir).pty(pty).start();
+		return p;
+	}
+
+	public Process exec2(String[] cmdarray, TreeMap<String, String> envMap, File dir, PTY pty, int gracefulExitTimeMs)
+			throws IOException {
+		Process p = new Builder(cmdarray).environment(envMap).directory(dir).pty(pty)
+				.gracefulExitTimeMs(gracefulExitTimeMs).start();
+		return p;
+	}
 }
