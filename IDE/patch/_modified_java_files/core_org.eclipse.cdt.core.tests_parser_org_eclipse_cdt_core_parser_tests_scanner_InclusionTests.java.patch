diff --git a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java
index 882a9b8907..a4f010e1ce 100644
--- a/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java
+++ b/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/InclusionTests.java
@@ -129,9 +129,9 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("one/three/bar/foo.h", i3Next); //$NON-NLS-1$
 
 		String[] path = new String[3];
-		path[0] = one.getLocation().toOSString();
-		path[1] = oneTwo.getLocation().toOSString();
-		path[2] = oneThree.getLocation().toOSString();
+		path[0] = one.getLocation().toString();
+		path[1] = oneTwo.getLocation().toString();
+		path[2] = oneThree.getLocation().toString();
 
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
@@ -170,8 +170,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("two/foo.h", foo2); //$NON-NLS-1$
 
 		String[] path = new String[2];
-		path[0] = one.getLocation().toOSString();
-		path[1] = two.getLocation().toOSString();
+		path[0] = one.getLocation().toString();
+		path[1] = two.getLocation().toString();
 
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
@@ -208,8 +208,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("three/foo.h", i3Next); //$NON-NLS-1$
 
 		String[] path = new String[2];
-		path[0] = twof.getLocation().toOSString();
-		path[1] = threef.getLocation().toOSString();
+		path[0] = twof.getLocation().toString();
+		path[1] = threef.getLocation().toString();
 
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
@@ -220,8 +220,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		validateToken(IToken.tSEMI);
 		validateEOF();
 
-		path[0] = threef.getLocation().toOSString();
-		path[1] = twof.getLocation().toOSString();
+		path[0] = threef.getLocation().toString();
+		path[1] = twof.getLocation().toString();
 
 		scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP, path, new String[] {}, null);
 		initializeScanner(reader, ParserLanguage.C, ParserMode.COMPLETE_PARSE, scannerInfo);
@@ -235,7 +235,7 @@ public class InclusionTests extends PreprocessorTestsBase {
 	public void testBug91086() throws Exception {
 		IFile inclusion = importFile("file.h", "#define FOUND 666\n"); //$NON-NLS-1$ //$NON-NLS-2$
 		StringBuilder buffer = new StringBuilder("#include \""); //$NON-NLS-1$
-		buffer.append(inclusion.getLocation().toOSString());
+		buffer.append(inclusion.getLocation().toString());
 		buffer.append("\"\n"); //$NON-NLS-1$
 		buffer.append("int var = FOUND;\n"); //$NON-NLS-1$
 		IFile base = importFile("base.cpp", buffer.toString()); //$NON-NLS-1$
@@ -316,7 +316,7 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("test.h", "");
 		IFile base = importFile("test.cpp", getAboveComment());
 		IScannerInfo scannerInfo = new ExtendedScannerInfo(Collections.EMPTY_MAP,
-				new String[] { fProject.getProject().getLocation().toOSString() }, new String[] {}, null);
+				new String[] { fProject.getProject().getLocation().toString() }, new String[] {}, null);
 		FileContent reader = FileContent.create(base);
 		initializeScanner(reader, ParserLanguage.CPP, ParserMode.COMPLETE_PARSE, scannerInfo);
 		validateIdentifier("identifier");
@@ -365,8 +365,8 @@ public class InclusionTests extends PreprocessorTestsBase {
 		importFile("two/foo.h", foo2); //$NON-NLS-1$
 
 		String[] path = new String[2];
-		path[0] = one.getLocation().toOSString();
-		path[1] = two.getLocation().toOSString();
+		path[0] = one.getLocation().toString();
+		path[1] = two.getLocation().toString();
 
 		Map<String, String> definedSymbols = new HashMap<>();
 		definedSymbols.put("__GNUC__", "5");
