diff --git a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java
index a9f356df49..e2182feda2 100644
--- a/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java
+++ b/llvm/org.eclipse.cdt.managedbuilder.llvm.ui/src/org/eclipse/cdt/managedbuilder/llvm/util/FindStdLibPath.java
@@ -14,9 +14,12 @@
  *******************************************************************************/
 package org.eclipse.cdt.managedbuilder.llvm.util;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import org.eclipse.cdt.utils.spawner.ProcessFactory;
 
 /**
  * The purpose is to find a path where stdc++ library is located.
@@ -37,19 +40,27 @@ public class FindStdLibPath {
 	 * @return Stdc++ library path.
 	 */
 	public static String find() {
-		ProcessBuilder pb = null;
+		List<String> commandLine = new ArrayList<>();
 		String os = System.getProperty("os.name").toLowerCase(); //$NON-NLS-1$
 		if (os.indexOf("win") >= 0) { //$NON-NLS-1$
-			pb = new ProcessBuilder("cmd", "/c", WIN_SCRIPT + " " + STD_LIB); //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$
+			commandLine.add("cmd"); //$NON-NLS-1$
+			commandLine.add("/c"); //$NON-NLS-1$
+			commandLine.add(WIN_SCRIPT + " " + STD_LIB);
 		} else if (os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0) { //$NON-NLS-1$ //$NON-NLS-2$
-			pb = new ProcessBuilder("bash", "-c", UNIX_SCRIPT); //$NON-NLS-1$//$NON-NLS-2$
+			commandLine.add("bash"); //$NON-NLS-1$
+			commandLine.add("-c"); //$NON-NLS-1$
+			commandLine.add(UNIX_SCRIPT);
 		} else if (os.indexOf("mac") >= 0) { //$NON-NLS-1$
-			pb = new ProcessBuilder("bash", "-c", MAC_SCRIPT); //$NON-NLS-1$//$NON-NLS-2$
+			commandLine.add("bash"); //$NON-NLS-1$
+			commandLine.add("-c"); //$NON-NLS-1$
+			commandLine.add(MAC_SCRIPT);
 		} else {
 			return null;
 		}
 		try {
-			Process p = pb.start();
+			String[] cmdarray = new String[commandLine.size()];
+			commandLine.toArray(cmdarray);
+			Process p = ProcessFactory.getFactory().exec(cmdarray, null/*envp*/);
 			String line;
 			BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
 			line = input.readLine();
