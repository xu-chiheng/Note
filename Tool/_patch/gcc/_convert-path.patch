diff --git a/include/libiberty.h b/include/libiberty.h
index 32385911690..86fd016e278 100644
--- a/include/libiberty.h
+++ b/include/libiberty.h
@@ -137,6 +137,10 @@ extern const char *unix_lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRI
 
 extern char *lrealpath (const char *);
 
+extern size_t convert_path(char * path, size_t len);
+
+extern size_t convert_paths(char * paths, size_t len, char path_separator);
+
 /* Return true when FD file descriptor exists.  */
 
 extern int is_valid_fd (int fd);
diff --git a/libiberty/xstrdup.c b/libiberty/xstrdup.c
index fa12c96a3cd..60127db6089 100644
--- a/libiberty/xstrdup.c
+++ b/libiberty/xstrdup.c
@@ -34,3 +34,350 @@ xstrdup (const char *s)
   register char *ret = XNEWVEC (char, len);
   return (char *) memcpy (ret, s, len);
 }
+
+#include <stdbool.h>
+
+// convert \ to /
+static
+size_t convert_path_0(char * path, size_t len)
+{
+	bool host_is_windows = false;
+#if defined(_WIN32) || defined(__CYGWIN__)
+	host_is_windows = true;
+#endif
+	if (host_is_windows) {
+		size_t i = 0;
+		while (i < len) {
+			if (path[i] == '\\') {
+				path[i] = '/';
+			}
+			i++;
+		}
+	}
+	path[len] = 0;
+	return len;
+}
+
+// convert c:/ to C:/
+static
+size_t convert_path_1(char * path, size_t len)
+{
+	bool host_is_windows = false;
+#if defined(_WIN32) || defined(__CYGWIN__)
+	host_is_windows = true;
+#endif
+	if (host_is_windows) {
+		size_t i = 0;
+		if (i + 1 < len
+			&& (path[i] >= 'a' && path[i] <= 'z')
+			&& path[i + 1] == ':') {
+			// i + 2 <= len
+			if (i + 2 < len) {
+				if (path[i + 2] == '/') {
+label1:
+					path[i] = path[i] - 'a' + 'A';
+					goto label2;
+				} else {
+					// error
+					goto label2;
+				}
+			} else {
+				// i + 2 == len
+				goto label1;	
+			}
+		}
+label2:
+	}
+	path[len] = 0;
+	return len;
+}
+
+// convert //+ to /
+static
+size_t convert_path_2(char * path, size_t len)
+{
+	size_t i = 0;
+	size_t j = 0;
+	while (i < len) {
+		path[j++] = path[i];
+		if (path[i] == '/') {
+			i++;
+			while (i < len && path[i] == '/') {
+				i++;
+			}
+		} else {
+			i++;
+		}
+	}
+	bool host_is_windows = false;
+#if defined(_WIN32) || defined(__CYGWIN__)
+	host_is_windows = true;
+#endif
+	if (host_is_windows) {
+		if (j == 3
+			&& (path[j - 3] >= 'A' && path[j - 3] <= 'Z')
+			&& path[j - 2] == ':' && path[j - 1] == '/') {
+			// device root C:/
+			goto label_return;
+		} else {
+			goto label2;
+		}
+	} else {
+label2:
+		// remove the trailing /
+		if (j > 1 && path[j - 1] == '/') {
+			// j - 1 > 0
+			j--;
+		} else {
+			// j <= 1 || (j > 1 && path[j - 1] != '/')
+			if (j == 1 && path[j - 1] == '/') {
+				// root /
+			}
+		}
+		goto label_return;
+	}
+label_return:
+	path[j] = 0;
+	return j;
+}
+
+// convert .
+static
+size_t convert_path_3(char * path, size_t len)
+{
+	bool host_is_windows = false;
+#if defined(_WIN32) || defined(__CYGWIN__)
+	host_is_windows = true;
+#endif
+	size_t i = 0;
+	size_t j = 0;
+	if (i < len && path[i] == '/') {
+		i += 1;
+		j += 1;
+	} else if (host_is_windows && i + 2 < len 
+		&& (path[i] >= 'A' && path[i] <= 'Z')
+		&& path[i + 1] == ':' && path[i + 2] == '/') {
+		i += 3;
+		j += 3;
+	} else {
+		// relative path
+
+	}
+	// -I./././gcc/libgcc/.
+	while (i + 1 < len) {
+		if (path[i] == '.' && path[i + 1] == '/') {
+			i += 2;
+		} else {
+			break;
+		}
+	}
+	while (i < len && path[i] != '/') {
+		path[j++] = path[i++];
+	}
+	// i == len || path[i] == '/'
+	while (i + 1 < len) {
+		// i + 2 <= len
+		if (path[i] == '/' && path[i + 1] == '.') {
+			if (i + 2 < len) {
+				if (path[i + 2] == '/') {
+					// see /./
+label1:
+					// see /./ or /.\0
+					i += 2;
+					continue;
+				} else {
+					// not /./, like /.a
+					path[j++] = path[i++];
+					path[j++] = path[i++];
+				}
+			} else {
+				// i + 2 == len
+				// see /.\0
+				goto label1;
+			}
+		} else {
+			path[j++] = path[i++];
+			continue;
+		}
+	}
+	while (i < len) {
+		path[j++] = path[i++];
+	}
+	path[j] = 0;
+	return j;
+}
+
+// convert ..
+static
+size_t convert_path_4(char * path, size_t len)
+{
+	bool host_is_windows = false;
+#if defined(_WIN32) || defined(__CYGWIN__)
+	host_is_windows = true;
+#endif
+	size_t i = 0;
+	size_t j = 0;
+	if (i < len && path[i] == '/') {
+		i += 1;
+		j += 1;
+		goto label_absolute;
+	} else if (host_is_windows && i + 2 < len 
+		&& (path[i] >= 'A' && path[i] <= 'Z') 
+		&& path[i + 1] == ':' && path[i + 2] == '/') {
+		i += 3;
+		j += 3;
+		goto label_absolute;
+	} else {
+		// relative path
+		goto label_relative;
+	}
+label_absolute:
+	if (((i + 2 < len) && (path[i] == '.' && path[i + 1] == '.' && path[i + 2] == '/'))
+		|| ((i + 2 == len) && (path[i] == '.' && path[i + 1] == '.'))) {
+		// see ../ or ..\0
+		// error
+		goto label_error;
+	}
+label_relative:
+	// -I../../../gcc/libgcc/.
+	while (i + 2 < len) {
+		if (path[i] == '.' && path[i + 1] == '.' && path[i + 2] == '/') {
+			i += 3;
+			j += 3;
+		} else {
+			break;
+		}
+	}
+	while (i < len && path[i] != '/') {
+		i++;
+		j++;
+	}
+	// i == len || path[i] == '/'
+	while (i + 2 < len) {
+		// i + 3 <= len
+		if (path[i] == '/' && path[i + 1] == '.' && path[i + 2] == '.') {
+			if (i + 3 < len) {
+				if (path[i + 3] == '/') {
+					// see /../
+label1:
+					i += 3;
+					if (j == 0) {
+label3:
+						path[j++] = '.';
+						path[j++] = '.';
+						path[j++] = '/';
+						continue;
+					} else if (j > 0 && path[j - 1] == '/') {
+						if (j == 1) {
+							// root /
+							goto label_error;
+						} else if (host_is_windows && j == 3 && (path[j - 3] >= 'A' && path[j - 3] <= 'Z') && path[j - 2] == ':' ) {
+							// device root C:/
+							goto label_error;
+						} else {
+							// relative
+						}
+						j--;
+						if ((j >= 3 && path[j - 3] == '/' && path[j - 2] == '.' && path[j - 1] == '.')
+							|| (j == 2 && path[j - 2] == '.' && path[j - 1] == '.')){
+							j++;
+							goto label3;
+						} else {
+label2:
+							while (j > 0 && path[j - 1] != '/') {
+								j--;
+							}
+							// j == 0 || (j > 0 && path[j - 1] == '/')
+							continue;
+						}
+					} else {
+						// j > 0 && path[j - 1] != '/'
+						goto label2;
+					}
+				} else {
+					// not /../, like /..a
+					for (size_t k = 0; k < 4; k++) {
+						path[j++] = path[i++];
+					}
+					continue;
+				}
+			} else {
+				// i + 3 == len
+				// see /..\0
+				goto label1;
+			}
+		} else {
+			path[j++] = path[i++];
+			continue;
+		}
+	}
+	while (i < len) {
+		path[j++] = path[i++];
+	}
+label_error:
+	path[j] = 0;
+	return j;
+}
+
+size_t convert_path(char * path, size_t len)
+{
+	len = convert_path_0(path, len);
+	len = convert_path_1(path, len);
+	len = convert_path_2(path, len);
+	len = convert_path_3(path, len);
+	len = convert_path_4(path, len);
+	len = convert_path_2(path, len);
+	return len;
+}
+
+size_t convert_paths(char * paths, size_t len, char path_separator)
+{
+	size_t i = 0;
+	size_t j = 0;
+	while (i < len) {
+		size_t path_start, path_end;
+
+		while (i < len && paths[i] == path_separator) {
+			i++;
+		}
+		// i == len || paths[i] != path_separator
+		path_start = i;
+		while (i < len && paths[i] != path_separator) {
+			i++;
+		}
+		// i == len || paths[i] == path_separator
+		path_end = i;
+
+		bool completed;
+		if (i < len) {
+			// paths[i] == path_separator
+			// see the separator
+			completed = false;
+			i++;
+		} else {
+			// i == len
+			// end of line \0
+			completed = true;
+		}
+
+		size_t path_len = path_end > path_start;
+		if (path_len > 0) {
+			paths[path_end] = 0;
+			path_len = convert_path(paths + path_start, path_len);
+			for (size_t k = 0; k < path_len; k++) {
+				paths[j++] = paths[path_start + k];
+			}
+			if (!completed) {
+				paths[j++] = path_separator;
+			} else {
+				break;
+			}
+		} else {
+			// empty path, ignore
+		}
+		
+	}
+
+	paths[j] = 0;
+	return j;
+}
