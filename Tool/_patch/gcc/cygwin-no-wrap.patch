diff --git a/gcc/config.in b/gcc/config.in
index 7fcabbe5061..714814cf576 100644
--- a/gcc/config.in
+++ b/gcc/config.in
@@ -2564,13 +2564,6 @@
 #endif
 
 
-/* Define if you want to generate code by default that assumes that the Cygwin
-   DLL exports wrappers to support libstdc++ function replacement. */
-#ifndef USED_FOR_TARGET
-#undef USE_CYGWIN_LIBSTDCXX_WRAPPERS
-#endif
-
-
 /* Define to 1 if the 'long long' type is wider than 'long' but still
    efficiently supported by the host hardware. */
 #ifndef USED_FOR_TARGET
diff --git a/gcc/config/i386/cygwin-w64.h b/gcc/config/i386/cygwin-w64.h
index 8dac104cb43..b3b355dfa78 100644
--- a/gcc/config/i386/cygwin-w64.h
+++ b/gcc/config/i386/cygwin-w64.h
@@ -26,17 +26,6 @@ along with GCC; see the file COPYING3.  If not see
 
 /* To implement C++ function replacement we always wrap the cxx
    malloc-like operators.  See N2800 #17.6.4.6 [replacement.functions] */
-#undef CXX_WRAP_SPEC_LIST
-#define CXX_WRAP_SPEC_LIST " \
-  --wrap _Znwm \
-  --wrap _Znam \
-  --wrap _ZdlPv \
-  --wrap _ZdaPv \
-  --wrap _ZnwmRKSt9nothrow_t \
-  --wrap _ZnamRKSt9nothrow_t \
-  --wrap _ZdlPvRKSt9nothrow_t \
-  --wrap _ZdaPvRKSt9nothrow_t \
-"
 
 #undef SPEC_32
 #undef SPEC_64
@@ -60,7 +49,6 @@ along with GCC; see the file COPYING3.  If not see
 #define LINK_SPEC SUB_LINK_SPEC "\
   %{mwindows:--subsystem windows} \
   %{mconsole:--subsystem console} \
-  " CXX_WRAP_SPEC " \
   %{shared: %{mdll: %eshared and mdll are not compatible}} \
   %{shared: --shared} %{mdll:--dll} \
   %{static:-Bstatic} %{!static:-Bdynamic} \
diff --git a/gcc/config/i386/cygwin.h b/gcc/config/i386/cygwin.h
index 63de10c17d4..f4d75b7b2f7 100644
--- a/gcc/config/i386/cygwin.h
+++ b/gcc/config/i386/cygwin.h
@@ -91,41 +91,9 @@ along with GCC; see the file COPYING3.  If not see
     fvtable-verify=std:-lvtv -lpsapi} \
   -ladvapi32 -lshell32 -luser32 -lkernel32"
 
-/* To implement C++ function replacement we always wrap the cxx
-   malloc-like operators.  See N2800 #17.6.4.6 [replacement.functions] */
-#define CXX_WRAP_SPEC_LIST " \
-  --wrap _Znwj \
-  --wrap _Znaj \
-  --wrap _ZdlPv \
-  --wrap _ZdaPv \
-  --wrap _ZnwjRKSt9nothrow_t \
-  --wrap _ZnajRKSt9nothrow_t \
-  --wrap _ZdlPvRKSt9nothrow_t \
-  --wrap _ZdaPvRKSt9nothrow_t \
-"
-
-#if defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)
-
-#if USE_CYGWIN_LIBSTDCXX_WRAPPERS
-/* Default on, only explict -mno disables.  */
-#define CXX_WRAP_SPEC_OPT "!mno-use-libstdc-wrappers"
-#else
-/* Default off, only explict -m enables.  */
-#define CXX_WRAP_SPEC_OPT "muse-libstdc-wrappers"
-#endif
-
-#define CXX_WRAP_SPEC "%{" CXX_WRAP_SPEC_OPT ":" CXX_WRAP_SPEC_LIST "}"
-
-#else /* !defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)  */
-
-#define CXX_WRAP_SPEC ""
-
-#endif /* ?defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS) */
-
 #define LINK_SPEC "\
   %{mwindows:--subsystem windows} \
   %{mconsole:--subsystem console} \
-  " CXX_WRAP_SPEC " \
   %{shared: %{mdll: %eshared and mdll are not compatible}} \
   %{shared: --shared} %{mdll:--dll} \
   %{static:-Bstatic} %{!static:-Bdynamic} \
diff --git a/gcc/config/mingw/cygming.opt b/gcc/config/mingw/cygming.opt
index b7b0bc5f619..2cde4a051cb 100644
--- a/gcc/config/mingw/cygming.opt
+++ b/gcc/config/mingw/cygming.opt
@@ -46,10 +46,6 @@ mpe-aligned-commons
 Target Var(use_pe_aligned_common) Init(HAVE_GAS_ALIGNED_COMM)
 Use the GNU extension to the PE format for aligned common data.
 
-muse-libstdc-wrappers
-Target Condition({defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)})
-Compile code that relies on Cygwin DLL wrappers to support C++ operator new/delete replacement.
-
 fset-stack-executable
 Common Var(flag_setstackexecutable) Init(1) Optimization
 For nested functions on stack executable permission is set.
diff --git a/gcc/config/mingw/winnt.cc b/gcc/config/mingw/winnt.cc
index 803e5f5ec85..ed07edb0992 100644
--- a/gcc/config/mingw/winnt.cc
+++ b/gcc/config/mingw/winnt.cc
@@ -695,55 +695,6 @@ mingw_pe_record_stub (const char *name)
 }
 
 
-#ifdef CXX_WRAP_SPEC_LIST
-
-/* Search for a function named TARGET in the list of library wrappers
-   we are using, returning a pointer to it if found or NULL if not.
-   This function might be called on quite a few symbols, and we only
-   have the list of names of wrapped functions available to us as a
-   spec string, so first time round we lazily initialise a hash table
-   to make things quicker.  */
-
-static const char *
-i386_find_on_wrapper_list (const char *target)
-{
-  static char first_time = 1;
-  static hash_table<nofree_string_hash> *wrappers;
-
-  if (first_time)
-    {
-      /* Beware that this is not a complicated parser, it assumes
-         that any sequence of non-whitespace beginning with an
-	 underscore is one of the wrapped symbols.  For now that's
-	 adequate to distinguish symbols from spec substitutions
-	 and command-line options.  */
-      static char wrapper_list_buffer[] = CXX_WRAP_SPEC_LIST;
-      char *bufptr;
-      /* Breaks up the char array into separated strings
-         strings and enter them into the hash table.  */
-      wrappers = new hash_table<nofree_string_hash> (8);
-      for (bufptr = wrapper_list_buffer; *bufptr; ++bufptr)
-	{
-	  char *found = NULL;
-	  if (ISSPACE (*bufptr))
-	    continue;
-	  if (*bufptr == '_')
-	    found = bufptr;
-	  while (*bufptr && !ISSPACE (*bufptr))
-	    ++bufptr;
-	  if (*bufptr)
-	    *bufptr = 0;
-	  if (found)
-	    *wrappers->find_slot (found, INSERT) = found;
-	}
-      first_time = 0;
-    }
-
-  return wrappers->find (target);
-}
-
-#endif /* CXX_WRAP_SPEC_LIST */
-
 /* This is called at the end of assembly.  For each external function
    which has not been defined, we output a declaration now.  We also
    output the .drectve section.  */
@@ -763,15 +714,6 @@ mingw_pe_file_end (void)
       if (! TREE_ASM_WRITTEN (decl)
 	  && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))
 	{
-#ifdef CXX_WRAP_SPEC_LIST
-	  /* To ensure the DLL that provides the corresponding real
-	     functions is still loaded at runtime, we must reference
-	     the real function so that an (unused) import is created.  */
-	  const char *realsym = i386_find_on_wrapper_list (p->name);
-	  if (realsym)
-	    mingw_pe_declare_function_type (asm_out_file,
-		concat ("__real_", realsym, NULL), TREE_PUBLIC (decl));
-#endif /* CXX_WRAP_SPEC_LIST */
 	  TREE_ASM_WRITTEN (decl) = 1;
 	  mingw_pe_declare_function_type (asm_out_file, p->name,
 					 TREE_PUBLIC (decl));
diff --git a/gcc/configure b/gcc/configure
index 3d301b6ecd3..eabead9e572 100755
--- a/gcc/configure
+++ b/gcc/configure
@@ -28851,32 +28851,6 @@ fi
     ;;
 
   i[34567]86-*-* | x86_64-*-*)
-    case $target_os in
-      cygwin*)
-	# Full C++ conformance when using a shared libstdc++-v3 requires some
-	# support from the Cygwin DLL, which in more recent versions exports
-	# wrappers to aid in interposing and redirecting operators new, delete,
-	# etc., as per n2800 #17.6.4.6 [replacement.functions].  Check if we
-	# are configuring for a version of Cygwin that exports the wrappers.
-	if test x$host = x$target && test x$host_cpu = xi686; then
-	  ac_fn_cxx_check_func "$LINENO" "__wrap__Znaj" "ac_cv_func___wrap__Znaj"
-if test "x$ac_cv_func___wrap__Znaj" = xyes; then :
-  gcc_ac_cygwin_dll_wrappers=yes
-else
-  gcc_ac_cygwin_dll_wrappers=no
-fi
-
-	else
-	  # Can't check presence of libc functions during cross-compile, so
-	  # we just have to assume we're building for an up-to-date target.
-	  gcc_ac_cygwin_dll_wrappers=yes
-	fi
-
-cat >>confdefs.h <<_ACEOF
-#define USE_CYGWIN_LIBSTDCXX_WRAPPERS `if test $gcc_ac_cygwin_dll_wrappers = yes; then echo 1; else echo 0; fi`
-_ACEOF
-
-    esac
     case $target_os in
       cygwin* | pe | mingw32*)
 	# Recent binutils allows the three-operand form of ".comm" on PE.  This
diff --git a/gcc/configure.ac b/gcc/configure.ac
index 8a2d2b0438e..72273f43c01 100644
--- a/gcc/configure.ac
+++ b/gcc/configure.ac
@@ -4755,25 +4755,6 @@ foo:
 changequote(,)dnl
   i[34567]86-*-* | x86_64-*-*)
 changequote([,])dnl
-    case $target_os in
-      cygwin*)
-	# Full C++ conformance when using a shared libstdc++-v3 requires some
-	# support from the Cygwin DLL, which in more recent versions exports
-	# wrappers to aid in interposing and redirecting operators new, delete,
-	# etc., as per n2800 #17.6.4.6 [replacement.functions].  Check if we
-	# are configuring for a version of Cygwin that exports the wrappers.
-	if test x$host = x$target && test x$host_cpu = xi686; then
-	  AC_CHECK_FUNC([__wrap__Znaj],[gcc_ac_cygwin_dll_wrappers=yes],[gcc_ac_cygwin_dll_wrappers=no])
-	else
-	  # Can't check presence of libc functions during cross-compile, so
-	  # we just have to assume we're building for an up-to-date target.
-	  gcc_ac_cygwin_dll_wrappers=yes
-	fi
-	AC_DEFINE_UNQUOTED(USE_CYGWIN_LIBSTDCXX_WRAPPERS,
-	  [`if test $gcc_ac_cygwin_dll_wrappers = yes; then echo 1; else echo 0; fi`],
-	  [Define if you want to generate code by default that assumes that the
-	   Cygwin DLL exports wrappers to support libstdc++ function replacement.])
-    esac
     case $target_os in
       cygwin* | pe | mingw32*)
 	# Recent binutils allows the three-operand form of ".comm" on PE.  This
diff --git a/gcc/doc/options.texi b/gcc/doc/options.texi
index a8b3a3a0f4c..61582a60a6c 100644
--- a/gcc/doc/options.texi
+++ b/gcc/doc/options.texi
@@ -211,10 +211,6 @@ is quite simplistic, and will be tricked by any nested parentheses within
 the argument text itself; in this case, the entire option argument can
 be wrapped in curly braces within the parentheses to demarcate it, e.g.:
 
-@smallexample
-Condition(@{defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)@})
-@end smallexample
-
 @table @code
 @item Common
 The option is available for all languages and targets.
