diff --git a/gcc/incpath.cc b/gcc/incpath.cc
index f5016c7bd6f..ad307ba21a8 100644
--- a/gcc/incpath.cc
+++ b/gcc/incpath.cc
@@ -51,8 +51,8 @@
 static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };
 
 static void add_env_var_paths (const char *, incpath_kind);
-static void add_standard_paths (const char *, const char *, const char *, int);
-static void free_path (struct cpp_dir *, int);
+static void add_standard_paths (const char *, const char *, const char *, int, int verbose = 0);
+static void free_path (struct cpp_dir *, int, int verbose = 0);
 static void merge_include_chains (const char *, cpp_reader *, int);
 static void add_sysroot_to_chain (const char *, int);
 static struct cpp_dir *remove_duplicates (cpp_reader *, struct cpp_dir *,
@@ -68,8 +68,11 @@ enum { REASON_QUIET = 0, REASON_NOENT, REASON_DUP, REASON_DUP_SYS };
 
 /* Free an element of the include chain, possibly giving a reason.  */
 static void
-free_path (struct cpp_dir *path, int reason)
+free_path (struct cpp_dir *path, int reason, int verbose)
 {
+  if (verbose) {
+    fprintf (stderr, "free_path() path->name : %s reason : %d\n", path->name, reason);
+  }
   switch (reason)
     {
     case REASON_DUP:
@@ -187,8 +190,35 @@ add_env_var_paths (const char *env_var, incpath_kind chain)
 /* Append the standard include chain defined in cppdefault.cc.  */
 static void
 add_standard_paths (const char *sysroot, const char *iprefix,
-		    const char *imultilib, int cxx_stdinc)
+		    const char *imultilib, int cxx_stdinc, int verbose)
 {
+  if (verbose) {
+    fprintf (stderr, "add_standard_paths() sysroot : %s iprefix : %s imultilib : %s cxx_stdinc : %d\n",
+      sysroot, iprefix, imultilib, cxx_stdinc);
+    fprintf (stderr, "add_standard_paths() cpp_GCC_INCLUDE_DIR : %s cpp_GCC_INCLUDE_DIR_len : %d\n",
+      cpp_GCC_INCLUDE_DIR, (int)cpp_GCC_INCLUDE_DIR_len);
+    fprintf (stderr, "add_standard_paths() cpp_PREFIX : %s cpp_PREFIX_len : %d\n",
+      cpp_PREFIX, (int)cpp_PREFIX_len);
+
+    fprintf (stderr, "\n");
+    fprintf (stderr, "add_standard_paths() cpp_include_defaults[]:\n");
+    const struct default_include *p;
+    for (p = cpp_include_defaults; p->fname; p++) {
+      fprintf (stderr, "add_standard_paths() p->  fname : %s component : %s"
+        " cplusplus : %d cxx_aware : %d add_sysroot : %d multilib : %d\n", 
+        p->fname, p->component, p->cplusplus, p->cxx_aware, p->add_sysroot, p->multilib);
+	}
+    fprintf (stderr, "\n");
+    fprintf (stderr, "add_standard_paths() cpp_include_defaults[]: p->cplusplus == 0 || (cxx_stdinc && (p->cplusplus == flag_stdlib_kind\n");
+    for (p = cpp_include_defaults; p->fname; p++) {
+      if (p->cplusplus == 0 || (cxx_stdinc && (p->cplusplus == flag_stdlib_kind))) {
+        fprintf (stderr, "add_standard_paths() p->  fname : %s component : %s"
+          " cplusplus : %d cxx_aware : %d add_sysroot : %d multilib : %d\n", 
+          p->fname, p->component, p->cplusplus, p->cxx_aware, p->add_sysroot, p->multilib);
+      }
+    }
+    fprintf (stderr, "\n");
+  }
   const struct default_include *p;
   int relocated = cpp_relocated ();
   size_t len;
@@ -208,6 +238,12 @@ add_standard_paths (const char *sysroot, const char *iprefix,
 	  if (p->cplusplus == 0
 	      || (cxx_stdinc && (p->cplusplus == flag_stdlib_kind)))
 	    {
+          if (verbose) {
+            fprintf (stderr, "\n");
+            fprintf (stderr, "add_standard_paths() loop 0, p->  fname : %s component : %s"
+              " cplusplus : %d cxx_aware : %d add_sysroot : %d multilib : %d\n", 
+              p->fname, p->component, p->cplusplus, p->cxx_aware, p->add_sysroot, p->multilib);
+          }
 	      /* Should we be translating sysrooted dirs too?  Assume
 		 that iprefix and sysroot are mutually exclusive, for
 		 now.  */
@@ -229,7 +265,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,
 		      str = reconcat (str, str, dir_separator_str,
 				      imultiarch, NULL);
 		    }
-		  add_path (str, INC_SYSTEM, p->cxx_aware, false);
+		  add_path (str, INC_SYSTEM, p->cxx_aware, verbose);
 		}
 	    }
 	}
@@ -240,6 +276,12 @@ add_standard_paths (const char *sysroot, const char *iprefix,
       if (p->cplusplus == 0
 	  || (cxx_stdinc && (p->cplusplus == flag_stdlib_kind)))
 	{
+          if (verbose) {
+            fprintf (stderr, "\n");
+            fprintf (stderr, "add_standard_paths() loop 1, p->  fname : %s component : %s"
+              " cplusplus : %d cxx_aware : %d add_sysroot : %d multilib : %d\n", 
+              p->fname, p->component, p->cplusplus, p->cxx_aware, p->add_sysroot, p->multilib);
+          }
 	  char *str;
 
 	if (host_is_mingw) {
@@ -293,6 +335,9 @@ label_relocated:
 					    cpp_EXEC_PREFIX,
 					    cpp_PREFIX);
 		  free (dummy);
+		  if (verbose) {
+			  fprintf (stderr, "add_standard_paths() relocated_prefix %s\n", relocated_prefix);
+		  }
 		}
 	      ostr = concat (relocated_prefix,
 			     p->fname + cpp_PREFIX_len,
@@ -315,7 +360,7 @@ label_relocated:
 	      str = reconcat (str, str, dir_separator_str, imultiarch, NULL);
 	    }
 
-	  add_path (str, INC_SYSTEM, p->cxx_aware, false);
+	  add_path (str, INC_SYSTEM, p->cxx_aware, false, verbose);
 	}
     }
 }
@@ -332,6 +377,10 @@ remove_duplicates (cpp_reader *pfile, struct cpp_dir *head,
 		   struct cpp_dir *system, struct cpp_dir *join,
 		   int verbose)
 {
+  if (verbose) {
+    fprintf (stderr, "remove_duplicates() head->name : %s system->name : %s join->name : %s\n", 
+    head?head->name:0, system?system->name:0, join?join->name:0);
+  }
   struct cpp_dir **pcur, *tmp, *cur;
   struct HOST_STAT_FOR_64BIT_INODES st;
 
@@ -396,7 +445,7 @@ remove_duplicates (cpp_reader *pfile, struct cpp_dir *head,
 
       /* Remove this entry from the chain.  */
       *pcur = cur->next;
-      free_path (cur, verbose ? reason: REASON_QUIET);
+      free_path (cur, verbose ? reason: REASON_QUIET, verbose);
     }
 
   *pcur = join;
@@ -436,6 +485,9 @@ add_sysroot_to_chain (const char *sysroot, int chain)
 static void
 merge_include_chains (const char *sysroot, cpp_reader *pfile, int verbose)
 {
+  if (verbose) {
+    fprintf (stderr, "merge_include_chains() \n");
+  }
   /* Add the sysroot to user-supplied paths starting with "=".  */
   if (sysroot)
     {
@@ -518,8 +570,12 @@ add_cpp_dir_path (cpp_dir *p, incpath_kind chain)
 /* Add PATH to the include chain CHAIN. PATH must be malloc-ed and
    NUL-terminated.  */
 void
-add_path (char *path, incpath_kind chain, int cxx_aware, bool user_supplied_p)
+add_path (char *path, incpath_kind chain, int cxx_aware, bool user_supplied_p, int verbose)
 {
+  if (verbose) {
+    fprintf (stderr, "add_path() path : %s chain : %d cxx_aware : %d user_supplied_p : %d\n", 
+    path, chain, cxx_aware, user_supplied_p);
+  }
   cpp_dir *p;
   size_t pathlen = strlen (path);
 
@@ -543,6 +599,7 @@ add_path (char *path, incpath_kind chain, int cxx_aware, bool user_supplied_p)
   pathlen = convert_path(path, pathlen);
   p->name = path;
   p->len = pathlen;
+  p->canonical_name = 0;
 #ifndef INO_T_EQ
   p->canonical_name = lrealpath (path);
 #endif
@@ -553,6 +610,10 @@ add_path (char *path, incpath_kind chain, int cxx_aware, bool user_supplied_p)
   p->construct = 0;
   p->user_supplied_p = user_supplied_p;
 
+  if (verbose) {
+    fprintf (stderr, "add_path() p->  name : %s len : %d canonical_name : %s sysp : %d user_supplied_p : %d\n", 
+      p->name, p->len, p->canonical_name, p->sysp, p->user_supplied_p);
+  }
   add_cpp_dir_path (p, chain);
 }
 
@@ -563,6 +624,11 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,
 			 const char *iprefix, const char *imultilib,
 			 int stdinc, int cxx_stdinc, int verbose)
 {
+  if (verbose) {
+    fprintf (stderr, "register_include_chains() sysroot : %s iprefix : %s imultilib : %s stdinc : %d cxx_stdinc :%d\n", 
+      sysroot, iprefix, imultilib, stdinc, cxx_stdinc);
+  }
+
   static const char *const lang_env_vars[] =
     { "C_INCLUDE_PATH", "CPLUS_INCLUDE_PATH",
       "OBJC_INCLUDE_PATH", "OBJCPLUS_INCLUDE_PATH" };
@@ -583,7 +649,7 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,
 
   /* Finally chain on the standard directories.  */
   if (stdinc)
-    add_standard_paths (sysroot, iprefix, imultilib, cxx_stdinc);
+    add_standard_paths (sysroot, iprefix, imultilib, cxx_stdinc, verbose);
 
   target_c_incpath.extra_includes (sysroot, iprefix, stdinc);
   
diff --git a/gcc/incpath.h b/gcc/incpath.h
index 44898161391..ceb8cc36ed5 100644
--- a/gcc/incpath.h
+++ b/gcc/incpath.h
@@ -28,7 +28,7 @@ enum incpath_kind {
 };
 
 extern void split_quote_chain (void);
-extern void add_path (char *, incpath_kind, int, bool);
+extern void add_path (char *, incpath_kind, int, bool, int verbose = 0);
 extern void register_include_chains (cpp_reader *, const char *,
 				     const char *, const char *,
 				     int, int, int);
