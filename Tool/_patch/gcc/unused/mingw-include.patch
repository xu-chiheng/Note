diff --git a/gcc/cppdefault.cc b/gcc/cppdefault.cc
index f82b4badad7..6a403a5d491 100644
--- a/gcc/cppdefault.cc
+++ b/gcc/cppdefault.cc
@@ -35,7 +35,7 @@
 # undef CROSS_INCLUDE_DIR
 #endif
 
-const struct default_include cpp_include_defaults[]
+struct default_include cpp_include_defaults[]
 #ifdef INCLUDE_DEFAULTS
 = INCLUDE_DEFAULTS;
 #else
@@ -114,7 +114,7 @@ const size_t cpp_GCC_INCLUDE_DIR_len = 0;
 
 /* The configured prefix.  */
 const char cpp_PREFIX[] = PREFIX;
-const size_t cpp_PREFIX_len = sizeof PREFIX - 1;
+// const size_t cpp_PREFIX_len = sizeof PREFIX - 1;
 const char cpp_EXEC_PREFIX[] = STANDARD_EXEC_PREFIX;
 
 /* This value is set by cpp_relocated at runtime */
diff --git a/gcc/cppdefault.h b/gcc/cppdefault.h
index e9b9264caff..7bd13fb0cdb 100644
--- a/gcc/cppdefault.h
+++ b/gcc/cppdefault.h
@@ -33,7 +33,7 @@
 
 struct default_include
 {
-  const char *const fname;	/* The name of the directory.  */
+  const char * fname;	/* The name of the directory.  */
   const char *const component;	/* The component containing the directory
 				   (see update_path in prefix.cc) */
   const char cplusplus;		/* When this is non-zero, we should only
@@ -54,7 +54,7 @@ struct default_include
 				     -imultiarch, when set to 2.  */
 };
 
-extern const struct default_include cpp_include_defaults[];
+extern struct default_include cpp_include_defaults[];
 extern const char cpp_GCC_INCLUDE_DIR[];
 extern const size_t cpp_GCC_INCLUDE_DIR_len;
 
@@ -62,7 +62,7 @@ extern const size_t cpp_GCC_INCLUDE_DIR_len;
    to --prefix=.  */
 extern const char cpp_PREFIX[];
 /* The length of the configure-time prefix.  */
-extern const size_t cpp_PREFIX_len;
+// extern const size_t cpp_PREFIX_len;
 /* The configure-time execution prefix.  This is typically the lib/gcc
    subdirectory of cpp_PREFIX.  */
 extern const char cpp_EXEC_PREFIX[];
diff --git a/gcc/d/d-incpath.cc b/gcc/d/d-incpath.cc
index 32ab0b71efa..fb6e623dae4 100644
--- a/gcc/d/d-incpath.cc
+++ b/gcc/d/d-incpath.cc
@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see
 #include "d-frontend.h"
 
 #include "cppdefault.h"
+#include "incpath.h"
 
 /* Look for directories that start with the standard prefix.
    "Translate" them, i.e: replace /usr/local/lib/gcc with
@@ -31,9 +32,14 @@ along with GCC; see the file COPYING3.  If not see
 static char *
 prefixed_path (const char *path, const char *iprefix)
 {
-  if (cpp_relocated () && cpp_PREFIX_len != 0)
+  std::string cpp_prefix = cpp_PREFIX;
+#ifdef __MINGW32__
+  cpp_prefix = cygpath_m(cpp_prefix);
+#endif
+
+  if (cpp_relocated () && cpp_prefix.length() != 0)
   {
-    if (!filename_ncmp (path, cpp_PREFIX, cpp_PREFIX_len))
+    if (!filename_ncmp (path, cpp_prefix.c_str(), cpp_prefix.length()))
       {
 	static const char *relocated_prefix;
 	/* If this path starts with the configure-time prefix,
@@ -47,11 +53,11 @@ prefixed_path (const char *path, const char *iprefix)
 	    relocated_prefix
 	      = make_relative_prefix (dummy,
 				      cpp_EXEC_PREFIX,
-				      cpp_PREFIX);
+				      cpp_prefix.c_str());
 	    free (dummy);
 	  }
 
-	return concat (relocated_prefix, path + cpp_PREFIX_len, NULL);
+	return concat (relocated_prefix, path + cpp_prefix.length(), NULL);
       }
   }
 
diff --git a/gcc/incpath.cc b/gcc/incpath.cc
index 64cdd2f4a1b..70a0175cbff 100644
--- a/gcc/incpath.cc
+++ b/gcc/incpath.cc
@@ -130,10 +130,32 @@ static void
 add_standard_paths (const char *sysroot, const char *iprefix,
 		    const char *imultilib, int cxx_stdinc)
 {
-  const struct default_include *p;
+  struct default_include *p;
   int relocated = cpp_relocated ();
   size_t len;
 
+  std::string cpp_prefix = cpp_PREFIX;
+#ifdef __MINGW32__
+  cpp_prefix = cygpath_m(cpp_prefix);
+
+#ifdef NATIVE_SYSTEM_HEADER_DIR
+	for (p = cpp_include_defaults; p->fname; p++) {
+		std::string native_system_header_dir = NATIVE_SYSTEM_HEADER_DIR;
+		if (!filename_cmp (p->fname, native_system_header_dir.c_str())) {
+			char * msystem = getenv("MSYSTEM");
+			if (!strcmp(msystem, "UCRT64")) {
+				p->fname = "/ucrt64/include";
+			} else if (!strcmp(msystem, "MINGW64")) {
+				p->fname = "/mingw64/include";
+			} else {
+
+			}
+		}
+	}
+#endif
+
+#endif
+
   if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0)
     {
       /* Look for directories that start with the standard prefix.
@@ -190,7 +212,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,
 	      free (sysroot_no_trailing_dir_separator);
 	    }
 	  else if (!p->add_sysroot && relocated
-		   && !filename_ncmp (p->fname, cpp_PREFIX, cpp_PREFIX_len))
+		   && !filename_ncmp (p->fname, cpp_prefix.c_str(), cpp_prefix.length()))
 	    {
  	      static const char *relocated_prefix;
 	      char *ostr;
@@ -208,11 +230,11 @@ add_standard_paths (const char *sysroot, const char *iprefix,
 		  relocated_prefix
 		    = make_relative_prefix (dummy,
 					    cpp_EXEC_PREFIX,
-					    cpp_PREFIX);
+					    cpp_prefix.c_str());
 		  free (dummy);
 		}
 	      ostr = concat (relocated_prefix,
-			     p->fname + cpp_PREFIX_len,
+			     p->fname + cpp_prefix.length(),
 			     NULL);
 	      str = update_path (ostr, p->component);
 	      free (ostr);
@@ -252,6 +274,23 @@ remove_duplicates (cpp_reader *pfile, struct cpp_dir *head,
   struct cpp_dir **pcur, *tmp, *cur;
   struct HOST_STAT_FOR_64BIT_INODES st;
 
+#ifdef __MINGW32__
+	std::string cpp_prefix = cpp_PREFIX;
+	cpp_prefix = cygpath_m(cpp_prefix);
+	for (pcur = &head; *pcur; ) {
+		cur = *pcur;
+		if (filename_ncmp (cur->name, cpp_prefix.c_str(), cpp_prefix.length())) {
+			/* Keep this directory.	*/
+			pcur = &cur->next;
+			continue;
+		} else {
+			/* Remove this entry from the chain. */
+			*pcur = cur->next;
+			free_path (cur, REASON_QUIET);
+		}
+	}
+#endif
+
   for (pcur = &head; *pcur; )
     {
       int reason = REASON_QUIET;
@@ -432,6 +471,42 @@ add_cpp_dir_path (cpp_dir *p, incpath_kind chain)
   tails[chain] = p;
 }
 
+#ifdef __MINGW32__
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+std::string cygpath_m(std::string const& path)
+{
+    // Create a pipe.
+    std::string command = "cygpath -m '" + path + "'";
+    FILE * pipe = popen(command.c_str(), "r");
+
+    std::string output;
+    char line[4096 + 1];
+    // https://cplusplus.com/reference/cstdio/fgets
+    while (fgets(line, sizeof(line), pipe) != nullptr) {
+        char * p = strchr(line, '\n');
+        if (p) {
+            *p = 0;
+            output += line;
+            break;
+        } else {
+            // without end of line ?
+            output += line;
+            continue;
+        }
+    }
+
+    // Close the pipe.
+    pclose(pipe);
+
+    return output;
+}
+
+#endif
+
 /* Add PATH to the include chain CHAIN. PATH must be malloc-ed and
    NUL-terminated.  */
 void
@@ -455,6 +530,14 @@ add_path (char *path, incpath_kind chain, int cxx_aware, bool user_supplied_p)
   pathlen = end - path;
 #endif
 
+#ifdef __MINGW32__
+	std::string path0 = path;
+	std::string path1 = cygpath_m(path0);
+	char * path2 = xstrdup(path1.c_str());
+	free(path);
+	path = path2;
+#endif
+
   p = XNEW (cpp_dir);
   p->next = NULL;
   p->name = path;
diff --git a/gcc/incpath.h b/gcc/incpath.h
index 44898161391..f2011370d1a 100644
--- a/gcc/incpath.h
+++ b/gcc/incpath.h
@@ -43,4 +43,9 @@ struct target_c_incpath_s {
 
 extern struct target_c_incpath_s target_c_incpath;
 
+#ifdef __MINGW32__
+#include <string>
+std::string cygpath_m(std::string const& path);
+#endif
+
 #endif /* GCC_INCPATH_H */
