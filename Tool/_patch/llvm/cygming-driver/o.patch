diff --git a/clang/lib/Driver/ToolChains/MinGW.cpp b/clang/lib/Driver/ToolChains/MinGW.cpp
index c81a7ed17029..bafa3f7475cf 100644
--- a/clang/lib/Driver/ToolChains/MinGW.cpp
+++ b/clang/lib/Driver/ToolChains/MinGW.cpp
@@ -520,26 +575,38 @@ toolchains::MinGW::MinGW(const Driver &D, const llvm::Triple &Triple,
   // correct crtbegin.o ,cetend.o would be found.
   getFilePaths().push_back(GccLibDir);
 
-  // openSUSE/Fedora
-  std::string CandidateSubdir = SubdirName + "/sys-root/mingw";
-  if (getDriver().getVFS().exists(Base + CandidateSubdir))
-    SubdirName = CandidateSubdir;
-
-  getFilePaths().push_back(
-      (Base + SubdirName + llvm::sys::path::get_separator() + "lib").str());
-
-  // Gentoo
-  getFilePaths().push_back(
-      (Base + SubdirName + llvm::sys::path::get_separator() + "mingw/lib").str());
-
   // Only include <base>/lib if we're not cross compiling (not even for
   // windows->windows to a different arch), or if the sysroot has been set
   // (where we presume the user has pointed it at an arch specific
   // subdirectory).
-  if (!::isCrossCompiling(getTriple(), /*RequireArchMatch=*/true) ||
+  if (!::isCrossCompiling(getTriple(), /*RequireArchMatch=*/true, isCygwin) ||
       getDriver().SysRoot.size())
     getFilePaths().push_back(Base + "lib");
 
+  if (isCygwin) {
+    // for Cygwin's crt0.o
+    if (!::isCrossCompiling(getTriple(), /*RequireArchMatch=*/true, isCygwin) ||
+        getDriver().SysRoot.size()) {
+      getFilePaths().push_back(getDriver().SysRoot + "/lib");
+    } else {
+      // must add library directories by -L
+    }
+  } else {
+    // for MinGW's crt2.o
+    if (!::isCrossCompiling(getTriple(), /*RequireArchMatch=*/true, isCygwin)) {
+      const char * path = getenv("LIB");
+        if (path) {
+          getFilePaths().push_back(path);
+        } else {
+
+        }
+    } else if (getDriver().SysRoot.size()) {
+      getFilePaths().push_back(getDriver().SysRoot + "/lib");
+    } else {
+      // must add library directories by -L
+    }
+  }
+
   NativeLLVMSupport =
       Args.getLastArgValue(options::OPT_fuse_ld_EQ, CLANG_DEFAULT_LINKER)
           .equals_insensitive("lld");
