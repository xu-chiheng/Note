diff --git a/clang/lib/Driver/ToolChains/MinGW.cpp b/clang/lib/Driver/ToolChains/MinGW.cpp
index 188d76973716..5a00553cacee 100644
--- a/clang/lib/Driver/ToolChains/MinGW.cpp
+++ b/clang/lib/Driver/ToolChains/MinGW.cpp
@@ -534,6 +534,59 @@ toolchains::MinGW::MinGW(const Driver &D, const llvm::Triple &Triple,
       getDriver().SysRoot.size())
     getFilePaths().push_back(Base + "lib");
 
+	// for MinGW's crt2.o
+	if (!::isCrossCompiling(getTriple(), /*RequireArchMatch=*/true)) {
+		const char * temp = getenv("LIB");
+		if (temp) {
+			size_t len = strlen(temp);
+			char paths[len + 10];
+			strcpy(paths, temp);
+			char path_separator = ';';
+			size_t i = 0;
+			while (i < len) {
+				size_t path_start, path_end;
+				while (i < len && paths[i] == path_separator) {
+					i++;
+				}
+				// i == len || paths[i] != path_separator
+				path_start = i;
+				while (i < len && paths[i] != path_separator) {
+					i++;
+				}
+				// i == len || paths[i] == path_separator
+				path_end = i;
+
+				bool completed;
+				if (i < len) {
+					// paths[i] == path_separator
+					// see the separator
+					completed = false;
+					i++;
+				} else {
+					// i == len
+					// end of line \0
+					completed = true;
+				}
+
+				size_t path_len = path_end - path_start;
+				if (path_len > 0) {
+					paths[path_end] = 0;
+
+					getFilePaths().push_back(paths + path_start);
+
+					if (!completed) {
+
+					} else {
+						break;
+					}
+				} else {
+					// empty path, ignore
+				}
+
+			}
+		}
+	}
+
   NativeLLVMSupport =
       Args.getLastArgValue(options::OPT_fuse_ld_EQ, CLANG_DEFAULT_LINKER)
           .equals_insensitive("lld");
