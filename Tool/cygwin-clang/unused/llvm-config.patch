do_git_diff_branch...HEAD work  # at /cygdrive/e/Note/Tool/llvm started
no ~commit-message.txt



branch : work  current_branch : test0007
git diff work...HEAD
git diff $(git merge-base work test0007) test0007



diff --git a/llvm/tools/llvm-config/llvm-config.cpp b/llvm/tools/llvm-config/llvm-config.cpp
index e86eb2b44b10..52cfe3bf4995 100644
--- a/llvm/tools/llvm-config/llvm-config.cpp
+++ b/llvm/tools/llvm-config/llvm-config.cpp
@@ -382,18 +382,28 @@ int main(int argc, char **argv) {
   /// removed or, as in the case of CMake's `BUILD_SHARED_LIBS`, never present
   /// in the first place. This can't be done at configure/build time.
 
-  StringRef SharedExt, SharedVersionedExt, SharedDir, SharedPrefix, StaticExt,
-      StaticPrefix, StaticDir = "lib";
+  StringRef SharedExt, SharedVersionedExt, SharedDir, SharedPrefix, DylibDir, DylibPrefix,
+    DylibExt, StaticExt, StaticPrefix, StaticDir = "lib";
   std::string DirSep = "/";
   const Triple HostTriple(Triple::normalize(LLVM_HOST_TRIPLE));
   if (HostTriple.isOSWindows()) {
+  	// DylibExt != SharedExt
     SharedExt = "dll";
     SharedVersionedExt = LLVM_DYLIB_VERSION ".dll";
-    if (HostTriple.isOSCygMing()) {
-      SharedPrefix = "lib";
+	if (HostTriple.isWindowsCygwinEnvironment()) {
+      SharedPrefix = "cyg";
+      DylibPrefix = "lib";
+      DylibExt = "dll.a";
+      StaticPrefix = "lib";
       StaticExt = "a";
+	} else if (HostTriple.isWindowsGNUEnvironment()) {
+      SharedPrefix = "lib";
+      DylibPrefix = "lib";
+      DylibExt = "dll.a";
       StaticPrefix = "lib";
-    } else {
+      StaticExt = "a";
+    } else if (HostTriple.isWindowsMSVCEnvironment()) {
+      DylibExt = "lib";
       StaticExt = "lib";
       DirSep = "\\";
       std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '/', '\\');
@@ -403,22 +413,26 @@ int main(int argc, char **argv) {
       std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '/', '\\');
       std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '/',
                    '\\');
+    } else {
+      llvm_unreachable("Unknown environment!");
     }
-    SharedDir = ActiveBinDir;
-    StaticDir = ActiveLibDir;
+    DylibDir = ActiveBinDir;
+    SharedDir = StaticDir = ActiveLibDir;
   } else if (HostTriple.isOSDarwin()) {
     SharedExt = "dylib";
+    DylibExt = SharedExt;
     SharedVersionedExt = LLVM_DYLIB_VERSION ".dylib";
     StaticExt = "a";
-    StaticDir = SharedDir = ActiveLibDir;
+    StaticDir = SharedDir = DylibDir = ActiveLibDir;
     StaticPrefix = SharedPrefix = "lib";
   } else {
     // default to the unix values:
     SharedExt = "so";
+    DylibExt = SharedExt;
     SharedVersionedExt = LLVM_DYLIB_VERSION ".so";
     StaticExt = "a";
-    StaticDir = SharedDir = ActiveLibDir;
-    StaticPrefix = SharedPrefix = "lib";
+    StaticDir = SharedDir = DylibDir = ActiveLibDir;
+    StaticPrefix = SharedPrefix = DylibPrefix = "lib";
   }
 
   const bool BuiltDyLib = !!LLVM_ENABLE_DYLIB;
@@ -428,7 +442,7 @@ int main(int argc, char **argv) {
 
   bool DyLibExists = false;
   const std::string DyLibName =
-      (SharedPrefix + "LLVM-" + SharedVersionedExt).str();
+      (DylibPrefix + "LLVM-" + SharedVersionedExt).str();
 
   // If LLVM_LINK_DYLIB is ON, the single shared library will be returned
   // for "--libs", etc, if they exist. This behaviour can be overridden with
@@ -436,7 +450,7 @@ int main(int argc, char **argv) {
   bool LinkDyLib = !!LLVM_LINK_DYLIB;
 
   if (BuiltDyLib) {
-    std::string path((SharedDir + DirSep + DyLibName).str());
+    std::string path((DylibDir + DirSep + DyLibName).str());
     if (DirSep == "\\") {
       std::replace(path.begin(), path.end(), '/', '\\');
     }
@@ -454,12 +468,12 @@ int main(int argc, char **argv) {
   /// extension. Returns true if Lib is in a recognized format.
   auto GetComponentLibraryNameSlice = [&](const StringRef &Lib,
                                           StringRef &Out) {
-    if (Lib.startswith("lib")) {
+    if (Lib.startswith("lib") || Lib.startswith("cyg")) {
       unsigned FromEnd;
       if (Lib.endswith(StaticExt)) {
         FromEnd = StaticExt.size() + 1;
-      } else if (Lib.endswith(SharedExt)) {
-        FromEnd = SharedExt.size() + 1;
+      } else if (Lib.endswith(DylibExt)) {
+        FromEnd = DylibExt.size() + 1;
       } else {
         FromEnd = 0;
       }
@@ -481,10 +495,10 @@ int main(int argc, char **argv) {
         // Treat the DyLibName specially. It is not a component library and
         // already has the necessary prefix and suffix (e.g. `.so`) added so
         // just return it unmodified.
-        assert(Lib.endswith(SharedExt) && "DyLib is missing suffix");
+        assert(Lib.endswith(DylibExt) && "DyLib is missing suffix");
         LibFileName = std::string(Lib);
       } else {
-        LibFileName = (SharedPrefix + Lib + "." + SharedExt).str();
+        LibFileName = (DylibPrefix + Lib + "." + DylibExt).str();
       }
     } else {
       // default to static
