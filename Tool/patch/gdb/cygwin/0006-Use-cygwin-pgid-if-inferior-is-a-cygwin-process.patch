From fd538625ef0453a5858e846df26f6fa58606210d Mon Sep 17 00:00:00 2001
From: Takashi Yano <takashi.yano@nifty.ne.jp>
Date: Thu, 6 May 2021 20:59:14 +0100
Subject: [PATCH 6/7] Use cygwin pgid if inferior is a cygwin process

I have noticed that cygwin gdb has a problem with the terrminal process
group on the inferior. e.g.:

1) Install coreutils-debuginfo package.
2) Run "gdb cat".
3) Enter "start" in gdb.
4) Enter "cont" in gdb.

This results in:
/usr/bin/cat: -: Input/output error

Cygwin gdb uses CreateProcessW() to execute debugging process, rather
than exec(), so gdb has the Windows (rather than cygwin) PID.

If the inferior is a cygwin process, use the cygwin pid. However, if
the inferior is a non-cygwin process, tcsetpgrp() is not meaningful and
there is no appropriate pgid to set.
---
 gdb/inflow.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/gdb/inflow.c b/gdb/inflow.c
index f9917d6a81c..ade695972ce 100644
--- a/gdb/inflow.c
+++ b/gdb/inflow.c
@@ -40,6 +40,10 @@
 #include <sys/ioctl.h>
 #endif
 
+#ifdef __CYGWIN__
+#include <sys/cygwin.h>
+#endif
+
 #ifndef O_NOCTTY
 #define O_NOCTTY 0
 #endif
@@ -367,7 +371,13 @@ child_terminal_inferior (struct target_ops *self)
 	     time the inferior was running.  See also comments
 	     describing terminal_state::process_group.  */
 #ifdef HAVE_GETPGID
+#ifdef __CYGWIN__
+	  pid_t cygpid = cygwin_internal (CW_WINPID_TO_CYGWIN_PID, inf->pid);
+	  if (cygpid <= cygwin_internal (CW_MAX_CYGWIN_PID))
+	    result = tcsetpgrp (0, getpgid (cygpid));
+#else
 	  result = tcsetpgrp (0, getpgid (inf->pid));
+#endif
 #else
 	  result = tcsetpgrp (0, tinfo->process_group);
 #endif
-- 
2.33.0

